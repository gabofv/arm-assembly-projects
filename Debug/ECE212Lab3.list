
ECE212Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000524c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  080053dc  080053dc  000153dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005648  08005648  0002046c  2**0
                  CONTENTS
  4 .ARM          00000008  08005648  08005648  00015648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005650  08005650  0002046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005650  08005650  00015650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005654  08005654  00015654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000046c  20000000  08005658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000046c  08005ac4  0002046c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  08005ac4  0002052c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002046c  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000bcaf  00000000  00000000  0002049c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0000c32a  00000000  00000000  0002c14b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c5a  00000000  00000000  00038475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a10  00000000  00000000  0003a0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000c2b50  00000000  00000000  0003aae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000008d8  00000000  00000000  000fd630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020e0b  00000000  00000000  000fdf08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011ed13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003258  00000000  00000000  0011ed64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000046c 	.word	0x2000046c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080053c4 	.word	0x080053c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000470 	.word	0x20000470
 80001cc:	080053c4 	.word	0x080053c4

080001d0 <TestAsmCall>:
.extern getstring
//.syntax unified

.text
TestAsmCall:
PUSH {lr}
 80001d0:	b500      	push	{lr}
bl cr
 80001d2:	f000 fba7 	bl	8000924 <cr>
ldr r0, =StackValue
 80001d6:	4884      	ldr	r0, [pc, #528]	; (80003e8 <Exit+0x18>)
bl printf
 80001d8:	f003 f974 	bl	80034c4 <iprintf>
mov r0,sp
 80001dc:	4668      	mov	r0, sp
bl value1
 80001de:	f000 fbb9 	bl	8000954 <value1>
bl cr
 80001e2:	f000 fb9f 	bl	8000924 <cr>

080001e6 <Repeat>:
Repeat:
bl cr
 80001e6:	f000 fb9d 	bl	8000924 <cr>
ldr r0, =Prompt
 80001ea:	4880      	ldr	r0, [pc, #512]	; (80003ec <Exit+0x1c>)
bl printf
 80001ec:	f003 f96a 	bl	80034c4 <iprintf>
bl cr
 80001f0:	f000 fb98 	bl	8000924 <cr>
ldr r0, =Sub1
 80001f4:	487e      	ldr	r0, [pc, #504]	; (80003f0 <Exit+0x20>)
bl printf
 80001f6:	f003 f965 	bl	80034c4 <iprintf>
bl cr
 80001fa:	f000 fb93 	bl	8000924 <cr>
ldr r0, =Sub2
 80001fe:	487d      	ldr	r0, [pc, #500]	; (80003f4 <Exit+0x24>)
bl printf
 8000200:	f003 f960 	bl	80034c4 <iprintf>
bl cr
 8000204:	f000 fb8e 	bl	8000924 <cr>
ldr r0, =Sub3
 8000208:	487b      	ldr	r0, [pc, #492]	; (80003f8 <Exit+0x28>)
bl printf
 800020a:	f003 f95b 	bl	80034c4 <iprintf>
bl cr
 800020e:	f000 fb89 	bl	8000924 <cr>
ldr r0, =Sub4
 8000212:	487a      	ldr	r0, [pc, #488]	; (80003fc <Exit+0x2c>)
bl printf
 8000214:	f003 f956 	bl	80034c4 <iprintf>
bl cr
 8000218:	f000 fb84 	bl	8000924 <cr>
bl printf
 800021c:	f003 f952 	bl	80034c4 <iprintf>
bl getstring
 8000220:	f000 fba6 	bl	8000970 <getstring>
mov r4,r0
 8000224:	1c04      	adds	r4, r0, #0
bl cr
 8000226:	f000 fb7d 	bl	8000924 <cr>
cmp r4,#1
 800022a:	2c01      	cmp	r4, #1
beq ChkSub1
 800022c:	d04b      	beq.n	80002c6 <ChkSub1>
cmp r4,#2
 800022e:	2c02      	cmp	r4, #2
beq ChkSub2
 8000230:	d07d      	beq.n	800032e <ChkSub2>
cmp r4,#3
 8000232:	2c03      	cmp	r4, #3
beq ChkSub3
 8000234:	d018      	beq.n	8000268 <ChkSub3>
cmp r4,#4
 8000236:	2c04      	cmp	r4, #4
beq ChkSub4
 8000238:	d003      	beq.n	8000242 <ChkSub4>
ldr r0, =Invalid
 800023a:	4871      	ldr	r0, [pc, #452]	; (8000400 <Exit+0x30>)
bl printf
 800023c:	f003 f942 	bl	80034c4 <iprintf>
bal Repeat
 8000240:	e7d1      	b.n	80001e6 <Repeat>

08000242 <ChkSub4>:
ChkSub4:
ldr r4,=0xFFFFFFFF
 8000242:	f04f 34ff 	mov.w	r4, #4294967295
PUSH {r4}
 8000246:	b410      	push	{r4}
bl Welcomeprompt
 8000248:	f000 f8f0 	bl	800042c <Welcomeprompt>
POP {r4}
 800024c:	bc10      	pop	{r4}
ldr r0,=0x20001000
 800024e:	486d      	ldr	r0, [pc, #436]	; (8000404 <Exit+0x34>)
PUSH {r4}
 8000250:	b410      	push	{r4}
bl Sort
 8000252:	f000 f94f 	bl	80004f4 <Sort>
POP {r4}
 8000256:	bc10      	pop	{r4}
ldr r5,=0x20001000
 8000258:	4d6a      	ldr	r5, [pc, #424]	; (8000404 <Exit+0x34>)
PUSH {r5}
 800025a:	b420      	push	{r5}
PUSH {r4}
 800025c:	b410      	push	{r4}
bl Display
 800025e:	f000 f967 	bl	8000530 <Display>
POP {r4}
 8000262:	bc10      	pop	{r4}
POP {r5}
 8000264:	bc20      	pop	{r5}
bal Exit
 8000266:	e0b3      	b.n	80003d0 <Exit>

08000268 <ChkSub3>:
ChkSub3:
mov r4,sp
 8000268:	466c      	mov	r4, sp
PUSH {r4}
 800026a:	b410      	push	{r4}
ldr r0, =Subroutine3
 800026c:	4866      	ldr	r0, [pc, #408]	; (8000408 <Exit+0x38>)
bl printf
 800026e:	f003 f929 	bl	80034c4 <iprintf>
bl cr
 8000272:	f000 fb57 	bl	8000924 <cr>
ldr r5,=0x20001000
 8000276:	4d63      	ldr	r5, [pc, #396]	; (8000404 <Exit+0x34>)
PUSH {r5}
 8000278:	b420      	push	{r5}
PUSH {r6}
 800027a:	b440      	push	{r6}
ldr r4, =#0x44444444
 800027c:	f04f 3444 	mov.w	r4, #1145324612	; 0x44444444
ldr r5, =#0x55555555
 8000280:	f04f 3555 	mov.w	r5, #1431655765	; 0x55555555
ldr r6, =#0x66666666
 8000284:	f04f 3666 	mov.w	r6, #1717986918	; 0x66666666
bl Display
 8000288:	f000 f952 	bl	8000530 <Display>

0800028c <RegCheck2>:
RegCheck2:
ldr r0,=#0x44444444
 800028c:	f04f 3044 	mov.w	r0, #1145324612	; 0x44444444
cmp r4,r0
 8000290:	4284      	cmp	r4, r0
bne RegisterModify2
 8000292:	d108      	bne.n	80002a6 <RegisterModify2>
ldr r0,=#0x55555555
 8000294:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
cmp r5,r0
 8000298:	4285      	cmp	r5, r0
bne RegisterModify2
 800029a:	d104      	bne.n	80002a6 <RegisterModify2>
ldr r0,=#0x66666666
 800029c:	f04f 3066 	mov.w	r0, #1717986918	; 0x66666666
cmp r6,r0
 80002a0:	4286      	cmp	r6, r0
bne RegisterModify2
 80002a2:	d100      	bne.n	80002a6 <RegisterModify2>
bal Next4
 80002a4:	e004      	b.n	80002b0 <Next4>

080002a6 <RegisterModify2>:
RegisterModify2:
ldr r0, =RegisterError
 80002a6:	4859      	ldr	r0, [pc, #356]	; (800040c <Exit+0x3c>)
bl printf
 80002a8:	f003 f90c 	bl	80034c4 <iprintf>
bl cr
 80002ac:	f000 fb3a 	bl	8000924 <cr>

080002b0 <Next4>:
Next4:
POP {r6}
 80002b0:	bc40      	pop	{r6}
POP {r5}
 80002b2:	bc20      	pop	{r5}
POP {r4}
 80002b4:	bc10      	pop	{r4}
cmp r4,sp
 80002b6:	456c      	cmp	r4, sp
beq Next5
 80002b8:	d004      	beq.n	80002c4 <Next5>
ldr r0, =StackError
 80002ba:	4855      	ldr	r0, [pc, #340]	; (8000410 <Exit+0x40>)
bl printf
 80002bc:	f003 f902 	bl	80034c4 <iprintf>
bl cr
 80002c0:	f000 fb30 	bl	8000924 <cr>

080002c4 <Next5>:
Next5:
bal Repeat
 80002c4:	e78f      	b.n	80001e6 <Repeat>

080002c6 <ChkSub1>:
ChkSub1:
mov r4,sp
 80002c6:	466c      	mov	r4, sp
PUSH {r4}
 80002c8:	b410      	push	{r4}
ldr r5, =#0x55555555
 80002ca:	f04f 3555 	mov.w	r5, #1431655765	; 0x55555555
ldr r6, =#0x66666666
 80002ce:	f04f 3666 	mov.w	r6, #1717986918	; 0x66666666
ldr r4, =#0x44444444
 80002d2:	f04f 3444 	mov.w	r4, #1145324612	; 0x44444444
ldr r0, =Subroutine1
 80002d6:	484f      	ldr	r0, [pc, #316]	; (8000414 <Exit+0x44>)
bl printf
 80002d8:	f003 f8f4 	bl	80034c4 <iprintf>
bl cr
 80002dc:	f000 fb22 	bl	8000924 <cr>
PUSH {r4}
 80002e0:	b410      	push	{r4}
bl Welcomeprompt
 80002e2:	f000 f8a3 	bl	800042c <Welcomeprompt>

080002e6 <RegCheck>:
RegCheck:
ldr r0,=#0x44444444
 80002e6:	f04f 3044 	mov.w	r0, #1145324612	; 0x44444444
cmp r4,r0
 80002ea:	4284      	cmp	r4, r0
bne RegisterModify
 80002ec:	d108      	bne.n	8000300 <RegisterModify>
ldr r0,=#0x55555555
 80002ee:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
cmp r5,r0
 80002f2:	4285      	cmp	r5, r0
bne RegisterModify
 80002f4:	d104      	bne.n	8000300 <RegisterModify>
ldr r0,=#0x66666666
 80002f6:	f04f 3066 	mov.w	r0, #1717986918	; 0x66666666
cmp r6,r0
 80002fa:	4286      	cmp	r6, r0
bne RegisterModify
 80002fc:	d100      	bne.n	8000300 <RegisterModify>
bal Next
 80002fe:	e004      	b.n	800030a <Next>

08000300 <RegisterModify>:
RegisterModify:
ldr r0, =RegisterError
 8000300:	4842      	ldr	r0, [pc, #264]	; (800040c <Exit+0x3c>)
bl printf
 8000302:	f003 f8df 	bl	80034c4 <iprintf>
bl cr
 8000306:	f000 fb0d 	bl	8000924 <cr>

0800030a <Next>:
Next:
POP {r6}
 800030a:	bc40      	pop	{r6}
POP {r5}
 800030c:	bc20      	pop	{r5}
cmp r5,sp
 800030e:	456d      	cmp	r5, sp
beq Next1
 8000310:	d004      	beq.n	800031c <Next1>
ldr r0, =StackError
 8000312:	483f      	ldr	r0, [pc, #252]	; (8000410 <Exit+0x40>)
bl printf
 8000314:	f003 f8d6 	bl	80034c4 <iprintf>
bl cr
 8000318:	f000 fb04 	bl	8000924 <cr>

0800031c <Next1>:
Next1:
ldr r0, =KeyboardEntry
 800031c:	483e      	ldr	r0, [pc, #248]	; (8000418 <Exit+0x48>)
bl printf
 800031e:	f003 f8d1 	bl	80034c4 <iprintf>
mov r0,r6
 8000322:	1c30      	adds	r0, r6, #0
bl value
 8000324:	f000 fb08 	bl	8000938 <value>
bl cr
 8000328:	f000 fafc 	bl	8000924 <cr>
bal Repeat
 800032c:	e75b      	b.n	80001e6 <Repeat>

0800032e <ChkSub2>:
ChkSub2:
mov r4,sp
 800032e:	466c      	mov	r4, sp
PUSH {r4}
 8000330:	b410      	push	{r4}
ldr r0, =Subroutine2
 8000332:	483a      	ldr	r0, [pc, #232]	; (800041c <Exit+0x4c>)
bl printf
 8000334:	f003 f8c6 	bl	80034c4 <iprintf>
bl cr
 8000338:	f000 faf4 	bl	8000924 <cr>
ldr r0, =BeforeSort
 800033c:	4838      	ldr	r0, [pc, #224]	; (8000420 <Exit+0x50>)
bl printf
 800033e:	f003 f8c1 	bl	80034c4 <iprintf>
bl cr
 8000342:	f000 faef 	bl	8000924 <cr>
mov r5,r6
 8000346:	1c35      	adds	r5, r6, #0
ldr r4, =#0x20001000
 8000348:	4c2e      	ldr	r4, [pc, #184]	; (8000404 <Exit+0x34>)

0800034a <Repeat1>:
Repeat1:
ldr r0,[r4]
 800034a:	6820      	ldr	r0, [r4, #0]
bl value
 800034c:	f000 faf4 	bl	8000938 <value>
bl cr
 8000350:	f000 fae8 	bl	8000924 <cr>
add r4,#4
 8000354:	3404      	adds	r4, #4
sub r5,#1
 8000356:	3d01      	subs	r5, #1
cmp r5,#0
 8000358:	2d00      	cmp	r5, #0
bne Repeat1
 800035a:	d1f6      	bne.n	800034a <Repeat1>
bl cr
 800035c:	f000 fae2 	bl	8000924 <cr>
PUSH {r6}
 8000360:	b440      	push	{r6}
ldr r4, =#0x44444444
 8000362:	f04f 3444 	mov.w	r4, #1145324612	; 0x44444444
ldr r5, =#0x55555555
 8000366:	f04f 3555 	mov.w	r5, #1431655765	; 0x55555555
ldr r6, =#0x66666666
 800036a:	f04f 3666 	mov.w	r6, #1717986918	; 0x66666666
ldr r0,=0x20001000
 800036e:	4825      	ldr	r0, [pc, #148]	; (8000404 <Exit+0x34>)
bl Sort
 8000370:	f000 f8c0 	bl	80004f4 <Sort>

08000374 <RegCheck1>:
RegCheck1:
ldr r0,=#0x44444444
 8000374:	f04f 3044 	mov.w	r0, #1145324612	; 0x44444444
cmp r4,r0
 8000378:	4284      	cmp	r4, r0
bne RegisterModify1
 800037a:	d108      	bne.n	800038e <RegisterModify1>
ldr r0,=#0x55555555
 800037c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
cmp r5,r0
 8000380:	4285      	cmp	r5, r0
bne RegisterModify1
 8000382:	d104      	bne.n	800038e <RegisterModify1>
ldr r0,=#0x66666666
 8000384:	f04f 3066 	mov.w	r0, #1717986918	; 0x66666666
cmp r6,r0
 8000388:	4286      	cmp	r6, r0
bne RegisterModify1
 800038a:	d100      	bne.n	800038e <RegisterModify1>
bal Next2
 800038c:	e004      	b.n	8000398 <Next2>

0800038e <RegisterModify1>:
RegisterModify1:
ldr r0, =RegisterError
 800038e:	481f      	ldr	r0, [pc, #124]	; (800040c <Exit+0x3c>)
bl printf
 8000390:	f003 f898 	bl	80034c4 <iprintf>
bl cr
 8000394:	f000 fac6 	bl	8000924 <cr>

08000398 <Next2>:
Next2:
POP {r6}
 8000398:	bc40      	pop	{r6}
POP {r5}
 800039a:	bc20      	pop	{r5}
cmp r5,sp
 800039c:	456d      	cmp	r5, sp
beq Next3
 800039e:	d004      	beq.n	80003aa <Next3>
ldr r0, =StackError
 80003a0:	481b      	ldr	r0, [pc, #108]	; (8000410 <Exit+0x40>)
bl printf
 80003a2:	f003 f88f 	bl	80034c4 <iprintf>
bl cr
 80003a6:	f000 fabd 	bl	8000924 <cr>

080003aa <Next3>:
Next3:
mov r5,r6
 80003aa:	1c35      	adds	r5, r6, #0
ldr r4, =#0x20001000
 80003ac:	4c15      	ldr	r4, [pc, #84]	; (8000404 <Exit+0x34>)
ldr r0, =AfterSort
 80003ae:	481d      	ldr	r0, [pc, #116]	; (8000424 <Exit+0x54>)
bl printf
 80003b0:	f003 f888 	bl	80034c4 <iprintf>
bl cr
 80003b4:	f000 fab6 	bl	8000924 <cr>

080003b8 <Repeat2>:
Repeat2:
ldr r0,[r4]
 80003b8:	6820      	ldr	r0, [r4, #0]
bl value
 80003ba:	f000 fabd 	bl	8000938 <value>
bl cr
 80003be:	f000 fab1 	bl	8000924 <cr>
add r4,#4
 80003c2:	3404      	adds	r4, #4
sub r5,#1
 80003c4:	3d01      	subs	r5, #1
cmp r5,#0
 80003c6:	2d00      	cmp	r5, #0
bne Repeat2
 80003c8:	d1f6      	bne.n	80003b8 <Repeat2>
bl cr
 80003ca:	f000 faab 	bl	8000924 <cr>
bal Repeat
 80003ce:	e70a      	b.n	80001e6 <Repeat>

080003d0 <Exit>:

Exit:
bl cr
 80003d0:	f000 faa8 	bl	8000924 <cr>
ldr r0, =StackValue1
 80003d4:	4814      	ldr	r0, [pc, #80]	; (8000428 <Exit+0x58>)
bl printf
 80003d6:	f003 f875 	bl	80034c4 <iprintf>
mov r0,sp
 80003da:	4668      	mov	r0, sp
bl value1
 80003dc:	f000 faba 	bl	8000954 <value1>
bl cr
 80003e0:	f000 faa0 	bl	8000924 <cr>
/*-----------------DO NOT MODIFY--------*/
POP {PC}
 80003e4:	bd00      	pop	{pc}
 80003e6:	0000      	.short	0x0000
ldr r0, =StackValue
 80003e8:	20000000 	.word	0x20000000
ldr r0, =Prompt
 80003ec:	2000004c 	.word	0x2000004c
ldr r0, =Sub1
 80003f0:	2000007c 	.word	0x2000007c
ldr r0, =Sub2
 80003f4:	20000096 	.word	0x20000096
ldr r0, =Sub3
 80003f8:	200000b1 	.word	0x200000b1
ldr r0, =Sub4
 80003fc:	200000cb 	.word	0x200000cb
ldr r0, =Invalid
 8000400:	200001a1 	.word	0x200001a1
ldr r0,=0x20001000
 8000404:	20001000 	.word	0x20001000
ldr r0, =Subroutine3
 8000408:	2000014c 	.word	0x2000014c
ldr r0, =RegisterError
 800040c:	200000fd 	.word	0x200000fd
ldr r0, =StackError
 8000410:	200001cb 	.word	0x200001cb
ldr r0, =Subroutine1
 8000414:	2000011c 	.word	0x2000011c
ldr r0, =KeyboardEntry
 8000418:	200000e3 	.word	0x200000e3
ldr r0, =Subroutine2
 800041c:	20000134 	.word	0x20000134
ldr r0, =BeforeSort
 8000420:	200001e7 	.word	0x200001e7
ldr r0, =AfterSort
 8000424:	20000200 	.word	0x20000200
ldr r0, =StackValue1
 8000428:	2000002b 	.word	0x2000002b

0800042c <Welcomeprompt>:

.text
Welcomeprompt:
/*-----------------Students write their subroutine here--------------------*/

PUSH {lr}
 800042c:	b500      	push	{lr}
PUSH {r0}
 800042e:	b401      	push	{r0}
// Temp var to store curr
PUSH {r4}
 8000430:	b410      	push	{r4}
// Size of array
PUSH {r5}
 8000432:	b420      	push	{r5}
// Address to store elements
PUSH {r6}
 8000434:	b440      	push	{r6}

LDR r6, =0x20001000
 8000436:	4e27      	ldr	r6, [pc, #156]	; (80004d4 <END+0xa>)

// Print Welcome
BL cr
 8000438:	f000 fa74 	bl	8000924 <cr>
LDR r0, =WelcomeString
 800043c:	4826      	ldr	r0, [pc, #152]	; (80004d8 <END+0xe>)
bl printf
 800043e:	f003 f841 	bl	80034c4 <iprintf>

08000442 <N_ENTRIES_INPUT>:

// Input for # of entries
N_ENTRIES_INPUT:
	BL cr
 8000442:	f000 fa6f 	bl	8000924 <cr>
	LDR r0, =Prompt
 8000446:	4825      	ldr	r0, [pc, #148]	; (80004dc <END+0x12>)
	BL printf
 8000448:	f003 f83c 	bl	80034c4 <iprintf>

	BL getstring
 800044c:	f000 fa90 	bl	8000970 <getstring>

	MOV r5, r0
 8000450:	4605      	mov	r5, r0

	BL value
 8000452:	f000 fa71 	bl	8000938 <value>

	CMP r5, #3
 8000456:	2d03      	cmp	r5, #3
	BLT TOO_LOW
 8000458:	db2b      	blt.n	80004b2 <TOO_LOW>

	CMP r5, #10
 800045a:	2d0a      	cmp	r5, #10
	BGT TOO_HIGH
 800045c:	dc2f      	bgt.n	80004be <TOO_HIGH>


	STR r5, [SP, #0x14]
 800045e:	9505      	str	r5, [sp, #20]

08000460 <ELEMENTS_INPUT>:
	//BL cr

// Input for elements
ELEMENTS_INPUT:

	CMP r5, #1
 8000460:	2d01      	cmp	r5, #1
	BEQ LAST_ELEMENT_INPUT
 8000462:	d010      	beq.n	8000486 <LAST_ELEMENT_INPUT>

	BL cr
 8000464:	f000 fa5e 	bl	8000924 <cr>
	LDR r0, =Prompt1
 8000468:	481d      	ldr	r0, [pc, #116]	; (80004e0 <END+0x16>)
	BL printf
 800046a:	f003 f82b 	bl	80034c4 <iprintf>

	BL getstring
 800046e:	f000 fa7f 	bl	8000970 <getstring>

	MOVS r4, r0
 8000472:	0004      	movs	r4, r0

	BL value
 8000474:	f000 fa60 	bl	8000938 <value>

	CMP r4, #0x1
 8000478:	2c01      	cmp	r4, #1
	BLT INVALID_ENTRY
 800047a:	db14      	blt.n	80004a6 <INVALID_ENTRY>

	STR r4, [r6], #0x4
 800047c:	f846 4b04 	str.w	r4, [r6], #4

	SUB r5, #1
 8000480:	f1a5 0501 	sub.w	r5, r5, #1

	B ELEMENTS_INPUT
 8000484:	e7ec      	b.n	8000460 <ELEMENTS_INPUT>

08000486 <LAST_ELEMENT_INPUT>:

LAST_ELEMENT_INPUT:
	BL cr
 8000486:	f000 fa4d 	bl	8000924 <cr>
	LDR r0, =Prompt2
 800048a:	4816      	ldr	r0, [pc, #88]	; (80004e4 <END+0x1a>)
	BL printf
 800048c:	f003 f81a 	bl	80034c4 <iprintf>

	// Receive input
	BL getstring
 8000490:	f000 fa6e 	bl	8000970 <getstring>

	MOVS r4, r0
 8000494:	0004      	movs	r4, r0
	BL value
 8000496:	f000 fa4f 	bl	8000938 <value>

	CMP r4, #0x1
 800049a:	2c01      	cmp	r4, #1
	BLT INVALID_ENTRY
 800049c:	db03      	blt.n	80004a6 <INVALID_ENTRY>

	STR r4, [r6]
 800049e:	6034      	str	r4, [r6, #0]

	BL cr
 80004a0:	f000 fa40 	bl	8000924 <cr>
	B END
 80004a4:	e011      	b.n	80004ca <END>

080004a6 <INVALID_ENTRY>:

INVALID_ENTRY:
	BL cr
 80004a6:	f000 fa3d 	bl	8000924 <cr>
	LDR r0, =Prompt5
 80004aa:	480f      	ldr	r0, [pc, #60]	; (80004e8 <END+0x1e>)
	BL printf
 80004ac:	f003 f80a 	bl	80034c4 <iprintf>

	B ELEMENTS_INPUT
 80004b0:	e7d6      	b.n	8000460 <ELEMENTS_INPUT>

080004b2 <TOO_LOW>:

TOO_LOW:
	BL cr
 80004b2:	f000 fa37 	bl	8000924 <cr>
	LDR r0, =Prompt3
 80004b6:	480d      	ldr	r0, [pc, #52]	; (80004ec <END+0x22>)
	BL printf
 80004b8:	f003 f804 	bl	80034c4 <iprintf>
	B N_ENTRIES_INPUT
 80004bc:	e7c1      	b.n	8000442 <N_ENTRIES_INPUT>

080004be <TOO_HIGH>:

TOO_HIGH:
	BL cr
 80004be:	f000 fa31 	bl	8000924 <cr>
	LDR r0, =Prompt4
 80004c2:	480b      	ldr	r0, [pc, #44]	; (80004f0 <END+0x26>)
	BL printf
 80004c4:	f002 fffe 	bl	80034c4 <iprintf>
	B N_ENTRIES_INPUT
 80004c8:	e7bb      	b.n	8000442 <N_ENTRIES_INPUT>

080004ca <END>:

END:

POP {r6}
 80004ca:	bc40      	pop	{r6}
POP {r5}
 80004cc:	bc20      	pop	{r5}
POP {r4}
 80004ce:	bc10      	pop	{r4}
POP {r0}
 80004d0:	bc01      	pop	{r0}
POP {pc}
 80004d2:	bd00      	pop	{pc}
LDR r6, =0x20001000
 80004d4:	20001000 	.word	0x20001000
LDR r0, =WelcomeString
 80004d8:	20000218 	.word	0x20000218
	LDR r0, =Prompt
 80004dc:	2000023e 	.word	0x2000023e
	LDR r0, =Prompt1
 80004e0:	20000282 	.word	0x20000282
	LDR r0, =Prompt2
 80004e4:	200002bb 	.word	0x200002bb
	LDR r0, =Prompt5
 80004e8:	2000033a 	.word	0x2000033a
	LDR r0, =Prompt3
 80004ec:	200002fb 	.word	0x200002fb
	LDR r0, =Prompt4
 80004f0:	20000329 	.word	0x20000329

080004f4 <Sort>:

.text
Sort:
/*-----------------Students write their subroutine here--------------------*/

PUSH {lr}
 80004f4:	b500      	push	{lr}
PUSH {r0-r5}
 80004f6:	b43f      	push	{r0, r1, r2, r3, r4, r5}

// Get size of array from stack
LDR r0, [SP, #0x1C]
 80004f8:	9807      	ldr	r0, [sp, #28]

080004fa <REPEAT_1>:

REPEAT_1:
LDR r2, =0x20001000
 80004fa:	4a0c      	ldr	r2, [pc, #48]	; (800052c <END+0x4>)
CMP r0, #0x1
 80004fc:	2801      	cmp	r0, #1
BEQ END
 80004fe:	d013      	beq.n	8000528 <END>
MOV r1, r0
 8000500:	4601      	mov	r1, r0

08000502 <REPEAT_2>:

REPEAT_2:
CMP r1, #0
 8000502:	2900      	cmp	r1, #0
BEQ CONTINUE
 8000504:	d006      	beq.n	8000514 <CONTINUE>

// list[i]
LDR r3, [r2], #0x4
 8000506:	f852 3b04 	ldr.w	r3, [r2], #4
// list[i+1]
LDR r4, [r2]
 800050a:	6814      	ldr	r4, [r2, #0]

CMP r3, r4
 800050c:	42a3      	cmp	r3, r4
BHI SWAP
 800050e:	d804      	bhi.n	800051a <SWAP>
SUB r1, #0x1
 8000510:	f1a1 0101 	sub.w	r1, r1, #1

08000514 <CONTINUE>:

CONTINUE:
SUB r0, #0x1
 8000514:	f1a0 0001 	sub.w	r0, r0, #1
B REPEAT_1
 8000518:	e7ef      	b.n	80004fa <REPEAT_1>

0800051a <SWAP>:

SWAP:
MOV r5, r4
 800051a:	4625      	mov	r5, r4
STR r3, [r2]
 800051c:	6013      	str	r3, [r2, #0]
STR r5, [r2, #-0x4]
 800051e:	f842 5c04 	str.w	r5, [r2, #-4]

SUB r1, #0x1
 8000522:	f1a1 0101 	sub.w	r1, r1, #1
B REPEAT_2
 8000526:	e7ec      	b.n	8000502 <REPEAT_2>

08000528 <END>:

END:
POP {r0-r5}
 8000528:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
POP {pc}
 800052a:	bd00      	pop	{pc}
LDR r2, =0x20001000
 800052c:	20001000 	.word	0x20001000

08000530 <Display>:

.text
Display:
/*-----------------Students write their subroutine here--------------------*/

PUSH {lr}
 8000530:	b500      	push	{lr}
PUSH {r0-r5}
 8000532:	b43f      	push	{r0, r1, r2, r3, r4, r5}

BL cr
 8000534:	f000 f9f6 	bl	8000924 <cr>
LDR r0, =Hello
 8000538:	480e      	ldr	r0, [pc, #56]	; (8000574 <END+0x10>)
BL printf
 800053a:	f002 ffc3 	bl	80034c4 <iprintf>

BL cr
 800053e:	f000 f9f1 	bl	8000924 <cr>
LDR r0, =Entries
 8000542:	480d      	ldr	r0, [pc, #52]	; (8000578 <END+0x14>)
BL printf
 8000544:	f002 ffbe 	bl	80034c4 <iprintf>

// Number of entries
LDR r0, [SP, #0x1C]
 8000548:	9807      	ldr	r0, [sp, #28]
MOV r4, r0
 800054a:	4604      	mov	r4, r0
BL value
 800054c:	f000 f9f4 	bl	8000938 <value>

// Start of array
LDR r5, [SP, #0x20]
 8000550:	9d08      	ldr	r5, [sp, #32]

08000552 <REPEAT>:

REPEAT:

BL cr
 8000552:	f000 f9e7 	bl	8000924 <cr>
LDR r0, [r5], 0x4
 8000556:	f855 0b04 	ldr.w	r0, [r5], #4
BL value
 800055a:	f000 f9ed 	bl	8000938 <value>

SUBS r4, #0x1
 800055e:	3c01      	subs	r4, #1

// Exit on zero
CBZ r4, END
 8000560:	b104      	cbz	r4, 8000564 <END>

B REPEAT
 8000562:	e7f6      	b.n	8000552 <REPEAT>

08000564 <END>:

END:

BL cr
 8000564:	f000 f9de 	bl	8000924 <cr>
LDR r0, =endmsg
 8000568:	4804      	ldr	r0, [pc, #16]	; (800057c <END+0x18>)
BL printf
 800056a:	f002 ffab 	bl	80034c4 <iprintf>

POP {r0-r5}
 800056e:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
POP {pc}
 8000570:	bd00      	pop	{pc}
 8000572:	0000      	.short	0x0000
LDR r0, =Hello
 8000574:	2000036d 	.word	0x2000036d
LDR r0, =Entries
 8000578:	2000039e 	.word	0x2000039e
LDR r0, =endmsg
 800057c:	200003eb 	.word	0x200003eb

08000580 <memchr>:
 8000580:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000584:	2a10      	cmp	r2, #16
 8000586:	db2b      	blt.n	80005e0 <memchr+0x60>
 8000588:	f010 0f07 	tst.w	r0, #7
 800058c:	d008      	beq.n	80005a0 <memchr+0x20>
 800058e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000592:	3a01      	subs	r2, #1
 8000594:	428b      	cmp	r3, r1
 8000596:	d02d      	beq.n	80005f4 <memchr+0x74>
 8000598:	f010 0f07 	tst.w	r0, #7
 800059c:	b342      	cbz	r2, 80005f0 <memchr+0x70>
 800059e:	d1f6      	bne.n	800058e <memchr+0xe>
 80005a0:	b4f0      	push	{r4, r5, r6, r7}
 80005a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80005a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80005aa:	f022 0407 	bic.w	r4, r2, #7
 80005ae:	f07f 0700 	mvns.w	r7, #0
 80005b2:	2300      	movs	r3, #0
 80005b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80005b8:	3c08      	subs	r4, #8
 80005ba:	ea85 0501 	eor.w	r5, r5, r1
 80005be:	ea86 0601 	eor.w	r6, r6, r1
 80005c2:	fa85 f547 	uadd8	r5, r5, r7
 80005c6:	faa3 f587 	sel	r5, r3, r7
 80005ca:	fa86 f647 	uadd8	r6, r6, r7
 80005ce:	faa5 f687 	sel	r6, r5, r7
 80005d2:	b98e      	cbnz	r6, 80005f8 <memchr+0x78>
 80005d4:	d1ee      	bne.n	80005b4 <memchr+0x34>
 80005d6:	bcf0      	pop	{r4, r5, r6, r7}
 80005d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80005dc:	f002 0207 	and.w	r2, r2, #7
 80005e0:	b132      	cbz	r2, 80005f0 <memchr+0x70>
 80005e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80005e6:	3a01      	subs	r2, #1
 80005e8:	ea83 0301 	eor.w	r3, r3, r1
 80005ec:	b113      	cbz	r3, 80005f4 <memchr+0x74>
 80005ee:	d1f8      	bne.n	80005e2 <memchr+0x62>
 80005f0:	2000      	movs	r0, #0
 80005f2:	4770      	bx	lr
 80005f4:	3801      	subs	r0, #1
 80005f6:	4770      	bx	lr
 80005f8:	2d00      	cmp	r5, #0
 80005fa:	bf06      	itte	eq
 80005fc:	4635      	moveq	r5, r6
 80005fe:	3803      	subeq	r0, #3
 8000600:	3807      	subne	r0, #7
 8000602:	f015 0f01 	tst.w	r5, #1
 8000606:	d107      	bne.n	8000618 <memchr+0x98>
 8000608:	3001      	adds	r0, #1
 800060a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800060e:	bf02      	ittt	eq
 8000610:	3001      	addeq	r0, #1
 8000612:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000616:	3001      	addeq	r0, #1
 8000618:	bcf0      	pop	{r4, r5, r6, r7}
 800061a:	3801      	subs	r0, #1
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <__aeabi_uldivmod>:
 8000620:	b953      	cbnz	r3, 8000638 <__aeabi_uldivmod+0x18>
 8000622:	b94a      	cbnz	r2, 8000638 <__aeabi_uldivmod+0x18>
 8000624:	2900      	cmp	r1, #0
 8000626:	bf08      	it	eq
 8000628:	2800      	cmpeq	r0, #0
 800062a:	bf1c      	itt	ne
 800062c:	f04f 31ff 	movne.w	r1, #4294967295
 8000630:	f04f 30ff 	movne.w	r0, #4294967295
 8000634:	f000 b974 	b.w	8000920 <__aeabi_idiv0>
 8000638:	f1ad 0c08 	sub.w	ip, sp, #8
 800063c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000640:	f000 f806 	bl	8000650 <__udivmoddi4>
 8000644:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000648:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800064c:	b004      	add	sp, #16
 800064e:	4770      	bx	lr

08000650 <__udivmoddi4>:
 8000650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000654:	9d08      	ldr	r5, [sp, #32]
 8000656:	4604      	mov	r4, r0
 8000658:	468e      	mov	lr, r1
 800065a:	2b00      	cmp	r3, #0
 800065c:	d14d      	bne.n	80006fa <__udivmoddi4+0xaa>
 800065e:	428a      	cmp	r2, r1
 8000660:	4694      	mov	ip, r2
 8000662:	d969      	bls.n	8000738 <__udivmoddi4+0xe8>
 8000664:	fab2 f282 	clz	r2, r2
 8000668:	b152      	cbz	r2, 8000680 <__udivmoddi4+0x30>
 800066a:	fa01 f302 	lsl.w	r3, r1, r2
 800066e:	f1c2 0120 	rsb	r1, r2, #32
 8000672:	fa20 f101 	lsr.w	r1, r0, r1
 8000676:	fa0c fc02 	lsl.w	ip, ip, r2
 800067a:	ea41 0e03 	orr.w	lr, r1, r3
 800067e:	4094      	lsls	r4, r2
 8000680:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000684:	0c21      	lsrs	r1, r4, #16
 8000686:	fbbe f6f8 	udiv	r6, lr, r8
 800068a:	fa1f f78c 	uxth.w	r7, ip
 800068e:	fb08 e316 	mls	r3, r8, r6, lr
 8000692:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000696:	fb06 f107 	mul.w	r1, r6, r7
 800069a:	4299      	cmp	r1, r3
 800069c:	d90a      	bls.n	80006b4 <__udivmoddi4+0x64>
 800069e:	eb1c 0303 	adds.w	r3, ip, r3
 80006a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80006a6:	f080 811f 	bcs.w	80008e8 <__udivmoddi4+0x298>
 80006aa:	4299      	cmp	r1, r3
 80006ac:	f240 811c 	bls.w	80008e8 <__udivmoddi4+0x298>
 80006b0:	3e02      	subs	r6, #2
 80006b2:	4463      	add	r3, ip
 80006b4:	1a5b      	subs	r3, r3, r1
 80006b6:	b2a4      	uxth	r4, r4
 80006b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80006bc:	fb08 3310 	mls	r3, r8, r0, r3
 80006c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006c4:	fb00 f707 	mul.w	r7, r0, r7
 80006c8:	42a7      	cmp	r7, r4
 80006ca:	d90a      	bls.n	80006e2 <__udivmoddi4+0x92>
 80006cc:	eb1c 0404 	adds.w	r4, ip, r4
 80006d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80006d4:	f080 810a 	bcs.w	80008ec <__udivmoddi4+0x29c>
 80006d8:	42a7      	cmp	r7, r4
 80006da:	f240 8107 	bls.w	80008ec <__udivmoddi4+0x29c>
 80006de:	4464      	add	r4, ip
 80006e0:	3802      	subs	r0, #2
 80006e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006e6:	1be4      	subs	r4, r4, r7
 80006e8:	2600      	movs	r6, #0
 80006ea:	b11d      	cbz	r5, 80006f4 <__udivmoddi4+0xa4>
 80006ec:	40d4      	lsrs	r4, r2
 80006ee:	2300      	movs	r3, #0
 80006f0:	e9c5 4300 	strd	r4, r3, [r5]
 80006f4:	4631      	mov	r1, r6
 80006f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fa:	428b      	cmp	r3, r1
 80006fc:	d909      	bls.n	8000712 <__udivmoddi4+0xc2>
 80006fe:	2d00      	cmp	r5, #0
 8000700:	f000 80ef 	beq.w	80008e2 <__udivmoddi4+0x292>
 8000704:	2600      	movs	r6, #0
 8000706:	e9c5 0100 	strd	r0, r1, [r5]
 800070a:	4630      	mov	r0, r6
 800070c:	4631      	mov	r1, r6
 800070e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000712:	fab3 f683 	clz	r6, r3
 8000716:	2e00      	cmp	r6, #0
 8000718:	d14a      	bne.n	80007b0 <__udivmoddi4+0x160>
 800071a:	428b      	cmp	r3, r1
 800071c:	d302      	bcc.n	8000724 <__udivmoddi4+0xd4>
 800071e:	4282      	cmp	r2, r0
 8000720:	f200 80f9 	bhi.w	8000916 <__udivmoddi4+0x2c6>
 8000724:	1a84      	subs	r4, r0, r2
 8000726:	eb61 0303 	sbc.w	r3, r1, r3
 800072a:	2001      	movs	r0, #1
 800072c:	469e      	mov	lr, r3
 800072e:	2d00      	cmp	r5, #0
 8000730:	d0e0      	beq.n	80006f4 <__udivmoddi4+0xa4>
 8000732:	e9c5 4e00 	strd	r4, lr, [r5]
 8000736:	e7dd      	b.n	80006f4 <__udivmoddi4+0xa4>
 8000738:	b902      	cbnz	r2, 800073c <__udivmoddi4+0xec>
 800073a:	deff      	udf	#255	; 0xff
 800073c:	fab2 f282 	clz	r2, r2
 8000740:	2a00      	cmp	r2, #0
 8000742:	f040 8092 	bne.w	800086a <__udivmoddi4+0x21a>
 8000746:	eba1 010c 	sub.w	r1, r1, ip
 800074a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800074e:	fa1f fe8c 	uxth.w	lr, ip
 8000752:	2601      	movs	r6, #1
 8000754:	0c20      	lsrs	r0, r4, #16
 8000756:	fbb1 f3f7 	udiv	r3, r1, r7
 800075a:	fb07 1113 	mls	r1, r7, r3, r1
 800075e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000762:	fb0e f003 	mul.w	r0, lr, r3
 8000766:	4288      	cmp	r0, r1
 8000768:	d908      	bls.n	800077c <__udivmoddi4+0x12c>
 800076a:	eb1c 0101 	adds.w	r1, ip, r1
 800076e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000772:	d202      	bcs.n	800077a <__udivmoddi4+0x12a>
 8000774:	4288      	cmp	r0, r1
 8000776:	f200 80cb 	bhi.w	8000910 <__udivmoddi4+0x2c0>
 800077a:	4643      	mov	r3, r8
 800077c:	1a09      	subs	r1, r1, r0
 800077e:	b2a4      	uxth	r4, r4
 8000780:	fbb1 f0f7 	udiv	r0, r1, r7
 8000784:	fb07 1110 	mls	r1, r7, r0, r1
 8000788:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800078c:	fb0e fe00 	mul.w	lr, lr, r0
 8000790:	45a6      	cmp	lr, r4
 8000792:	d908      	bls.n	80007a6 <__udivmoddi4+0x156>
 8000794:	eb1c 0404 	adds.w	r4, ip, r4
 8000798:	f100 31ff 	add.w	r1, r0, #4294967295
 800079c:	d202      	bcs.n	80007a4 <__udivmoddi4+0x154>
 800079e:	45a6      	cmp	lr, r4
 80007a0:	f200 80bb 	bhi.w	800091a <__udivmoddi4+0x2ca>
 80007a4:	4608      	mov	r0, r1
 80007a6:	eba4 040e 	sub.w	r4, r4, lr
 80007aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007ae:	e79c      	b.n	80006ea <__udivmoddi4+0x9a>
 80007b0:	f1c6 0720 	rsb	r7, r6, #32
 80007b4:	40b3      	lsls	r3, r6
 80007b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80007ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80007be:	fa20 f407 	lsr.w	r4, r0, r7
 80007c2:	fa01 f306 	lsl.w	r3, r1, r6
 80007c6:	431c      	orrs	r4, r3
 80007c8:	40f9      	lsrs	r1, r7
 80007ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007ce:	fa00 f306 	lsl.w	r3, r0, r6
 80007d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80007d6:	0c20      	lsrs	r0, r4, #16
 80007d8:	fa1f fe8c 	uxth.w	lr, ip
 80007dc:	fb09 1118 	mls	r1, r9, r8, r1
 80007e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007e4:	fb08 f00e 	mul.w	r0, r8, lr
 80007e8:	4288      	cmp	r0, r1
 80007ea:	fa02 f206 	lsl.w	r2, r2, r6
 80007ee:	d90b      	bls.n	8000808 <__udivmoddi4+0x1b8>
 80007f0:	eb1c 0101 	adds.w	r1, ip, r1
 80007f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80007f8:	f080 8088 	bcs.w	800090c <__udivmoddi4+0x2bc>
 80007fc:	4288      	cmp	r0, r1
 80007fe:	f240 8085 	bls.w	800090c <__udivmoddi4+0x2bc>
 8000802:	f1a8 0802 	sub.w	r8, r8, #2
 8000806:	4461      	add	r1, ip
 8000808:	1a09      	subs	r1, r1, r0
 800080a:	b2a4      	uxth	r4, r4
 800080c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000810:	fb09 1110 	mls	r1, r9, r0, r1
 8000814:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000818:	fb00 fe0e 	mul.w	lr, r0, lr
 800081c:	458e      	cmp	lr, r1
 800081e:	d908      	bls.n	8000832 <__udivmoddi4+0x1e2>
 8000820:	eb1c 0101 	adds.w	r1, ip, r1
 8000824:	f100 34ff 	add.w	r4, r0, #4294967295
 8000828:	d26c      	bcs.n	8000904 <__udivmoddi4+0x2b4>
 800082a:	458e      	cmp	lr, r1
 800082c:	d96a      	bls.n	8000904 <__udivmoddi4+0x2b4>
 800082e:	3802      	subs	r0, #2
 8000830:	4461      	add	r1, ip
 8000832:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000836:	fba0 9402 	umull	r9, r4, r0, r2
 800083a:	eba1 010e 	sub.w	r1, r1, lr
 800083e:	42a1      	cmp	r1, r4
 8000840:	46c8      	mov	r8, r9
 8000842:	46a6      	mov	lr, r4
 8000844:	d356      	bcc.n	80008f4 <__udivmoddi4+0x2a4>
 8000846:	d053      	beq.n	80008f0 <__udivmoddi4+0x2a0>
 8000848:	b15d      	cbz	r5, 8000862 <__udivmoddi4+0x212>
 800084a:	ebb3 0208 	subs.w	r2, r3, r8
 800084e:	eb61 010e 	sbc.w	r1, r1, lr
 8000852:	fa01 f707 	lsl.w	r7, r1, r7
 8000856:	fa22 f306 	lsr.w	r3, r2, r6
 800085a:	40f1      	lsrs	r1, r6
 800085c:	431f      	orrs	r7, r3
 800085e:	e9c5 7100 	strd	r7, r1, [r5]
 8000862:	2600      	movs	r6, #0
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	f1c2 0320 	rsb	r3, r2, #32
 800086e:	40d8      	lsrs	r0, r3
 8000870:	fa0c fc02 	lsl.w	ip, ip, r2
 8000874:	fa21 f303 	lsr.w	r3, r1, r3
 8000878:	4091      	lsls	r1, r2
 800087a:	4301      	orrs	r1, r0
 800087c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000880:	fa1f fe8c 	uxth.w	lr, ip
 8000884:	fbb3 f0f7 	udiv	r0, r3, r7
 8000888:	fb07 3610 	mls	r6, r7, r0, r3
 800088c:	0c0b      	lsrs	r3, r1, #16
 800088e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000892:	fb00 f60e 	mul.w	r6, r0, lr
 8000896:	429e      	cmp	r6, r3
 8000898:	fa04 f402 	lsl.w	r4, r4, r2
 800089c:	d908      	bls.n	80008b0 <__udivmoddi4+0x260>
 800089e:	eb1c 0303 	adds.w	r3, ip, r3
 80008a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80008a6:	d22f      	bcs.n	8000908 <__udivmoddi4+0x2b8>
 80008a8:	429e      	cmp	r6, r3
 80008aa:	d92d      	bls.n	8000908 <__udivmoddi4+0x2b8>
 80008ac:	3802      	subs	r0, #2
 80008ae:	4463      	add	r3, ip
 80008b0:	1b9b      	subs	r3, r3, r6
 80008b2:	b289      	uxth	r1, r1
 80008b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80008b8:	fb07 3316 	mls	r3, r7, r6, r3
 80008bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008c0:	fb06 f30e 	mul.w	r3, r6, lr
 80008c4:	428b      	cmp	r3, r1
 80008c6:	d908      	bls.n	80008da <__udivmoddi4+0x28a>
 80008c8:	eb1c 0101 	adds.w	r1, ip, r1
 80008cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80008d0:	d216      	bcs.n	8000900 <__udivmoddi4+0x2b0>
 80008d2:	428b      	cmp	r3, r1
 80008d4:	d914      	bls.n	8000900 <__udivmoddi4+0x2b0>
 80008d6:	3e02      	subs	r6, #2
 80008d8:	4461      	add	r1, ip
 80008da:	1ac9      	subs	r1, r1, r3
 80008dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008e0:	e738      	b.n	8000754 <__udivmoddi4+0x104>
 80008e2:	462e      	mov	r6, r5
 80008e4:	4628      	mov	r0, r5
 80008e6:	e705      	b.n	80006f4 <__udivmoddi4+0xa4>
 80008e8:	4606      	mov	r6, r0
 80008ea:	e6e3      	b.n	80006b4 <__udivmoddi4+0x64>
 80008ec:	4618      	mov	r0, r3
 80008ee:	e6f8      	b.n	80006e2 <__udivmoddi4+0x92>
 80008f0:	454b      	cmp	r3, r9
 80008f2:	d2a9      	bcs.n	8000848 <__udivmoddi4+0x1f8>
 80008f4:	ebb9 0802 	subs.w	r8, r9, r2
 80008f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008fc:	3801      	subs	r0, #1
 80008fe:	e7a3      	b.n	8000848 <__udivmoddi4+0x1f8>
 8000900:	4646      	mov	r6, r8
 8000902:	e7ea      	b.n	80008da <__udivmoddi4+0x28a>
 8000904:	4620      	mov	r0, r4
 8000906:	e794      	b.n	8000832 <__udivmoddi4+0x1e2>
 8000908:	4640      	mov	r0, r8
 800090a:	e7d1      	b.n	80008b0 <__udivmoddi4+0x260>
 800090c:	46d0      	mov	r8, sl
 800090e:	e77b      	b.n	8000808 <__udivmoddi4+0x1b8>
 8000910:	3b02      	subs	r3, #2
 8000912:	4461      	add	r1, ip
 8000914:	e732      	b.n	800077c <__udivmoddi4+0x12c>
 8000916:	4630      	mov	r0, r6
 8000918:	e709      	b.n	800072e <__udivmoddi4+0xde>
 800091a:	4464      	add	r4, ip
 800091c:	3802      	subs	r0, #2
 800091e:	e742      	b.n	80007a6 <__udivmoddi4+0x156>

08000920 <__aeabi_idiv0>:
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop

08000924 <cr>:
void TestAsmCall();
void Test();
/*---------------------------------------*/
/*---------Added by Wing------------------*/
void cr()
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
		printf( "\r\n");
 8000928:	4802      	ldr	r0, [pc, #8]	; (8000934 <cr+0x10>)
 800092a:	f002 fe51 	bl	80035d0 <puts>
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	080053dc 	.word	0x080053dc

08000938 <value>:
void value(int P1)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
		printf( "%d ", P1);
 8000940:	6879      	ldr	r1, [r7, #4]
 8000942:	4803      	ldr	r0, [pc, #12]	; (8000950 <value+0x18>)
 8000944:	f002 fdbe 	bl	80034c4 <iprintf>
}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	080053e0 	.word	0x080053e0

08000954 <value1>:
void value1(int P1)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
		printf( "0x\%X ", P1);
 800095c:	6879      	ldr	r1, [r7, #4]
 800095e:	4803      	ldr	r0, [pc, #12]	; (800096c <value1+0x18>)
 8000960:	f002 fdb0 	bl	80034c4 <iprintf>
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	080053e4 	.word	0x080053e4

08000970 <getstring>:
int number;
int getstring()
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
			int r;
repeat:			r = scanf("%d", &number );
 8000976:	490b      	ldr	r1, [pc, #44]	; (80009a4 <getstring+0x34>)
 8000978:	480b      	ldr	r0, [pc, #44]	; (80009a8 <getstring+0x38>)
 800097a:	f002 fe31 	bl	80035e0 <iscanf>
 800097e:	6078      	str	r0, [r7, #4]
/*******************************************
 * clears the buffer if a wrong input is given
*********************************************/
		if (r==0)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d108      	bne.n	8000998 <getstring+0x28>
		{	getchar();
 8000986:	f002 fd5f 	bl	8003448 <getchar>
			printf("\r\nNot a number entered, please enter valid number");
 800098a:	4808      	ldr	r0, [pc, #32]	; (80009ac <getstring+0x3c>)
 800098c:	f002 fd9a 	bl	80034c4 <iprintf>
			printf("\r\n");
 8000990:	4807      	ldr	r0, [pc, #28]	; (80009b0 <getstring+0x40>)
 8000992:	f002 fe1d 	bl	80035d0 <puts>
			goto repeat;
 8000996:	e7ee      	b.n	8000976 <getstring+0x6>
		}
			return number;
 8000998:	4b02      	ldr	r3, [pc, #8]	; (80009a4 <getstring+0x34>)
 800099a:	681b      	ldr	r3, [r3, #0]
}
 800099c:	4618      	mov	r0, r3
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000488 	.word	0x20000488
 80009a8:	080053ec 	.word	0x080053ec
 80009ac:	080053f0 	.word	0x080053f0
 80009b0:	080053dc 	.word	0x080053dc

080009b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b8:	f000 fb0b 	bl	8000fd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009bc:	f000 f816 	bl	80009ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c0:	f000 f8c6 	bl	8000b50 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009c4:	f000 f894 	bl	8000af0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
/*---------Added by Wing-------------------*/
RetargetInit(&huart2);
 80009c8:	4806      	ldr	r0, [pc, #24]	; (80009e4 <main+0x30>)
 80009ca:	f000 f913 	bl	8000bf4 <RetargetInit>
printf("\r\nECE212 Lab3 Test Program");
 80009ce:	4806      	ldr	r0, [pc, #24]	; (80009e8 <main+0x34>)
 80009d0:	f002 fd78 	bl	80034c4 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
/*---------Added by Wing-------------------*/
TestAsmCall();
 80009d4:	f7ff fbfc 	bl	80001d0 <TestAsmCall>
HAL_Delay(1000);
 80009d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009dc:	f000 fb6e 	bl	80010bc <HAL_Delay>
TestAsmCall();
 80009e0:	e7f8      	b.n	80009d4 <main+0x20>
 80009e2:	bf00      	nop
 80009e4:	2000048c 	.word	0x2000048c
 80009e8:	08005424 	.word	0x08005424

080009ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b0ac      	sub	sp, #176	; 0xb0
 80009f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009f6:	2244      	movs	r2, #68	; 0x44
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f002 fd5a 	bl	80034b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a00:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2254      	movs	r2, #84	; 0x54
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f002 fd4c 	bl	80034b4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a1c:	f000 fdda 	bl	80015d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000a20:	4b32      	ldr	r3, [pc, #200]	; (8000aec <SystemClock_Config+0x100>)
 8000a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a26:	4a31      	ldr	r2, [pc, #196]	; (8000aec <SystemClock_Config+0x100>)
 8000a28:	f023 0318 	bic.w	r3, r3, #24
 8000a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000a30:	2314      	movs	r3, #20
 8000a32:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a34:	2301      	movs	r3, #1
 8000a36:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a44:	2360      	movs	r3, #96	; 0x60
 8000a46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a50:	2301      	movs	r3, #1
 8000a52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a56:	2301      	movs	r3, #1
 8000a58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000a5c:	2310      	movs	r3, #16
 8000a5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a62:	2307      	movs	r3, #7
 8000a64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a74:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f000 fe1f 	bl	80016bc <HAL_RCC_OscConfig>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a84:	f000 f8ae 	bl	8000be4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a88:	230f      	movs	r3, #15
 8000a8a:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a90:	2300      	movs	r3, #0
 8000a92:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a94:	2300      	movs	r3, #0
 8000a96:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a9c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f001 fa1e 	bl	8001ee4 <HAL_RCC_ClockConfig>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000aae:	f000 f899 	bl	8000be4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	4618      	mov	r0, r3
 8000abe:	f001 fc35 	bl	800232c <HAL_RCCEx_PeriphCLKConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000ac8:	f000 f88c 	bl	8000be4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000acc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ad0:	f000 fd9e 	bl	8001610 <HAL_PWREx_ControlVoltageScaling>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000ada:	f000 f883 	bl	8000be4 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000ade:	f001 fe1b 	bl	8002718 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000ae2:	bf00      	nop
 8000ae4:	37b0      	adds	r7, #176	; 0xb0
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40021000 	.word	0x40021000

08000af0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_USART2_UART_Init+0x58>)
 8000af6:	4a15      	ldr	r2, [pc, #84]	; (8000b4c <MX_USART2_UART_Init+0x5c>)
 8000af8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <MX_USART2_UART_Init+0x58>)
 8000afc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_USART2_UART_Init+0x58>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_USART2_UART_Init+0x58>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_USART2_UART_Init+0x58>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_USART2_UART_Init+0x58>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <MX_USART2_UART_Init+0x58>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_USART2_UART_Init+0x58>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <MX_USART2_UART_Init+0x58>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_USART2_UART_Init+0x58>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_USART2_UART_Init+0x58>)
 8000b34:	f001 fef2 	bl	800291c <HAL_UART_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b3e:	f000 f851 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	2000048c 	.word	0x2000048c
 8000b4c:	40004400 	.word	0x40004400

08000b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b56:	f107 030c 	add.w	r3, r7, #12
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b66:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <MX_GPIO_Init+0x8c>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6a:	4a1c      	ldr	r2, [pc, #112]	; (8000bdc <MX_GPIO_Init+0x8c>)
 8000b6c:	f043 0304 	orr.w	r3, r3, #4
 8000b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b72:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <MX_GPIO_Init+0x8c>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	f003 0304 	and.w	r3, r3, #4
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <MX_GPIO_Init+0x8c>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b82:	4a16      	ldr	r2, [pc, #88]	; (8000bdc <MX_GPIO_Init+0x8c>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8a:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <MX_GPIO_Init+0x8c>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_GPIO_Init+0x8c>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	4a10      	ldr	r2, [pc, #64]	; (8000bdc <MX_GPIO_Init+0x8c>)
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <MX_GPIO_Init+0x8c>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2108      	movs	r1, #8
 8000bb2:	480b      	ldr	r0, [pc, #44]	; (8000be0 <MX_GPIO_Init+0x90>)
 8000bb4:	f000 fcf6 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000bb8:	2308      	movs	r3, #8
 8000bba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 030c 	add.w	r3, r7, #12
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4804      	ldr	r0, [pc, #16]	; (8000be0 <MX_GPIO_Init+0x90>)
 8000bd0:	f000 fb7e 	bl	80012d0 <HAL_GPIO_Init>

}
 8000bd4:	bf00      	nop
 8000bd6:	3720      	adds	r7, #32
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	48000400 	.word	0x48000400

08000be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000bfc:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <RetargetInit+0x28>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000c02:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <RetargetInit+0x2c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	6898      	ldr	r0, [r3, #8]
 8000c08:	2300      	movs	r3, #0
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	f002 fcff 	bl	8003610 <setvbuf>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000510 	.word	0x20000510
 8000c20:	20000408 	.word	0x20000408

08000c24 <_isatty>:

int _isatty(int fd) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	db04      	blt.n	8000c3c <_isatty+0x18>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	dc01      	bgt.n	8000c3c <_isatty+0x18>
    return 1;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e005      	b.n	8000c48 <_isatty+0x24>

  errno = EBADF;
 8000c3c:	f002 fbfe 	bl	800343c <__errno>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2209      	movs	r2, #9
 8000c44:	601a      	str	r2, [r3, #0]
  return 0;
 8000c46:	2300      	movs	r3, #0
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <_write>:

int _write(int fd, char* ptr, int len) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d002      	beq.n	8000c68 <_write+0x18>
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	d111      	bne.n	8000c8c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000c68:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <_write+0x54>)
 8000c6a:	6818      	ldr	r0, [r3, #0]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	f04f 33ff 	mov.w	r3, #4294967295
 8000c74:	68b9      	ldr	r1, [r7, #8]
 8000c76:	f001 fe9f 	bl	80029b8 <HAL_UART_Transmit>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000c7e:	7dfb      	ldrb	r3, [r7, #23]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d101      	bne.n	8000c88 <_write+0x38>
      return len;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	e008      	b.n	8000c9a <_write+0x4a>
    else
      return EIO;
 8000c88:	2305      	movs	r3, #5
 8000c8a:	e006      	b.n	8000c9a <_write+0x4a>
  }
  errno = EBADF;
 8000c8c:	f002 fbd6 	bl	800343c <__errno>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2209      	movs	r2, #9
 8000c94:	601a      	str	r2, [r3, #0]
  return -1;
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000510 	.word	0x20000510

08000ca8 <_close>:

int _close(int fd) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	db04      	blt.n	8000cc0 <_close+0x18>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	dc01      	bgt.n	8000cc0 <_close+0x18>
    return 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	e006      	b.n	8000cce <_close+0x26>

  errno = EBADF;
 8000cc0:	f002 fbbc 	bl	800343c <__errno>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2209      	movs	r2, #9
 8000cc8:	601a      	str	r2, [r3, #0]
  return -1;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b084      	sub	sp, #16
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	60f8      	str	r0, [r7, #12]
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000ce2:	f002 fbab 	bl	800343c <__errno>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2209      	movs	r2, #9
 8000cea:	601a      	str	r2, [r3, #0]
  return -1;
 8000cec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <_read>:

int _read(int fd, char* ptr, int len) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d110      	bne.n	8000d2c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <_read+0x4c>)
 8000d0c:	6818      	ldr	r0, [r3, #0]
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	2201      	movs	r2, #1
 8000d14:	68b9      	ldr	r1, [r7, #8]
 8000d16:	f001 fee3 	bl	8002ae0 <HAL_UART_Receive>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000d1e:	7dfb      	ldrb	r3, [r7, #23]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d101      	bne.n	8000d28 <_read+0x30>
      return 1;
 8000d24:	2301      	movs	r3, #1
 8000d26:	e008      	b.n	8000d3a <_read+0x42>
    else
      return EIO;
 8000d28:	2305      	movs	r3, #5
 8000d2a:	e006      	b.n	8000d3a <_read+0x42>
  }
  errno = EBADF;
 8000d2c:	f002 fb86 	bl	800343c <__errno>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2209      	movs	r2, #9
 8000d34:	601a      	str	r2, [r3, #0]
  return -1;
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000510 	.word	0x20000510

08000d48 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	db08      	blt.n	8000d6a <_fstat+0x22>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	dc05      	bgt.n	8000d6a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d64:	605a      	str	r2, [r3, #4]
    return 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	e005      	b.n	8000d76 <_fstat+0x2e>
  }

  errno = EBADF;
 8000d6a:	f002 fb67 	bl	800343c <__errno>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2209      	movs	r2, #9
 8000d72:	601a      	str	r2, [r3, #0]
  return 0;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8a:	4a0e      	ldr	r2, [pc, #56]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6613      	str	r3, [r2, #96]	; 0x60
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_MspInit+0x44>)
 8000da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da2:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <HAL_MspInit+0x44>)
 8000da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da8:	6593      	str	r3, [r2, #88]	; 0x58
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_MspInit+0x44>)
 8000dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b09e      	sub	sp, #120	; 0x78
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	2254      	movs	r2, #84	; 0x54
 8000de6:	2100      	movs	r1, #0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f002 fb63 	bl	80034b4 <memset>
  if(huart->Instance==USART2)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a28      	ldr	r2, [pc, #160]	; (8000e94 <HAL_UART_MspInit+0xcc>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d148      	bne.n	8000e8a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	4618      	mov	r0, r3
 8000e06:	f001 fa91 	bl	800232c <HAL_RCCEx_PeriphCLKConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e10:	f7ff fee8 	bl	8000be4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e14:	4b20      	ldr	r3, [pc, #128]	; (8000e98 <HAL_UART_MspInit+0xd0>)
 8000e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e18:	4a1f      	ldr	r2, [pc, #124]	; (8000e98 <HAL_UART_MspInit+0xd0>)
 8000e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1e:	6593      	str	r3, [r2, #88]	; 0x58
 8000e20:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <HAL_UART_MspInit+0xd0>)
 8000e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <HAL_UART_MspInit+0xd0>)
 8000e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e30:	4a19      	ldr	r2, [pc, #100]	; (8000e98 <HAL_UART_MspInit+0xd0>)
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e38:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <HAL_UART_MspInit+0xd0>)
 8000e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000e44:	2304      	movs	r3, #4
 8000e46:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e54:	2307      	movs	r3, #7
 8000e56:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000e58:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e62:	f000 fa35 	bl	80012d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000e66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e6a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e74:	2303      	movs	r3, #3
 8000e76:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e80:	4619      	mov	r1, r3
 8000e82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e86:	f000 fa23 	bl	80012d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e8a:	bf00      	nop
 8000e8c:	3778      	adds	r7, #120	; 0x78
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40004400 	.word	0x40004400
 8000e98:	40021000 	.word	0x40021000

08000e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <NMI_Handler+0x4>

08000ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <HardFault_Handler+0x4>

08000ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <MemManage_Handler+0x4>

08000eae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <BusFault_Handler+0x4>

08000eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <UsageFault_Handler+0x4>

08000eba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee8:	f000 f8c8 	bl	800107c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef8:	4a14      	ldr	r2, [pc, #80]	; (8000f4c <_sbrk+0x5c>)
 8000efa:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <_sbrk+0x60>)
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f04:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <_sbrk+0x64>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d102      	bne.n	8000f12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <_sbrk+0x64>)
 8000f0e:	4a12      	ldr	r2, [pc, #72]	; (8000f58 <_sbrk+0x68>)
 8000f10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <_sbrk+0x64>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d207      	bcs.n	8000f30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f20:	f002 fa8c 	bl	800343c <__errno>
 8000f24:	4603      	mov	r3, r0
 8000f26:	220c      	movs	r2, #12
 8000f28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2e:	e009      	b.n	8000f44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <_sbrk+0x64>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f36:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <_sbrk+0x64>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	4a05      	ldr	r2, [pc, #20]	; (8000f54 <_sbrk+0x64>)
 8000f40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f42:	68fb      	ldr	r3, [r7, #12]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3718      	adds	r7, #24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20010000 	.word	0x20010000
 8000f50:	00000400 	.word	0x00000400
 8000f54:	20000514 	.word	0x20000514
 8000f58:	20000530 	.word	0x20000530

08000f5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <SystemInit+0x20>)
 8000f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f66:	4a05      	ldr	r2, [pc, #20]	; (8000f7c <SystemInit+0x20>)
 8000f68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f84:	f7ff ffea 	bl	8000f5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f88:	480c      	ldr	r0, [pc, #48]	; (8000fbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000f8a:	490d      	ldr	r1, [pc, #52]	; (8000fc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f8c:	4a0d      	ldr	r2, [pc, #52]	; (8000fc4 <LoopForever+0xe>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f90:	e002      	b.n	8000f98 <LoopCopyDataInit>

08000f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f96:	3304      	adds	r3, #4

08000f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f9c:	d3f9      	bcc.n	8000f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fa0:	4c0a      	ldr	r4, [pc, #40]	; (8000fcc <LoopForever+0x16>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa4:	e001      	b.n	8000faa <LoopFillZerobss>

08000fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa8:	3204      	adds	r2, #4

08000faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fac:	d3fb      	bcc.n	8000fa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fae:	f002 fa5d 	bl	800346c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fb2:	f7ff fcff 	bl	80009b4 <main>

08000fb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fb6:	e7fe      	b.n	8000fb6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fb8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc0:	2000046c 	.word	0x2000046c
  ldr r2, =_sidata
 8000fc4:	08005658 	.word	0x08005658
  ldr r2, =_sbss
 8000fc8:	2000046c 	.word	0x2000046c
  ldr r4, =_ebss
 8000fcc:	2000052c 	.word	0x2000052c

08000fd0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fd0:	e7fe      	b.n	8000fd0 <ADC1_IRQHandler>

08000fd2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fdc:	2003      	movs	r0, #3
 8000fde:	f000 f943 	bl	8001268 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f000 f80e 	bl	8001004 <HAL_InitTick>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d002      	beq.n	8000ff4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	71fb      	strb	r3, [r7, #7]
 8000ff2:	e001      	b.n	8000ff8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ff4:	f7ff fec4 	bl	8000d80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800100c:	2300      	movs	r3, #0
 800100e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001010:	4b17      	ldr	r3, [pc, #92]	; (8001070 <HAL_InitTick+0x6c>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d023      	beq.n	8001060 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001018:	4b16      	ldr	r3, [pc, #88]	; (8001074 <HAL_InitTick+0x70>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <HAL_InitTick+0x6c>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001026:	fbb3 f3f1 	udiv	r3, r3, r1
 800102a:	fbb2 f3f3 	udiv	r3, r2, r3
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f941 	bl	80012b6 <HAL_SYSTICK_Config>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d10f      	bne.n	800105a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b0f      	cmp	r3, #15
 800103e:	d809      	bhi.n	8001054 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001040:	2200      	movs	r2, #0
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f000 f919 	bl	800127e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800104c:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <HAL_InitTick+0x74>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	e007      	b.n	8001064 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	73fb      	strb	r3, [r7, #15]
 8001058:	e004      	b.n	8001064 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	73fb      	strb	r3, [r7, #15]
 800105e:	e001      	b.n	8001064 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001064:	7bfb      	ldrb	r3, [r7, #15]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000404 	.word	0x20000404
 8001074:	200003fc 	.word	0x200003fc
 8001078:	20000400 	.word	0x20000400

0800107c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_IncTick+0x20>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_IncTick+0x24>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4413      	add	r3, r2
 800108c:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <HAL_IncTick+0x24>)
 800108e:	6013      	str	r3, [r2, #0]
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000404 	.word	0x20000404
 80010a0:	20000518 	.word	0x20000518

080010a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return uwTick;
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <HAL_GetTick+0x14>)
 80010aa:	681b      	ldr	r3, [r3, #0]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000518 	.word	0x20000518

080010bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c4:	f7ff ffee 	bl	80010a4 <HAL_GetTick>
 80010c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d4:	d005      	beq.n	80010e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <HAL_Delay+0x44>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4413      	add	r3, r2
 80010e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010e2:	bf00      	nop
 80010e4:	f7ff ffde 	bl	80010a4 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d8f7      	bhi.n	80010e4 <HAL_Delay+0x28>
  {
  }
}
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000404 	.word	0x20000404

08001104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <__NVIC_SetPriorityGrouping+0x44>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001120:	4013      	ands	r3, r2
 8001122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800112c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001136:	4a04      	ldr	r2, [pc, #16]	; (8001148 <__NVIC_SetPriorityGrouping+0x44>)
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	60d3      	str	r3, [r2, #12]
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <__NVIC_GetPriorityGrouping+0x18>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	0a1b      	lsrs	r3, r3, #8
 8001156:	f003 0307 	and.w	r3, r3, #7
}
 800115a:	4618      	mov	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001178:	2b00      	cmp	r3, #0
 800117a:	db0a      	blt.n	8001192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	b2da      	uxtb	r2, r3
 8001180:	490c      	ldr	r1, [pc, #48]	; (80011b4 <__NVIC_SetPriority+0x4c>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	0112      	lsls	r2, r2, #4
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	440b      	add	r3, r1
 800118c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001190:	e00a      	b.n	80011a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4908      	ldr	r1, [pc, #32]	; (80011b8 <__NVIC_SetPriority+0x50>)
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	3b04      	subs	r3, #4
 80011a0:	0112      	lsls	r2, r2, #4
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	440b      	add	r3, r1
 80011a6:	761a      	strb	r2, [r3, #24]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000e100 	.word	0xe000e100
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f1c3 0307 	rsb	r3, r3, #7
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	bf28      	it	cs
 80011da:	2304      	movcs	r3, #4
 80011dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3304      	adds	r3, #4
 80011e2:	2b06      	cmp	r3, #6
 80011e4:	d902      	bls.n	80011ec <NVIC_EncodePriority+0x30>
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3b03      	subs	r3, #3
 80011ea:	e000      	b.n	80011ee <NVIC_EncodePriority+0x32>
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	f04f 32ff 	mov.w	r2, #4294967295
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43da      	mvns	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	401a      	ands	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001204:	f04f 31ff 	mov.w	r1, #4294967295
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	43d9      	mvns	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	4313      	orrs	r3, r2
         );
}
 8001216:	4618      	mov	r0, r3
 8001218:	3724      	adds	r7, #36	; 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001234:	d301      	bcc.n	800123a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001236:	2301      	movs	r3, #1
 8001238:	e00f      	b.n	800125a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123a:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <SysTick_Config+0x40>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001242:	210f      	movs	r1, #15
 8001244:	f04f 30ff 	mov.w	r0, #4294967295
 8001248:	f7ff ff8e 	bl	8001168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <SysTick_Config+0x40>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001252:	4b04      	ldr	r3, [pc, #16]	; (8001264 <SysTick_Config+0x40>)
 8001254:	2207      	movs	r2, #7
 8001256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	e000e010 	.word	0xe000e010

08001268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ff47 	bl	8001104 <__NVIC_SetPriorityGrouping>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b086      	sub	sp, #24
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
 800128a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001290:	f7ff ff5c 	bl	800114c <__NVIC_GetPriorityGrouping>
 8001294:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	68b9      	ldr	r1, [r7, #8]
 800129a:	6978      	ldr	r0, [r7, #20]
 800129c:	f7ff ff8e 	bl	80011bc <NVIC_EncodePriority>
 80012a0:	4602      	mov	r2, r0
 80012a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff5d 	bl	8001168 <__NVIC_SetPriority>
}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ffb0 	bl	8001224 <SysTick_Config>
 80012c4:	4603      	mov	r3, r0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b087      	sub	sp, #28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012de:	e148      	b.n	8001572 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	2101      	movs	r1, #1
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ec:	4013      	ands	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f000 813a 	beq.w	800156c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	2b01      	cmp	r3, #1
 8001302:	d005      	beq.n	8001310 <HAL_GPIO_Init+0x40>
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d130      	bne.n	8001372 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	2203      	movs	r2, #3
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	68da      	ldr	r2, [r3, #12]
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001346:	2201      	movs	r2, #1
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	091b      	lsrs	r3, r3, #4
 800135c:	f003 0201 	and.w	r2, r3, #1
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 0303 	and.w	r3, r3, #3
 800137a:	2b03      	cmp	r3, #3
 800137c:	d017      	beq.n	80013ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	2203      	movs	r2, #3
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4013      	ands	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	689a      	ldr	r2, [r3, #8]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d123      	bne.n	8001402 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	08da      	lsrs	r2, r3, #3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3208      	adds	r2, #8
 80013c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	220f      	movs	r2, #15
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43db      	mvns	r3, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	691a      	ldr	r2, [r3, #16]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	08da      	lsrs	r2, r3, #3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3208      	adds	r2, #8
 80013fc:	6939      	ldr	r1, [r7, #16]
 80013fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	2203      	movs	r2, #3
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	4013      	ands	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 0203 	and.w	r2, r3, #3
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 8094 	beq.w	800156c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001444:	4b52      	ldr	r3, [pc, #328]	; (8001590 <HAL_GPIO_Init+0x2c0>)
 8001446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001448:	4a51      	ldr	r2, [pc, #324]	; (8001590 <HAL_GPIO_Init+0x2c0>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6613      	str	r3, [r2, #96]	; 0x60
 8001450:	4b4f      	ldr	r3, [pc, #316]	; (8001590 <HAL_GPIO_Init+0x2c0>)
 8001452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800145c:	4a4d      	ldr	r2, [pc, #308]	; (8001594 <HAL_GPIO_Init+0x2c4>)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	089b      	lsrs	r3, r3, #2
 8001462:	3302      	adds	r3, #2
 8001464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001468:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	f003 0303 	and.w	r3, r3, #3
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	220f      	movs	r2, #15
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001486:	d00d      	beq.n	80014a4 <HAL_GPIO_Init+0x1d4>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a43      	ldr	r2, [pc, #268]	; (8001598 <HAL_GPIO_Init+0x2c8>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d007      	beq.n	80014a0 <HAL_GPIO_Init+0x1d0>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a42      	ldr	r2, [pc, #264]	; (800159c <HAL_GPIO_Init+0x2cc>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d101      	bne.n	800149c <HAL_GPIO_Init+0x1cc>
 8001498:	2302      	movs	r3, #2
 800149a:	e004      	b.n	80014a6 <HAL_GPIO_Init+0x1d6>
 800149c:	2307      	movs	r3, #7
 800149e:	e002      	b.n	80014a6 <HAL_GPIO_Init+0x1d6>
 80014a0:	2301      	movs	r3, #1
 80014a2:	e000      	b.n	80014a6 <HAL_GPIO_Init+0x1d6>
 80014a4:	2300      	movs	r3, #0
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	f002 0203 	and.w	r2, r2, #3
 80014ac:	0092      	lsls	r2, r2, #2
 80014ae:	4093      	lsls	r3, r2
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014b6:	4937      	ldr	r1, [pc, #220]	; (8001594 <HAL_GPIO_Init+0x2c4>)
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	089b      	lsrs	r3, r3, #2
 80014bc:	3302      	adds	r3, #2
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014c4:	4b36      	ldr	r3, [pc, #216]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4013      	ands	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014e8:	4a2d      	ldr	r2, [pc, #180]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014ee:	4b2c      	ldr	r3, [pc, #176]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	43db      	mvns	r3, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4313      	orrs	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001512:	4a23      	ldr	r2, [pc, #140]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001518:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	43db      	mvns	r3, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800153c:	4a18      	ldr	r2, [pc, #96]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	43db      	mvns	r3, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001566:	4a0e      	ldr	r2, [pc, #56]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	3301      	adds	r3, #1
 8001570:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	fa22 f303 	lsr.w	r3, r2, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	f47f aeaf 	bne.w	80012e0 <HAL_GPIO_Init+0x10>
  }
}
 8001582:	bf00      	nop
 8001584:	bf00      	nop
 8001586:	371c      	adds	r7, #28
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	40021000 	.word	0x40021000
 8001594:	40010000 	.word	0x40010000
 8001598:	48000400 	.word	0x48000400
 800159c:	48000800 	.word	0x48000800
 80015a0:	40010400 	.word	0x40010400

080015a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	807b      	strh	r3, [r7, #2]
 80015b0:	4613      	mov	r3, r2
 80015b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015b4:	787b      	ldrb	r3, [r7, #1]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015ba:	887a      	ldrh	r2, [r7, #2]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015c0:	e002      	b.n	80015c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015c2:	887a      	ldrh	r2, [r7, #2]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a04      	ldr	r2, [pc, #16]	; (80015f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80015de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e2:	6013      	str	r3, [r2, #0]
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40007000 	.word	0x40007000

080015f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015f8:	4b04      	ldr	r3, [pc, #16]	; (800160c <HAL_PWREx_GetVoltageRange+0x18>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001600:	4618      	mov	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40007000 	.word	0x40007000

08001610 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800161e:	d130      	bne.n	8001682 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001620:	4b23      	ldr	r3, [pc, #140]	; (80016b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800162c:	d038      	beq.n	80016a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800162e:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001636:	4a1e      	ldr	r2, [pc, #120]	; (80016b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001638:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800163c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800163e:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2232      	movs	r2, #50	; 0x32
 8001644:	fb02 f303 	mul.w	r3, r2, r3
 8001648:	4a1b      	ldr	r2, [pc, #108]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800164a:	fba2 2303 	umull	r2, r3, r2, r3
 800164e:	0c9b      	lsrs	r3, r3, #18
 8001650:	3301      	adds	r3, #1
 8001652:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001654:	e002      	b.n	800165c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	3b01      	subs	r3, #1
 800165a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001668:	d102      	bne.n	8001670 <HAL_PWREx_ControlVoltageScaling+0x60>
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1f2      	bne.n	8001656 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800167c:	d110      	bne.n	80016a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e00f      	b.n	80016a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800168a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800168e:	d007      	beq.n	80016a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001698:	4a05      	ldr	r2, [pc, #20]	; (80016b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800169a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800169e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	40007000 	.word	0x40007000
 80016b4:	200003fc 	.word	0x200003fc
 80016b8:	431bde83 	.word	0x431bde83

080016bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b088      	sub	sp, #32
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d102      	bne.n	80016d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	f000 bc02 	b.w	8001ed4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016d0:	4b96      	ldr	r3, [pc, #600]	; (800192c <HAL_RCC_OscConfig+0x270>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f003 030c 	and.w	r3, r3, #12
 80016d8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016da:	4b94      	ldr	r3, [pc, #592]	; (800192c <HAL_RCC_OscConfig+0x270>)
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	f003 0303 	and.w	r3, r3, #3
 80016e2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0310 	and.w	r3, r3, #16
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 80e4 	beq.w	80018ba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d007      	beq.n	8001708 <HAL_RCC_OscConfig+0x4c>
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	2b0c      	cmp	r3, #12
 80016fc:	f040 808b 	bne.w	8001816 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	2b01      	cmp	r3, #1
 8001704:	f040 8087 	bne.w	8001816 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001708:	4b88      	ldr	r3, [pc, #544]	; (800192c <HAL_RCC_OscConfig+0x270>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_RCC_OscConfig+0x64>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e3d9      	b.n	8001ed4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a1a      	ldr	r2, [r3, #32]
 8001724:	4b81      	ldr	r3, [pc, #516]	; (800192c <HAL_RCC_OscConfig+0x270>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	2b00      	cmp	r3, #0
 800172e:	d004      	beq.n	800173a <HAL_RCC_OscConfig+0x7e>
 8001730:	4b7e      	ldr	r3, [pc, #504]	; (800192c <HAL_RCC_OscConfig+0x270>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001738:	e005      	b.n	8001746 <HAL_RCC_OscConfig+0x8a>
 800173a:	4b7c      	ldr	r3, [pc, #496]	; (800192c <HAL_RCC_OscConfig+0x270>)
 800173c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001740:	091b      	lsrs	r3, r3, #4
 8001742:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001746:	4293      	cmp	r3, r2
 8001748:	d223      	bcs.n	8001792 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	4618      	mov	r0, r3
 8001750:	f000 fd8c 	bl	800226c <RCC_SetFlashLatencyFromMSIRange>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e3ba      	b.n	8001ed4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800175e:	4b73      	ldr	r3, [pc, #460]	; (800192c <HAL_RCC_OscConfig+0x270>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a72      	ldr	r2, [pc, #456]	; (800192c <HAL_RCC_OscConfig+0x270>)
 8001764:	f043 0308 	orr.w	r3, r3, #8
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	4b70      	ldr	r3, [pc, #448]	; (800192c <HAL_RCC_OscConfig+0x270>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a1b      	ldr	r3, [r3, #32]
 8001776:	496d      	ldr	r1, [pc, #436]	; (800192c <HAL_RCC_OscConfig+0x270>)
 8001778:	4313      	orrs	r3, r2
 800177a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800177c:	4b6b      	ldr	r3, [pc, #428]	; (800192c <HAL_RCC_OscConfig+0x270>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69db      	ldr	r3, [r3, #28]
 8001788:	021b      	lsls	r3, r3, #8
 800178a:	4968      	ldr	r1, [pc, #416]	; (800192c <HAL_RCC_OscConfig+0x270>)
 800178c:	4313      	orrs	r3, r2
 800178e:	604b      	str	r3, [r1, #4]
 8001790:	e025      	b.n	80017de <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001792:	4b66      	ldr	r3, [pc, #408]	; (800192c <HAL_RCC_OscConfig+0x270>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a65      	ldr	r2, [pc, #404]	; (800192c <HAL_RCC_OscConfig+0x270>)
 8001798:	f043 0308 	orr.w	r3, r3, #8
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	4b63      	ldr	r3, [pc, #396]	; (800192c <HAL_RCC_OscConfig+0x270>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	4960      	ldr	r1, [pc, #384]	; (800192c <HAL_RCC_OscConfig+0x270>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017b0:	4b5e      	ldr	r3, [pc, #376]	; (800192c <HAL_RCC_OscConfig+0x270>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69db      	ldr	r3, [r3, #28]
 80017bc:	021b      	lsls	r3, r3, #8
 80017be:	495b      	ldr	r1, [pc, #364]	; (800192c <HAL_RCC_OscConfig+0x270>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d109      	bne.n	80017de <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 fd4c 	bl	800226c <RCC_SetFlashLatencyFromMSIRange>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e37a      	b.n	8001ed4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017de:	f000 fc81 	bl	80020e4 <HAL_RCC_GetSysClockFreq>
 80017e2:	4602      	mov	r2, r0
 80017e4:	4b51      	ldr	r3, [pc, #324]	; (800192c <HAL_RCC_OscConfig+0x270>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	091b      	lsrs	r3, r3, #4
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	4950      	ldr	r1, [pc, #320]	; (8001930 <HAL_RCC_OscConfig+0x274>)
 80017f0:	5ccb      	ldrb	r3, [r1, r3]
 80017f2:	f003 031f 	and.w	r3, r3, #31
 80017f6:	fa22 f303 	lsr.w	r3, r2, r3
 80017fa:	4a4e      	ldr	r2, [pc, #312]	; (8001934 <HAL_RCC_OscConfig+0x278>)
 80017fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017fe:	4b4e      	ldr	r3, [pc, #312]	; (8001938 <HAL_RCC_OscConfig+0x27c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fbfe 	bl	8001004 <HAL_InitTick>
 8001808:	4603      	mov	r3, r0
 800180a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800180c:	7bfb      	ldrb	r3, [r7, #15]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d052      	beq.n	80018b8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	e35e      	b.n	8001ed4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d032      	beq.n	8001884 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800181e:	4b43      	ldr	r3, [pc, #268]	; (800192c <HAL_RCC_OscConfig+0x270>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a42      	ldr	r2, [pc, #264]	; (800192c <HAL_RCC_OscConfig+0x270>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800182a:	f7ff fc3b 	bl	80010a4 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001832:	f7ff fc37 	bl	80010a4 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e347      	b.n	8001ed4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001844:	4b39      	ldr	r3, [pc, #228]	; (800192c <HAL_RCC_OscConfig+0x270>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f0      	beq.n	8001832 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001850:	4b36      	ldr	r3, [pc, #216]	; (800192c <HAL_RCC_OscConfig+0x270>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a35      	ldr	r2, [pc, #212]	; (800192c <HAL_RCC_OscConfig+0x270>)
 8001856:	f043 0308 	orr.w	r3, r3, #8
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	4b33      	ldr	r3, [pc, #204]	; (800192c <HAL_RCC_OscConfig+0x270>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	4930      	ldr	r1, [pc, #192]	; (800192c <HAL_RCC_OscConfig+0x270>)
 800186a:	4313      	orrs	r3, r2
 800186c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800186e:	4b2f      	ldr	r3, [pc, #188]	; (800192c <HAL_RCC_OscConfig+0x270>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	021b      	lsls	r3, r3, #8
 800187c:	492b      	ldr	r1, [pc, #172]	; (800192c <HAL_RCC_OscConfig+0x270>)
 800187e:	4313      	orrs	r3, r2
 8001880:	604b      	str	r3, [r1, #4]
 8001882:	e01a      	b.n	80018ba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001884:	4b29      	ldr	r3, [pc, #164]	; (800192c <HAL_RCC_OscConfig+0x270>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a28      	ldr	r2, [pc, #160]	; (800192c <HAL_RCC_OscConfig+0x270>)
 800188a:	f023 0301 	bic.w	r3, r3, #1
 800188e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001890:	f7ff fc08 	bl	80010a4 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001898:	f7ff fc04 	bl	80010a4 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e314      	b.n	8001ed4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018aa:	4b20      	ldr	r3, [pc, #128]	; (800192c <HAL_RCC_OscConfig+0x270>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_OscConfig+0x1dc>
 80018b6:	e000      	b.n	80018ba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d073      	beq.n	80019ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	d005      	beq.n	80018d8 <HAL_RCC_OscConfig+0x21c>
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	2b0c      	cmp	r3, #12
 80018d0:	d10e      	bne.n	80018f0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	d10b      	bne.n	80018f0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d8:	4b14      	ldr	r3, [pc, #80]	; (800192c <HAL_RCC_OscConfig+0x270>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d063      	beq.n	80019ac <HAL_RCC_OscConfig+0x2f0>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d15f      	bne.n	80019ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e2f1      	b.n	8001ed4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f8:	d106      	bne.n	8001908 <HAL_RCC_OscConfig+0x24c>
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <HAL_RCC_OscConfig+0x270>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a0b      	ldr	r2, [pc, #44]	; (800192c <HAL_RCC_OscConfig+0x270>)
 8001900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	e025      	b.n	8001954 <HAL_RCC_OscConfig+0x298>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001910:	d114      	bne.n	800193c <HAL_RCC_OscConfig+0x280>
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_RCC_OscConfig+0x270>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a05      	ldr	r2, [pc, #20]	; (800192c <HAL_RCC_OscConfig+0x270>)
 8001918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	4b03      	ldr	r3, [pc, #12]	; (800192c <HAL_RCC_OscConfig+0x270>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a02      	ldr	r2, [pc, #8]	; (800192c <HAL_RCC_OscConfig+0x270>)
 8001924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	e013      	b.n	8001954 <HAL_RCC_OscConfig+0x298>
 800192c:	40021000 	.word	0x40021000
 8001930:	0800544c 	.word	0x0800544c
 8001934:	200003fc 	.word	0x200003fc
 8001938:	20000400 	.word	0x20000400
 800193c:	4ba0      	ldr	r3, [pc, #640]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a9f      	ldr	r2, [pc, #636]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	4b9d      	ldr	r3, [pc, #628]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a9c      	ldr	r2, [pc, #624]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 800194e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001952:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d013      	beq.n	8001984 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195c:	f7ff fba2 	bl	80010a4 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001964:	f7ff fb9e 	bl	80010a4 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b64      	cmp	r3, #100	; 0x64
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e2ae      	b.n	8001ed4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001976:	4b92      	ldr	r3, [pc, #584]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0f0      	beq.n	8001964 <HAL_RCC_OscConfig+0x2a8>
 8001982:	e014      	b.n	80019ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7ff fb8e 	bl	80010a4 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800198c:	f7ff fb8a 	bl	80010a4 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b64      	cmp	r3, #100	; 0x64
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e29a      	b.n	8001ed4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800199e:	4b88      	ldr	r3, [pc, #544]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x2d0>
 80019aa:	e000      	b.n	80019ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d060      	beq.n	8001a7c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d005      	beq.n	80019cc <HAL_RCC_OscConfig+0x310>
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	2b0c      	cmp	r3, #12
 80019c4:	d119      	bne.n	80019fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d116      	bne.n	80019fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019cc:	4b7c      	ldr	r3, [pc, #496]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d005      	beq.n	80019e4 <HAL_RCC_OscConfig+0x328>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e277      	b.n	8001ed4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e4:	4b76      	ldr	r3, [pc, #472]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	061b      	lsls	r3, r3, #24
 80019f2:	4973      	ldr	r1, [pc, #460]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019f8:	e040      	b.n	8001a7c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d023      	beq.n	8001a4a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a02:	4b6f      	ldr	r3, [pc, #444]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a6e      	ldr	r2, [pc, #440]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0e:	f7ff fb49 	bl	80010a4 <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a16:	f7ff fb45 	bl	80010a4 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e255      	b.n	8001ed4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a28:	4b65      	ldr	r3, [pc, #404]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0f0      	beq.n	8001a16 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a34:	4b62      	ldr	r3, [pc, #392]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	061b      	lsls	r3, r3, #24
 8001a42:	495f      	ldr	r1, [pc, #380]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	604b      	str	r3, [r1, #4]
 8001a48:	e018      	b.n	8001a7c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a4a:	4b5d      	ldr	r3, [pc, #372]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a5c      	ldr	r2, [pc, #368]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a56:	f7ff fb25 	bl	80010a4 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a5e:	f7ff fb21 	bl	80010a4 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e231      	b.n	8001ed4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a70:	4b53      	ldr	r3, [pc, #332]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1f0      	bne.n	8001a5e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0308 	and.w	r3, r3, #8
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d03c      	beq.n	8001b02 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d01c      	beq.n	8001aca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a90:	4b4b      	ldr	r3, [pc, #300]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a96:	4a4a      	ldr	r2, [pc, #296]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa0:	f7ff fb00 	bl	80010a4 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa8:	f7ff fafc 	bl	80010a4 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e20c      	b.n	8001ed4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aba:	4b41      	ldr	r3, [pc, #260]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0ef      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x3ec>
 8001ac8:	e01b      	b.n	8001b02 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aca:	4b3d      	ldr	r3, [pc, #244]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad0:	4a3b      	ldr	r2, [pc, #236]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001ad2:	f023 0301 	bic.w	r3, r3, #1
 8001ad6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ada:	f7ff fae3 	bl	80010a4 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae2:	f7ff fadf 	bl	80010a4 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e1ef      	b.n	8001ed4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001af4:	4b32      	ldr	r3, [pc, #200]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1ef      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 80a6 	beq.w	8001c5c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b10:	2300      	movs	r3, #0
 8001b12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b14:	4b2a      	ldr	r3, [pc, #168]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10d      	bne.n	8001b3c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b20:	4b27      	ldr	r3, [pc, #156]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b24:	4a26      	ldr	r2, [pc, #152]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b2c:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b3c:	4b21      	ldr	r3, [pc, #132]	; (8001bc4 <HAL_RCC_OscConfig+0x508>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d118      	bne.n	8001b7a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b48:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <HAL_RCC_OscConfig+0x508>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a1d      	ldr	r2, [pc, #116]	; (8001bc4 <HAL_RCC_OscConfig+0x508>)
 8001b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b54:	f7ff faa6 	bl	80010a4 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b5c:	f7ff faa2 	bl	80010a4 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e1b2      	b.n	8001ed4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b6e:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <HAL_RCC_OscConfig+0x508>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d108      	bne.n	8001b94 <HAL_RCC_OscConfig+0x4d8>
 8001b82:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b88:	4a0d      	ldr	r2, [pc, #52]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b92:	e029      	b.n	8001be8 <HAL_RCC_OscConfig+0x52c>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	2b05      	cmp	r3, #5
 8001b9a:	d115      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x50c>
 8001b9c:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba2:	4a07      	ldr	r2, [pc, #28]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001ba4:	f043 0304 	orr.w	r3, r3, #4
 8001ba8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bac:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb2:	4a03      	ldr	r2, [pc, #12]	; (8001bc0 <HAL_RCC_OscConfig+0x504>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bbc:	e014      	b.n	8001be8 <HAL_RCC_OscConfig+0x52c>
 8001bbe:	bf00      	nop
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40007000 	.word	0x40007000
 8001bc8:	4b9a      	ldr	r3, [pc, #616]	; (8001e34 <HAL_RCC_OscConfig+0x778>)
 8001bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bce:	4a99      	ldr	r2, [pc, #612]	; (8001e34 <HAL_RCC_OscConfig+0x778>)
 8001bd0:	f023 0301 	bic.w	r3, r3, #1
 8001bd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bd8:	4b96      	ldr	r3, [pc, #600]	; (8001e34 <HAL_RCC_OscConfig+0x778>)
 8001bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bde:	4a95      	ldr	r2, [pc, #596]	; (8001e34 <HAL_RCC_OscConfig+0x778>)
 8001be0:	f023 0304 	bic.w	r3, r3, #4
 8001be4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d016      	beq.n	8001c1e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf0:	f7ff fa58 	bl	80010a4 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bf6:	e00a      	b.n	8001c0e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf8:	f7ff fa54 	bl	80010a4 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e162      	b.n	8001ed4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c0e:	4b89      	ldr	r3, [pc, #548]	; (8001e34 <HAL_RCC_OscConfig+0x778>)
 8001c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0ed      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x53c>
 8001c1c:	e015      	b.n	8001c4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1e:	f7ff fa41 	bl	80010a4 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c24:	e00a      	b.n	8001c3c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c26:	f7ff fa3d 	bl	80010a4 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e14b      	b.n	8001ed4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c3c:	4b7d      	ldr	r3, [pc, #500]	; (8001e34 <HAL_RCC_OscConfig+0x778>)
 8001c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1ed      	bne.n	8001c26 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c4a:	7ffb      	ldrb	r3, [r7, #31]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d105      	bne.n	8001c5c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c50:	4b78      	ldr	r3, [pc, #480]	; (8001e34 <HAL_RCC_OscConfig+0x778>)
 8001c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c54:	4a77      	ldr	r2, [pc, #476]	; (8001e34 <HAL_RCC_OscConfig+0x778>)
 8001c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0320 	and.w	r3, r3, #32
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d03c      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d01c      	beq.n	8001caa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c70:	4b70      	ldr	r3, [pc, #448]	; (8001e34 <HAL_RCC_OscConfig+0x778>)
 8001c72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c76:	4a6f      	ldr	r2, [pc, #444]	; (8001e34 <HAL_RCC_OscConfig+0x778>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c80:	f7ff fa10 	bl	80010a4 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c88:	f7ff fa0c 	bl	80010a4 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e11c      	b.n	8001ed4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c9a:	4b66      	ldr	r3, [pc, #408]	; (8001e34 <HAL_RCC_OscConfig+0x778>)
 8001c9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0ef      	beq.n	8001c88 <HAL_RCC_OscConfig+0x5cc>
 8001ca8:	e01b      	b.n	8001ce2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001caa:	4b62      	ldr	r3, [pc, #392]	; (8001e34 <HAL_RCC_OscConfig+0x778>)
 8001cac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cb0:	4a60      	ldr	r2, [pc, #384]	; (8001e34 <HAL_RCC_OscConfig+0x778>)
 8001cb2:	f023 0301 	bic.w	r3, r3, #1
 8001cb6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cba:	f7ff f9f3 	bl	80010a4 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cc2:	f7ff f9ef 	bl	80010a4 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e0ff      	b.n	8001ed4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cd4:	4b57      	ldr	r3, [pc, #348]	; (8001e34 <HAL_RCC_OscConfig+0x778>)
 8001cd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1ef      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 80f3 	beq.w	8001ed2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	f040 80c9 	bne.w	8001e88 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cf6:	4b4f      	ldr	r3, [pc, #316]	; (8001e34 <HAL_RCC_OscConfig+0x778>)
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f003 0203 	and.w	r2, r3, #3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d12c      	bne.n	8001d64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d14:	3b01      	subs	r3, #1
 8001d16:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d123      	bne.n	8001d64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d26:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d11b      	bne.n	8001d64 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d36:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d113      	bne.n	8001d64 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d46:	085b      	lsrs	r3, r3, #1
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d109      	bne.n	8001d64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	085b      	lsrs	r3, r3, #1
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d06b      	beq.n	8001e3c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	2b0c      	cmp	r3, #12
 8001d68:	d062      	beq.n	8001e30 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d6a:	4b32      	ldr	r3, [pc, #200]	; (8001e34 <HAL_RCC_OscConfig+0x778>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e0ac      	b.n	8001ed4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d7a:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <HAL_RCC_OscConfig+0x778>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a2d      	ldr	r2, [pc, #180]	; (8001e34 <HAL_RCC_OscConfig+0x778>)
 8001d80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d84:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d86:	f7ff f98d 	bl	80010a4 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8e:	f7ff f989 	bl	80010a4 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e099      	b.n	8001ed4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da0:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <HAL_RCC_OscConfig+0x778>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1f0      	bne.n	8001d8e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dac:	4b21      	ldr	r3, [pc, #132]	; (8001e34 <HAL_RCC_OscConfig+0x778>)
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	4b21      	ldr	r3, [pc, #132]	; (8001e38 <HAL_RCC_OscConfig+0x77c>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dbc:	3a01      	subs	r2, #1
 8001dbe:	0112      	lsls	r2, r2, #4
 8001dc0:	4311      	orrs	r1, r2
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dc6:	0212      	lsls	r2, r2, #8
 8001dc8:	4311      	orrs	r1, r2
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001dce:	0852      	lsrs	r2, r2, #1
 8001dd0:	3a01      	subs	r2, #1
 8001dd2:	0552      	lsls	r2, r2, #21
 8001dd4:	4311      	orrs	r1, r2
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001dda:	0852      	lsrs	r2, r2, #1
 8001ddc:	3a01      	subs	r2, #1
 8001dde:	0652      	lsls	r2, r2, #25
 8001de0:	4311      	orrs	r1, r2
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001de6:	06d2      	lsls	r2, r2, #27
 8001de8:	430a      	orrs	r2, r1
 8001dea:	4912      	ldr	r1, [pc, #72]	; (8001e34 <HAL_RCC_OscConfig+0x778>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001df0:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <HAL_RCC_OscConfig+0x778>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a0f      	ldr	r2, [pc, #60]	; (8001e34 <HAL_RCC_OscConfig+0x778>)
 8001df6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dfa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dfc:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <HAL_RCC_OscConfig+0x778>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	4a0c      	ldr	r2, [pc, #48]	; (8001e34 <HAL_RCC_OscConfig+0x778>)
 8001e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e08:	f7ff f94c 	bl	80010a4 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e10:	f7ff f948 	bl	80010a4 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e058      	b.n	8001ed4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e22:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <HAL_RCC_OscConfig+0x778>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e2e:	e050      	b.n	8001ed2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e04f      	b.n	8001ed4 <HAL_RCC_OscConfig+0x818>
 8001e34:	40021000 	.word	0x40021000
 8001e38:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e3c:	4b27      	ldr	r3, [pc, #156]	; (8001edc <HAL_RCC_OscConfig+0x820>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d144      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e48:	4b24      	ldr	r3, [pc, #144]	; (8001edc <HAL_RCC_OscConfig+0x820>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a23      	ldr	r2, [pc, #140]	; (8001edc <HAL_RCC_OscConfig+0x820>)
 8001e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e52:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e54:	4b21      	ldr	r3, [pc, #132]	; (8001edc <HAL_RCC_OscConfig+0x820>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	4a20      	ldr	r2, [pc, #128]	; (8001edc <HAL_RCC_OscConfig+0x820>)
 8001e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e60:	f7ff f920 	bl	80010a4 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e68:	f7ff f91c 	bl	80010a4 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e02c      	b.n	8001ed4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e7a:	4b18      	ldr	r3, [pc, #96]	; (8001edc <HAL_RCC_OscConfig+0x820>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0f0      	beq.n	8001e68 <HAL_RCC_OscConfig+0x7ac>
 8001e86:	e024      	b.n	8001ed2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	2b0c      	cmp	r3, #12
 8001e8c:	d01f      	beq.n	8001ece <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8e:	4b13      	ldr	r3, [pc, #76]	; (8001edc <HAL_RCC_OscConfig+0x820>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a12      	ldr	r2, [pc, #72]	; (8001edc <HAL_RCC_OscConfig+0x820>)
 8001e94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9a:	f7ff f903 	bl	80010a4 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea2:	f7ff f8ff 	bl	80010a4 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e00f      	b.n	8001ed4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb4:	4b09      	ldr	r3, [pc, #36]	; (8001edc <HAL_RCC_OscConfig+0x820>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f0      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001ec0:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_RCC_OscConfig+0x820>)
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	4905      	ldr	r1, [pc, #20]	; (8001edc <HAL_RCC_OscConfig+0x820>)
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_RCC_OscConfig+0x824>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60cb      	str	r3, [r1, #12]
 8001ecc:	e001      	b.n	8001ed2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3720      	adds	r7, #32
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	feeefffc 	.word	0xfeeefffc

08001ee4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0e7      	b.n	80020c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef8:	4b75      	ldr	r3, [pc, #468]	; (80020d0 <HAL_RCC_ClockConfig+0x1ec>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d910      	bls.n	8001f28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f06:	4b72      	ldr	r3, [pc, #456]	; (80020d0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f023 0207 	bic.w	r2, r3, #7
 8001f0e:	4970      	ldr	r1, [pc, #448]	; (80020d0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f16:	4b6e      	ldr	r3, [pc, #440]	; (80020d0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0cf      	b.n	80020c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d010      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	4b66      	ldr	r3, [pc, #408]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d908      	bls.n	8001f56 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f44:	4b63      	ldr	r3, [pc, #396]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	4960      	ldr	r1, [pc, #384]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d04c      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	d107      	bne.n	8001f7a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f6a:	4b5a      	ldr	r3, [pc, #360]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d121      	bne.n	8001fba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e0a6      	b.n	80020c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d107      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f82:	4b54      	ldr	r3, [pc, #336]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d115      	bne.n	8001fba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e09a      	b.n	80020c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d107      	bne.n	8001faa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f9a:	4b4e      	ldr	r3, [pc, #312]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d109      	bne.n	8001fba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e08e      	b.n	80020c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001faa:	4b4a      	ldr	r3, [pc, #296]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e086      	b.n	80020c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fba:	4b46      	ldr	r3, [pc, #280]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f023 0203 	bic.w	r2, r3, #3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4943      	ldr	r1, [pc, #268]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fcc:	f7ff f86a 	bl	80010a4 <HAL_GetTick>
 8001fd0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd2:	e00a      	b.n	8001fea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd4:	f7ff f866 	bl	80010a4 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e06e      	b.n	80020c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fea:	4b3a      	ldr	r3, [pc, #232]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 020c 	and.w	r2, r3, #12
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d1eb      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d010      	beq.n	800202a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	4b31      	ldr	r3, [pc, #196]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002014:	429a      	cmp	r2, r3
 8002016:	d208      	bcs.n	800202a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002018:	4b2e      	ldr	r3, [pc, #184]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	492b      	ldr	r1, [pc, #172]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002026:	4313      	orrs	r3, r2
 8002028:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800202a:	4b29      	ldr	r3, [pc, #164]	; (80020d0 <HAL_RCC_ClockConfig+0x1ec>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d210      	bcs.n	800205a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002038:	4b25      	ldr	r3, [pc, #148]	; (80020d0 <HAL_RCC_ClockConfig+0x1ec>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f023 0207 	bic.w	r2, r3, #7
 8002040:	4923      	ldr	r1, [pc, #140]	; (80020d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	4313      	orrs	r3, r2
 8002046:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002048:	4b21      	ldr	r3, [pc, #132]	; (80020d0 <HAL_RCC_ClockConfig+0x1ec>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d001      	beq.n	800205a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e036      	b.n	80020c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0304 	and.w	r3, r3, #4
 8002062:	2b00      	cmp	r3, #0
 8002064:	d008      	beq.n	8002078 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002066:	4b1b      	ldr	r3, [pc, #108]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	4918      	ldr	r1, [pc, #96]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002074:	4313      	orrs	r3, r2
 8002076:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0308 	and.w	r3, r3, #8
 8002080:	2b00      	cmp	r3, #0
 8002082:	d009      	beq.n	8002098 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002084:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	4910      	ldr	r1, [pc, #64]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002094:	4313      	orrs	r3, r2
 8002096:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002098:	f000 f824 	bl	80020e4 <HAL_RCC_GetSysClockFreq>
 800209c:	4602      	mov	r2, r0
 800209e:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	091b      	lsrs	r3, r3, #4
 80020a4:	f003 030f 	and.w	r3, r3, #15
 80020a8:	490b      	ldr	r1, [pc, #44]	; (80020d8 <HAL_RCC_ClockConfig+0x1f4>)
 80020aa:	5ccb      	ldrb	r3, [r1, r3]
 80020ac:	f003 031f 	and.w	r3, r3, #31
 80020b0:	fa22 f303 	lsr.w	r3, r2, r3
 80020b4:	4a09      	ldr	r2, [pc, #36]	; (80020dc <HAL_RCC_ClockConfig+0x1f8>)
 80020b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020b8:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <HAL_RCC_ClockConfig+0x1fc>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe ffa1 	bl	8001004 <HAL_InitTick>
 80020c2:	4603      	mov	r3, r0
 80020c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80020c6:	7afb      	ldrb	r3, [r7, #11]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40022000 	.word	0x40022000
 80020d4:	40021000 	.word	0x40021000
 80020d8:	0800544c 	.word	0x0800544c
 80020dc:	200003fc 	.word	0x200003fc
 80020e0:	20000400 	.word	0x20000400

080020e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	; 0x24
 80020e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
 80020ee:	2300      	movs	r3, #0
 80020f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020f2:	4b3e      	ldr	r3, [pc, #248]	; (80021ec <HAL_RCC_GetSysClockFreq+0x108>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020fc:	4b3b      	ldr	r3, [pc, #236]	; (80021ec <HAL_RCC_GetSysClockFreq+0x108>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d005      	beq.n	8002118 <HAL_RCC_GetSysClockFreq+0x34>
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	2b0c      	cmp	r3, #12
 8002110:	d121      	bne.n	8002156 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d11e      	bne.n	8002156 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002118:	4b34      	ldr	r3, [pc, #208]	; (80021ec <HAL_RCC_GetSysClockFreq+0x108>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	2b00      	cmp	r3, #0
 8002122:	d107      	bne.n	8002134 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002124:	4b31      	ldr	r3, [pc, #196]	; (80021ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800212a:	0a1b      	lsrs	r3, r3, #8
 800212c:	f003 030f 	and.w	r3, r3, #15
 8002130:	61fb      	str	r3, [r7, #28]
 8002132:	e005      	b.n	8002140 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002134:	4b2d      	ldr	r3, [pc, #180]	; (80021ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	091b      	lsrs	r3, r3, #4
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002140:	4a2b      	ldr	r2, [pc, #172]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002148:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10d      	bne.n	800216c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002154:	e00a      	b.n	800216c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	2b04      	cmp	r3, #4
 800215a:	d102      	bne.n	8002162 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800215c:	4b25      	ldr	r3, [pc, #148]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800215e:	61bb      	str	r3, [r7, #24]
 8002160:	e004      	b.n	800216c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	2b08      	cmp	r3, #8
 8002166:	d101      	bne.n	800216c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002168:	4b23      	ldr	r3, [pc, #140]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800216a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	2b0c      	cmp	r3, #12
 8002170:	d134      	bne.n	80021dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002172:	4b1e      	ldr	r3, [pc, #120]	; (80021ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2b02      	cmp	r3, #2
 8002180:	d003      	beq.n	800218a <HAL_RCC_GetSysClockFreq+0xa6>
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2b03      	cmp	r3, #3
 8002186:	d003      	beq.n	8002190 <HAL_RCC_GetSysClockFreq+0xac>
 8002188:	e005      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800218a:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800218c:	617b      	str	r3, [r7, #20]
      break;
 800218e:	e005      	b.n	800219c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002190:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002192:	617b      	str	r3, [r7, #20]
      break;
 8002194:	e002      	b.n	800219c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	617b      	str	r3, [r7, #20]
      break;
 800219a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800219c:	4b13      	ldr	r3, [pc, #76]	; (80021ec <HAL_RCC_GetSysClockFreq+0x108>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	091b      	lsrs	r3, r3, #4
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	3301      	adds	r3, #1
 80021a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021aa:	4b10      	ldr	r3, [pc, #64]	; (80021ec <HAL_RCC_GetSysClockFreq+0x108>)
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	0a1b      	lsrs	r3, r3, #8
 80021b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	fb03 f202 	mul.w	r2, r3, r2
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021c2:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <HAL_RCC_GetSysClockFreq+0x108>)
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	0e5b      	lsrs	r3, r3, #25
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	3301      	adds	r3, #1
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021dc:	69bb      	ldr	r3, [r7, #24]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3724      	adds	r7, #36	; 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40021000 	.word	0x40021000
 80021f0:	08005464 	.word	0x08005464
 80021f4:	00f42400 	.word	0x00f42400
 80021f8:	007a1200 	.word	0x007a1200

080021fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002200:	4b03      	ldr	r3, [pc, #12]	; (8002210 <HAL_RCC_GetHCLKFreq+0x14>)
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	200003fc 	.word	0x200003fc

08002214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002218:	f7ff fff0 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 800221c:	4602      	mov	r2, r0
 800221e:	4b06      	ldr	r3, [pc, #24]	; (8002238 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	4904      	ldr	r1, [pc, #16]	; (800223c <HAL_RCC_GetPCLK1Freq+0x28>)
 800222a:	5ccb      	ldrb	r3, [r1, r3]
 800222c:	f003 031f 	and.w	r3, r3, #31
 8002230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002234:	4618      	mov	r0, r3
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40021000 	.word	0x40021000
 800223c:	0800545c 	.word	0x0800545c

08002240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002244:	f7ff ffda 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 8002248:	4602      	mov	r2, r0
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_RCC_GetPCLK2Freq+0x24>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	0adb      	lsrs	r3, r3, #11
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	4904      	ldr	r1, [pc, #16]	; (8002268 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002256:	5ccb      	ldrb	r3, [r1, r3]
 8002258:	f003 031f 	and.w	r3, r3, #31
 800225c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002260:	4618      	mov	r0, r3
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40021000 	.word	0x40021000
 8002268:	0800545c 	.word	0x0800545c

0800226c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002274:	2300      	movs	r3, #0
 8002276:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002278:	4b2a      	ldr	r3, [pc, #168]	; (8002324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800227a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002284:	f7ff f9b6 	bl	80015f4 <HAL_PWREx_GetVoltageRange>
 8002288:	6178      	str	r0, [r7, #20]
 800228a:	e014      	b.n	80022b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800228c:	4b25      	ldr	r3, [pc, #148]	; (8002324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800228e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002290:	4a24      	ldr	r2, [pc, #144]	; (8002324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002296:	6593      	str	r3, [r2, #88]	; 0x58
 8002298:	4b22      	ldr	r3, [pc, #136]	; (8002324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800229a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022a4:	f7ff f9a6 	bl	80015f4 <HAL_PWREx_GetVoltageRange>
 80022a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022aa:	4b1e      	ldr	r3, [pc, #120]	; (8002324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ae:	4a1d      	ldr	r2, [pc, #116]	; (8002324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022bc:	d10b      	bne.n	80022d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b80      	cmp	r3, #128	; 0x80
 80022c2:	d919      	bls.n	80022f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2ba0      	cmp	r3, #160	; 0xa0
 80022c8:	d902      	bls.n	80022d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022ca:	2302      	movs	r3, #2
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	e013      	b.n	80022f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022d0:	2301      	movs	r3, #1
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	e010      	b.n	80022f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b80      	cmp	r3, #128	; 0x80
 80022da:	d902      	bls.n	80022e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022dc:	2303      	movs	r3, #3
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	e00a      	b.n	80022f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b80      	cmp	r3, #128	; 0x80
 80022e6:	d102      	bne.n	80022ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022e8:	2302      	movs	r3, #2
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	e004      	b.n	80022f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b70      	cmp	r3, #112	; 0x70
 80022f2:	d101      	bne.n	80022f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022f4:	2301      	movs	r3, #1
 80022f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f023 0207 	bic.w	r2, r3, #7
 8002300:	4909      	ldr	r1, [pc, #36]	; (8002328 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002308:	4b07      	ldr	r3, [pc, #28]	; (8002328 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	429a      	cmp	r2, r3
 8002314:	d001      	beq.n	800231a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40021000 	.word	0x40021000
 8002328:	40022000 	.word	0x40022000

0800232c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002334:	2300      	movs	r3, #0
 8002336:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002338:	2300      	movs	r3, #0
 800233a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002344:	2b00      	cmp	r3, #0
 8002346:	d031      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002350:	d01a      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002352:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002356:	d814      	bhi.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002358:	2b00      	cmp	r3, #0
 800235a:	d009      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800235c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002360:	d10f      	bne.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002362:	4b5d      	ldr	r3, [pc, #372]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	4a5c      	ldr	r2, [pc, #368]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800236e:	e00c      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3304      	adds	r3, #4
 8002374:	2100      	movs	r1, #0
 8002376:	4618      	mov	r0, r3
 8002378:	f000 f9de 	bl	8002738 <RCCEx_PLLSAI1_Config>
 800237c:	4603      	mov	r3, r0
 800237e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002380:	e003      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	74fb      	strb	r3, [r7, #19]
      break;
 8002386:	e000      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002388:	bf00      	nop
    }

    if(ret == HAL_OK)
 800238a:	7cfb      	ldrb	r3, [r7, #19]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10b      	bne.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002390:	4b51      	ldr	r3, [pc, #324]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002396:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239e:	494e      	ldr	r1, [pc, #312]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023a6:	e001      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023a8:	7cfb      	ldrb	r3, [r7, #19]
 80023aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 809e 	beq.w	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ba:	2300      	movs	r3, #0
 80023bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023be:	4b46      	ldr	r3, [pc, #280]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80023ce:	2300      	movs	r3, #0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00d      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d4:	4b40      	ldr	r3, [pc, #256]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d8:	4a3f      	ldr	r2, [pc, #252]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023de:	6593      	str	r3, [r2, #88]	; 0x58
 80023e0:	4b3d      	ldr	r3, [pc, #244]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ec:	2301      	movs	r3, #1
 80023ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023f0:	4b3a      	ldr	r3, [pc, #232]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a39      	ldr	r2, [pc, #228]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80023f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023fc:	f7fe fe52 	bl	80010a4 <HAL_GetTick>
 8002400:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002402:	e009      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002404:	f7fe fe4e 	bl	80010a4 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d902      	bls.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	74fb      	strb	r3, [r7, #19]
        break;
 8002416:	e005      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002418:	4b30      	ldr	r3, [pc, #192]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0ef      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002424:	7cfb      	ldrb	r3, [r7, #19]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d15a      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800242a:	4b2b      	ldr	r3, [pc, #172]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800242c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002430:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002434:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d01e      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	429a      	cmp	r2, r3
 8002444:	d019      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002446:	4b24      	ldr	r3, [pc, #144]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002450:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002452:	4b21      	ldr	r3, [pc, #132]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002458:	4a1f      	ldr	r2, [pc, #124]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800245a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002462:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002468:	4a1b      	ldr	r2, [pc, #108]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800246a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800246e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002472:	4a19      	ldr	r2, [pc, #100]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d016      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7fe fe0e 	bl	80010a4 <HAL_GetTick>
 8002488:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800248a:	e00b      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800248c:	f7fe fe0a 	bl	80010a4 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	f241 3288 	movw	r2, #5000	; 0x1388
 800249a:	4293      	cmp	r3, r2
 800249c:	d902      	bls.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	74fb      	strb	r3, [r7, #19]
            break;
 80024a2:	e006      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0ec      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80024b2:	7cfb      	ldrb	r3, [r7, #19]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10b      	bne.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024b8:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c6:	4904      	ldr	r1, [pc, #16]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024ce:	e009      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024d0:	7cfb      	ldrb	r3, [r7, #19]
 80024d2:	74bb      	strb	r3, [r7, #18]
 80024d4:	e006      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024e0:	7cfb      	ldrb	r3, [r7, #19]
 80024e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024e4:	7c7b      	ldrb	r3, [r7, #17]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d105      	bne.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ea:	4b8a      	ldr	r3, [pc, #552]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ee:	4a89      	ldr	r2, [pc, #548]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00a      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002502:	4b84      	ldr	r3, [pc, #528]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002508:	f023 0203 	bic.w	r2, r3, #3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	4980      	ldr	r1, [pc, #512]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002512:	4313      	orrs	r3, r2
 8002514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00a      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002524:	4b7b      	ldr	r3, [pc, #492]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252a:	f023 020c 	bic.w	r2, r3, #12
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	4978      	ldr	r1, [pc, #480]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00a      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002546:	4b73      	ldr	r3, [pc, #460]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002554:	496f      	ldr	r1, [pc, #444]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002556:	4313      	orrs	r3, r2
 8002558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00a      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002568:	4b6a      	ldr	r3, [pc, #424]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002576:	4967      	ldr	r1, [pc, #412]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002578:	4313      	orrs	r3, r2
 800257a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00a      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800258a:	4b62      	ldr	r3, [pc, #392]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800258c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002590:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002598:	495e      	ldr	r1, [pc, #376]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800259a:	4313      	orrs	r3, r2
 800259c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00a      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025ac:	4b59      	ldr	r3, [pc, #356]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ba:	4956      	ldr	r1, [pc, #344]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00a      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025ce:	4b51      	ldr	r3, [pc, #324]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025dc:	494d      	ldr	r1, [pc, #308]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d028      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025f0:	4b48      	ldr	r3, [pc, #288]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	4945      	ldr	r1, [pc, #276]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002600:	4313      	orrs	r3, r2
 8002602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800260e:	d106      	bne.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002610:	4b40      	ldr	r3, [pc, #256]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	4a3f      	ldr	r2, [pc, #252]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002616:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800261a:	60d3      	str	r3, [r2, #12]
 800261c:	e011      	b.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002626:	d10c      	bne.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3304      	adds	r3, #4
 800262c:	2101      	movs	r1, #1
 800262e:	4618      	mov	r0, r3
 8002630:	f000 f882 	bl	8002738 <RCCEx_PLLSAI1_Config>
 8002634:	4603      	mov	r3, r0
 8002636:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002638:	7cfb      	ldrb	r3, [r7, #19]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800263e:	7cfb      	ldrb	r3, [r7, #19]
 8002640:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d028      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800264e:	4b31      	ldr	r3, [pc, #196]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002654:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265c:	492d      	ldr	r1, [pc, #180]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800265e:	4313      	orrs	r3, r2
 8002660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002668:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800266c:	d106      	bne.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800266e:	4b29      	ldr	r3, [pc, #164]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	4a28      	ldr	r2, [pc, #160]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002678:	60d3      	str	r3, [r2, #12]
 800267a:	e011      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002680:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002684:	d10c      	bne.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	3304      	adds	r3, #4
 800268a:	2101      	movs	r1, #1
 800268c:	4618      	mov	r0, r3
 800268e:	f000 f853 	bl	8002738 <RCCEx_PLLSAI1_Config>
 8002692:	4603      	mov	r3, r0
 8002694:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002696:	7cfb      	ldrb	r3, [r7, #19]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800269c:	7cfb      	ldrb	r3, [r7, #19]
 800269e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d01c      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026ac:	4b19      	ldr	r3, [pc, #100]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ba:	4916      	ldr	r1, [pc, #88]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026ca:	d10c      	bne.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3304      	adds	r3, #4
 80026d0:	2102      	movs	r1, #2
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 f830 	bl	8002738 <RCCEx_PLLSAI1_Config>
 80026d8:	4603      	mov	r3, r0
 80026da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026dc:	7cfb      	ldrb	r3, [r7, #19]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80026e2:	7cfb      	ldrb	r3, [r7, #19]
 80026e4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00a      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026f2:	4b08      	ldr	r3, [pc, #32]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002700:	4904      	ldr	r1, [pc, #16]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002702:	4313      	orrs	r3, r2
 8002704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002708:	7cbb      	ldrb	r3, [r7, #18]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40021000 	.word	0x40021000

08002718 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800271c:	4b05      	ldr	r3, [pc, #20]	; (8002734 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a04      	ldr	r2, [pc, #16]	; (8002734 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002722:	f043 0304 	orr.w	r3, r3, #4
 8002726:	6013      	str	r3, [r2, #0]
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000

08002738 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002742:	2300      	movs	r3, #0
 8002744:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002746:	4b74      	ldr	r3, [pc, #464]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d018      	beq.n	8002784 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002752:	4b71      	ldr	r3, [pc, #452]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f003 0203 	and.w	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d10d      	bne.n	800277e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
       ||
 8002766:	2b00      	cmp	r3, #0
 8002768:	d009      	beq.n	800277e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800276a:	4b6b      	ldr	r3, [pc, #428]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e0>)
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	091b      	lsrs	r3, r3, #4
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
       ||
 800277a:	429a      	cmp	r2, r3
 800277c:	d047      	beq.n	800280e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	73fb      	strb	r3, [r7, #15]
 8002782:	e044      	b.n	800280e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b03      	cmp	r3, #3
 800278a:	d018      	beq.n	80027be <RCCEx_PLLSAI1_Config+0x86>
 800278c:	2b03      	cmp	r3, #3
 800278e:	d825      	bhi.n	80027dc <RCCEx_PLLSAI1_Config+0xa4>
 8002790:	2b01      	cmp	r3, #1
 8002792:	d002      	beq.n	800279a <RCCEx_PLLSAI1_Config+0x62>
 8002794:	2b02      	cmp	r3, #2
 8002796:	d009      	beq.n	80027ac <RCCEx_PLLSAI1_Config+0x74>
 8002798:	e020      	b.n	80027dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800279a:	4b5f      	ldr	r3, [pc, #380]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d11d      	bne.n	80027e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027aa:	e01a      	b.n	80027e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027ac:	4b5a      	ldr	r3, [pc, #360]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d116      	bne.n	80027e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027bc:	e013      	b.n	80027e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027be:	4b56      	ldr	r3, [pc, #344]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10f      	bne.n	80027ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027ca:	4b53      	ldr	r3, [pc, #332]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d109      	bne.n	80027ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027da:	e006      	b.n	80027ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
      break;
 80027e0:	e004      	b.n	80027ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027e2:	bf00      	nop
 80027e4:	e002      	b.n	80027ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027e6:	bf00      	nop
 80027e8:	e000      	b.n	80027ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10d      	bne.n	800280e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027f2:	4b49      	ldr	r3, [pc, #292]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6819      	ldr	r1, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	3b01      	subs	r3, #1
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	430b      	orrs	r3, r1
 8002808:	4943      	ldr	r1, [pc, #268]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e0>)
 800280a:	4313      	orrs	r3, r2
 800280c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d17c      	bne.n	800290e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002814:	4b40      	ldr	r3, [pc, #256]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a3f      	ldr	r2, [pc, #252]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e0>)
 800281a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800281e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002820:	f7fe fc40 	bl	80010a4 <HAL_GetTick>
 8002824:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002826:	e009      	b.n	800283c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002828:	f7fe fc3c 	bl	80010a4 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d902      	bls.n	800283c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	73fb      	strb	r3, [r7, #15]
        break;
 800283a:	e005      	b.n	8002848 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800283c:	4b36      	ldr	r3, [pc, #216]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e0>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1ef      	bne.n	8002828 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002848:	7bfb      	ldrb	r3, [r7, #15]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d15f      	bne.n	800290e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d110      	bne.n	8002876 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002854:	4b30      	ldr	r3, [pc, #192]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800285c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6892      	ldr	r2, [r2, #8]
 8002864:	0211      	lsls	r1, r2, #8
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	68d2      	ldr	r2, [r2, #12]
 800286a:	06d2      	lsls	r2, r2, #27
 800286c:	430a      	orrs	r2, r1
 800286e:	492a      	ldr	r1, [pc, #168]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002870:	4313      	orrs	r3, r2
 8002872:	610b      	str	r3, [r1, #16]
 8002874:	e027      	b.n	80028c6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d112      	bne.n	80028a2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800287c:	4b26      	ldr	r3, [pc, #152]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e0>)
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002884:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6892      	ldr	r2, [r2, #8]
 800288c:	0211      	lsls	r1, r2, #8
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6912      	ldr	r2, [r2, #16]
 8002892:	0852      	lsrs	r2, r2, #1
 8002894:	3a01      	subs	r2, #1
 8002896:	0552      	lsls	r2, r2, #21
 8002898:	430a      	orrs	r2, r1
 800289a:	491f      	ldr	r1, [pc, #124]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e0>)
 800289c:	4313      	orrs	r3, r2
 800289e:	610b      	str	r3, [r1, #16]
 80028a0:	e011      	b.n	80028c6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028a2:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6892      	ldr	r2, [r2, #8]
 80028b2:	0211      	lsls	r1, r2, #8
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6952      	ldr	r2, [r2, #20]
 80028b8:	0852      	lsrs	r2, r2, #1
 80028ba:	3a01      	subs	r2, #1
 80028bc:	0652      	lsls	r2, r2, #25
 80028be:	430a      	orrs	r2, r1
 80028c0:	4915      	ldr	r1, [pc, #84]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028c6:	4b14      	ldr	r3, [pc, #80]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a13      	ldr	r2, [pc, #76]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028d0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d2:	f7fe fbe7 	bl	80010a4 <HAL_GetTick>
 80028d6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028d8:	e009      	b.n	80028ee <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028da:	f7fe fbe3 	bl	80010a4 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d902      	bls.n	80028ee <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	73fb      	strb	r3, [r7, #15]
          break;
 80028ec:	e005      	b.n	80028fa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028ee:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0ef      	beq.n	80028da <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d106      	bne.n	800290e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002902:	691a      	ldr	r2, [r3, #16]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	4903      	ldr	r1, [pc, #12]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e0>)
 800290a:	4313      	orrs	r3, r2
 800290c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800290e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40021000 	.word	0x40021000

0800291c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e040      	b.n	80029b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7fe fa42 	bl	8000dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2224      	movs	r2, #36	; 0x24
 8002948:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0201 	bic.w	r2, r2, #1
 8002958:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f992 	bl	8002c84 <UART_SetConfig>
 8002960:	4603      	mov	r3, r0
 8002962:	2b01      	cmp	r3, #1
 8002964:	d101      	bne.n	800296a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e022      	b.n	80029b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	2b00      	cmp	r3, #0
 8002970:	d002      	beq.n	8002978 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fbb2 	bl	80030dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002986:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002996:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 fc39 	bl	8003220 <UART_CheckIdleState>
 80029ae:	4603      	mov	r3, r0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08a      	sub	sp, #40	; 0x28
 80029bc:	af02      	add	r7, sp, #8
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	4613      	mov	r3, r2
 80029c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	f040 8082 	bne.w	8002ad6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <HAL_UART_Transmit+0x26>
 80029d8:	88fb      	ldrh	r3, [r7, #6]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e07a      	b.n	8002ad8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_UART_Transmit+0x38>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e073      	b.n	8002ad8 <HAL_UART_Transmit+0x120>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2221      	movs	r2, #33	; 0x21
 8002a04:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a06:	f7fe fb4d 	bl	80010a4 <HAL_GetTick>
 8002a0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	88fa      	ldrh	r2, [r7, #6]
 8002a10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	88fa      	ldrh	r2, [r7, #6]
 8002a18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a24:	d108      	bne.n	8002a38 <HAL_UART_Transmit+0x80>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d104      	bne.n	8002a38 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	61bb      	str	r3, [r7, #24]
 8002a36:	e003      	b.n	8002a40 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002a48:	e02d      	b.n	8002aa6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2200      	movs	r2, #0
 8002a52:	2180      	movs	r1, #128	; 0x80
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 fc2c 	bl	80032b2 <UART_WaitOnFlagUntilTimeout>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e039      	b.n	8002ad8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10b      	bne.n	8002a82 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	881a      	ldrh	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a76:	b292      	uxth	r2, r2
 8002a78:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	3302      	adds	r3, #2
 8002a7e:	61bb      	str	r3, [r7, #24]
 8002a80:	e008      	b.n	8002a94 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	781a      	ldrb	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	b292      	uxth	r2, r2
 8002a8c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	3301      	adds	r3, #1
 8002a92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1cb      	bne.n	8002a4a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2140      	movs	r1, #64	; 0x40
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 fbf8 	bl	80032b2 <UART_WaitOnFlagUntilTimeout>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e005      	b.n	8002ad8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e000      	b.n	8002ad8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002ad6:	2302      	movs	r3, #2
  }
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3720      	adds	r7, #32
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08a      	sub	sp, #40	; 0x28
 8002ae4:	af02      	add	r7, sp, #8
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	4613      	mov	r3, r2
 8002aee:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af4:	2b20      	cmp	r3, #32
 8002af6:	f040 80bf 	bne.w	8002c78 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <HAL_UART_Receive+0x26>
 8002b00:	88fb      	ldrh	r3, [r7, #6]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e0b7      	b.n	8002c7a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d101      	bne.n	8002b18 <HAL_UART_Receive+0x38>
 8002b14:	2302      	movs	r3, #2
 8002b16:	e0b0      	b.n	8002c7a <HAL_UART_Receive+0x19a>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2222      	movs	r2, #34	; 0x22
 8002b2c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b34:	f7fe fab6 	bl	80010a4 <HAL_GetTick>
 8002b38:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	88fa      	ldrh	r2, [r7, #6]
 8002b3e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	88fa      	ldrh	r2, [r7, #6]
 8002b46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b52:	d10e      	bne.n	8002b72 <HAL_UART_Receive+0x92>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d105      	bne.n	8002b68 <HAL_UART_Receive+0x88>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002b62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b66:	e02d      	b.n	8002bc4 <HAL_UART_Receive+0xe4>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	22ff      	movs	r2, #255	; 0xff
 8002b6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b70:	e028      	b.n	8002bc4 <HAL_UART_Receive+0xe4>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10d      	bne.n	8002b96 <HAL_UART_Receive+0xb6>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d104      	bne.n	8002b8c <HAL_UART_Receive+0xac>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	22ff      	movs	r2, #255	; 0xff
 8002b86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b8a:	e01b      	b.n	8002bc4 <HAL_UART_Receive+0xe4>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	227f      	movs	r2, #127	; 0x7f
 8002b90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b94:	e016      	b.n	8002bc4 <HAL_UART_Receive+0xe4>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b9e:	d10d      	bne.n	8002bbc <HAL_UART_Receive+0xdc>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d104      	bne.n	8002bb2 <HAL_UART_Receive+0xd2>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	227f      	movs	r2, #127	; 0x7f
 8002bac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002bb0:	e008      	b.n	8002bc4 <HAL_UART_Receive+0xe4>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	223f      	movs	r2, #63	; 0x3f
 8002bb6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002bba:	e003      	b.n	8002bc4 <HAL_UART_Receive+0xe4>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002bca:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd4:	d108      	bne.n	8002be8 <HAL_UART_Receive+0x108>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d104      	bne.n	8002be8 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	61bb      	str	r3, [r7, #24]
 8002be6:	e003      	b.n	8002bf0 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002bf8:	e033      	b.n	8002c62 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2200      	movs	r2, #0
 8002c02:	2120      	movs	r1, #32
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 fb54 	bl	80032b2 <UART_WaitOnFlagUntilTimeout>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e032      	b.n	8002c7a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10c      	bne.n	8002c34 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	8a7b      	ldrh	r3, [r7, #18]
 8002c24:	4013      	ands	r3, r2
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	3302      	adds	r3, #2
 8002c30:	61bb      	str	r3, [r7, #24]
 8002c32:	e00d      	b.n	8002c50 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	8a7b      	ldrh	r3, [r7, #18]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	4013      	ands	r3, r2
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1c5      	bne.n	8002bfa <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2220      	movs	r2, #32
 8002c72:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002c74:	2300      	movs	r3, #0
 8002c76:	e000      	b.n	8002c7a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002c78:	2302      	movs	r3, #2
  }
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3720      	adds	r7, #32
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
	...

08002c84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c88:	b08a      	sub	sp, #40	; 0x28
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	4bb4      	ldr	r3, [pc, #720]	; (8002f84 <UART_SetConfig+0x300>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	6812      	ldr	r2, [r2, #0]
 8002cba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	68da      	ldr	r2, [r3, #12]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4aa9      	ldr	r2, [pc, #676]	; (8002f88 <UART_SetConfig+0x304>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d004      	beq.n	8002cf0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cec:	4313      	orrs	r3, r2
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d00:	430a      	orrs	r2, r1
 8002d02:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4aa0      	ldr	r2, [pc, #640]	; (8002f8c <UART_SetConfig+0x308>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d126      	bne.n	8002d5c <UART_SetConfig+0xd8>
 8002d0e:	4ba0      	ldr	r3, [pc, #640]	; (8002f90 <UART_SetConfig+0x30c>)
 8002d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d81b      	bhi.n	8002d54 <UART_SetConfig+0xd0>
 8002d1c:	a201      	add	r2, pc, #4	; (adr r2, 8002d24 <UART_SetConfig+0xa0>)
 8002d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d22:	bf00      	nop
 8002d24:	08002d35 	.word	0x08002d35
 8002d28:	08002d45 	.word	0x08002d45
 8002d2c:	08002d3d 	.word	0x08002d3d
 8002d30:	08002d4d 	.word	0x08002d4d
 8002d34:	2301      	movs	r3, #1
 8002d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d3a:	e080      	b.n	8002e3e <UART_SetConfig+0x1ba>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d42:	e07c      	b.n	8002e3e <UART_SetConfig+0x1ba>
 8002d44:	2304      	movs	r3, #4
 8002d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d4a:	e078      	b.n	8002e3e <UART_SetConfig+0x1ba>
 8002d4c:	2308      	movs	r3, #8
 8002d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d52:	e074      	b.n	8002e3e <UART_SetConfig+0x1ba>
 8002d54:	2310      	movs	r3, #16
 8002d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d5a:	e070      	b.n	8002e3e <UART_SetConfig+0x1ba>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a8c      	ldr	r2, [pc, #560]	; (8002f94 <UART_SetConfig+0x310>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d138      	bne.n	8002dd8 <UART_SetConfig+0x154>
 8002d66:	4b8a      	ldr	r3, [pc, #552]	; (8002f90 <UART_SetConfig+0x30c>)
 8002d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6c:	f003 030c 	and.w	r3, r3, #12
 8002d70:	2b0c      	cmp	r3, #12
 8002d72:	d82d      	bhi.n	8002dd0 <UART_SetConfig+0x14c>
 8002d74:	a201      	add	r2, pc, #4	; (adr r2, 8002d7c <UART_SetConfig+0xf8>)
 8002d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7a:	bf00      	nop
 8002d7c:	08002db1 	.word	0x08002db1
 8002d80:	08002dd1 	.word	0x08002dd1
 8002d84:	08002dd1 	.word	0x08002dd1
 8002d88:	08002dd1 	.word	0x08002dd1
 8002d8c:	08002dc1 	.word	0x08002dc1
 8002d90:	08002dd1 	.word	0x08002dd1
 8002d94:	08002dd1 	.word	0x08002dd1
 8002d98:	08002dd1 	.word	0x08002dd1
 8002d9c:	08002db9 	.word	0x08002db9
 8002da0:	08002dd1 	.word	0x08002dd1
 8002da4:	08002dd1 	.word	0x08002dd1
 8002da8:	08002dd1 	.word	0x08002dd1
 8002dac:	08002dc9 	.word	0x08002dc9
 8002db0:	2300      	movs	r3, #0
 8002db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002db6:	e042      	b.n	8002e3e <UART_SetConfig+0x1ba>
 8002db8:	2302      	movs	r3, #2
 8002dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dbe:	e03e      	b.n	8002e3e <UART_SetConfig+0x1ba>
 8002dc0:	2304      	movs	r3, #4
 8002dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dc6:	e03a      	b.n	8002e3e <UART_SetConfig+0x1ba>
 8002dc8:	2308      	movs	r3, #8
 8002dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dce:	e036      	b.n	8002e3e <UART_SetConfig+0x1ba>
 8002dd0:	2310      	movs	r3, #16
 8002dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dd6:	e032      	b.n	8002e3e <UART_SetConfig+0x1ba>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a6a      	ldr	r2, [pc, #424]	; (8002f88 <UART_SetConfig+0x304>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d12a      	bne.n	8002e38 <UART_SetConfig+0x1b4>
 8002de2:	4b6b      	ldr	r3, [pc, #428]	; (8002f90 <UART_SetConfig+0x30c>)
 8002de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002dec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002df0:	d01a      	beq.n	8002e28 <UART_SetConfig+0x1a4>
 8002df2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002df6:	d81b      	bhi.n	8002e30 <UART_SetConfig+0x1ac>
 8002df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dfc:	d00c      	beq.n	8002e18 <UART_SetConfig+0x194>
 8002dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e02:	d815      	bhi.n	8002e30 <UART_SetConfig+0x1ac>
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <UART_SetConfig+0x18c>
 8002e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e0c:	d008      	beq.n	8002e20 <UART_SetConfig+0x19c>
 8002e0e:	e00f      	b.n	8002e30 <UART_SetConfig+0x1ac>
 8002e10:	2300      	movs	r3, #0
 8002e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e16:	e012      	b.n	8002e3e <UART_SetConfig+0x1ba>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e1e:	e00e      	b.n	8002e3e <UART_SetConfig+0x1ba>
 8002e20:	2304      	movs	r3, #4
 8002e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e26:	e00a      	b.n	8002e3e <UART_SetConfig+0x1ba>
 8002e28:	2308      	movs	r3, #8
 8002e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e2e:	e006      	b.n	8002e3e <UART_SetConfig+0x1ba>
 8002e30:	2310      	movs	r3, #16
 8002e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e36:	e002      	b.n	8002e3e <UART_SetConfig+0x1ba>
 8002e38:	2310      	movs	r3, #16
 8002e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a51      	ldr	r2, [pc, #324]	; (8002f88 <UART_SetConfig+0x304>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d17a      	bne.n	8002f3e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d824      	bhi.n	8002e9a <UART_SetConfig+0x216>
 8002e50:	a201      	add	r2, pc, #4	; (adr r2, 8002e58 <UART_SetConfig+0x1d4>)
 8002e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e56:	bf00      	nop
 8002e58:	08002e7d 	.word	0x08002e7d
 8002e5c:	08002e9b 	.word	0x08002e9b
 8002e60:	08002e85 	.word	0x08002e85
 8002e64:	08002e9b 	.word	0x08002e9b
 8002e68:	08002e8b 	.word	0x08002e8b
 8002e6c:	08002e9b 	.word	0x08002e9b
 8002e70:	08002e9b 	.word	0x08002e9b
 8002e74:	08002e9b 	.word	0x08002e9b
 8002e78:	08002e93 	.word	0x08002e93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e7c:	f7ff f9ca 	bl	8002214 <HAL_RCC_GetPCLK1Freq>
 8002e80:	61f8      	str	r0, [r7, #28]
        break;
 8002e82:	e010      	b.n	8002ea6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e84:	4b44      	ldr	r3, [pc, #272]	; (8002f98 <UART_SetConfig+0x314>)
 8002e86:	61fb      	str	r3, [r7, #28]
        break;
 8002e88:	e00d      	b.n	8002ea6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e8a:	f7ff f92b 	bl	80020e4 <HAL_RCC_GetSysClockFreq>
 8002e8e:	61f8      	str	r0, [r7, #28]
        break;
 8002e90:	e009      	b.n	8002ea6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e96:	61fb      	str	r3, [r7, #28]
        break;
 8002e98:	e005      	b.n	8002ea6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002ea4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 8107 	beq.w	80030bc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	4413      	add	r3, r2
 8002eb8:	69fa      	ldr	r2, [r7, #28]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d305      	bcc.n	8002eca <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ec4:	69fa      	ldr	r2, [r7, #28]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d903      	bls.n	8002ed2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002ed0:	e0f4      	b.n	80030bc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	461c      	mov	r4, r3
 8002ed8:	4615      	mov	r5, r2
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	022b      	lsls	r3, r5, #8
 8002ee4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002ee8:	0222      	lsls	r2, r4, #8
 8002eea:	68f9      	ldr	r1, [r7, #12]
 8002eec:	6849      	ldr	r1, [r1, #4]
 8002eee:	0849      	lsrs	r1, r1, #1
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	4688      	mov	r8, r1
 8002ef4:	4681      	mov	r9, r0
 8002ef6:	eb12 0a08 	adds.w	sl, r2, r8
 8002efa:	eb43 0b09 	adc.w	fp, r3, r9
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	603b      	str	r3, [r7, #0]
 8002f06:	607a      	str	r2, [r7, #4]
 8002f08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f0c:	4650      	mov	r0, sl
 8002f0e:	4659      	mov	r1, fp
 8002f10:	f7fd fb86 	bl	8000620 <__aeabi_uldivmod>
 8002f14:	4602      	mov	r2, r0
 8002f16:	460b      	mov	r3, r1
 8002f18:	4613      	mov	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f22:	d308      	bcc.n	8002f36 <UART_SetConfig+0x2b2>
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f2a:	d204      	bcs.n	8002f36 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	60da      	str	r2, [r3, #12]
 8002f34:	e0c2      	b.n	80030bc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002f3c:	e0be      	b.n	80030bc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f46:	d16a      	bne.n	800301e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8002f48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d834      	bhi.n	8002fba <UART_SetConfig+0x336>
 8002f50:	a201      	add	r2, pc, #4	; (adr r2, 8002f58 <UART_SetConfig+0x2d4>)
 8002f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f56:	bf00      	nop
 8002f58:	08002f7d 	.word	0x08002f7d
 8002f5c:	08002f9d 	.word	0x08002f9d
 8002f60:	08002fa5 	.word	0x08002fa5
 8002f64:	08002fbb 	.word	0x08002fbb
 8002f68:	08002fab 	.word	0x08002fab
 8002f6c:	08002fbb 	.word	0x08002fbb
 8002f70:	08002fbb 	.word	0x08002fbb
 8002f74:	08002fbb 	.word	0x08002fbb
 8002f78:	08002fb3 	.word	0x08002fb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f7c:	f7ff f94a 	bl	8002214 <HAL_RCC_GetPCLK1Freq>
 8002f80:	61f8      	str	r0, [r7, #28]
        break;
 8002f82:	e020      	b.n	8002fc6 <UART_SetConfig+0x342>
 8002f84:	efff69f3 	.word	0xefff69f3
 8002f88:	40008000 	.word	0x40008000
 8002f8c:	40013800 	.word	0x40013800
 8002f90:	40021000 	.word	0x40021000
 8002f94:	40004400 	.word	0x40004400
 8002f98:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f9c:	f7ff f950 	bl	8002240 <HAL_RCC_GetPCLK2Freq>
 8002fa0:	61f8      	str	r0, [r7, #28]
        break;
 8002fa2:	e010      	b.n	8002fc6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fa4:	4b4c      	ldr	r3, [pc, #304]	; (80030d8 <UART_SetConfig+0x454>)
 8002fa6:	61fb      	str	r3, [r7, #28]
        break;
 8002fa8:	e00d      	b.n	8002fc6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002faa:	f7ff f89b 	bl	80020e4 <HAL_RCC_GetSysClockFreq>
 8002fae:	61f8      	str	r0, [r7, #28]
        break;
 8002fb0:	e009      	b.n	8002fc6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fb6:	61fb      	str	r3, [r7, #28]
        break;
 8002fb8:	e005      	b.n	8002fc6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002fc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d077      	beq.n	80030bc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	005a      	lsls	r2, r3, #1
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	085b      	lsrs	r3, r3, #1
 8002fd6:	441a      	add	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	2b0f      	cmp	r3, #15
 8002fe6:	d916      	bls.n	8003016 <UART_SetConfig+0x392>
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fee:	d212      	bcs.n	8003016 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	f023 030f 	bic.w	r3, r3, #15
 8002ff8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	085b      	lsrs	r3, r3, #1
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	b29a      	uxth	r2, r3
 8003006:	8afb      	ldrh	r3, [r7, #22]
 8003008:	4313      	orrs	r3, r2
 800300a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	8afa      	ldrh	r2, [r7, #22]
 8003012:	60da      	str	r2, [r3, #12]
 8003014:	e052      	b.n	80030bc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800301c:	e04e      	b.n	80030bc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800301e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003022:	2b08      	cmp	r3, #8
 8003024:	d827      	bhi.n	8003076 <UART_SetConfig+0x3f2>
 8003026:	a201      	add	r2, pc, #4	; (adr r2, 800302c <UART_SetConfig+0x3a8>)
 8003028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302c:	08003051 	.word	0x08003051
 8003030:	08003059 	.word	0x08003059
 8003034:	08003061 	.word	0x08003061
 8003038:	08003077 	.word	0x08003077
 800303c:	08003067 	.word	0x08003067
 8003040:	08003077 	.word	0x08003077
 8003044:	08003077 	.word	0x08003077
 8003048:	08003077 	.word	0x08003077
 800304c:	0800306f 	.word	0x0800306f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003050:	f7ff f8e0 	bl	8002214 <HAL_RCC_GetPCLK1Freq>
 8003054:	61f8      	str	r0, [r7, #28]
        break;
 8003056:	e014      	b.n	8003082 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003058:	f7ff f8f2 	bl	8002240 <HAL_RCC_GetPCLK2Freq>
 800305c:	61f8      	str	r0, [r7, #28]
        break;
 800305e:	e010      	b.n	8003082 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003060:	4b1d      	ldr	r3, [pc, #116]	; (80030d8 <UART_SetConfig+0x454>)
 8003062:	61fb      	str	r3, [r7, #28]
        break;
 8003064:	e00d      	b.n	8003082 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003066:	f7ff f83d 	bl	80020e4 <HAL_RCC_GetSysClockFreq>
 800306a:	61f8      	str	r0, [r7, #28]
        break;
 800306c:	e009      	b.n	8003082 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800306e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003072:	61fb      	str	r3, [r7, #28]
        break;
 8003074:	e005      	b.n	8003082 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003080:	bf00      	nop
    }

    if (pclk != 0U)
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d019      	beq.n	80030bc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	085a      	lsrs	r2, r3, #1
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	441a      	add	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	fbb2 f3f3 	udiv	r3, r2, r3
 800309a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	2b0f      	cmp	r3, #15
 80030a0:	d909      	bls.n	80030b6 <UART_SetConfig+0x432>
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a8:	d205      	bcs.n	80030b6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	60da      	str	r2, [r3, #12]
 80030b4:	e002      	b.n	80030bc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80030c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3728      	adds	r7, #40	; 0x28
 80030d0:	46bd      	mov	sp, r7
 80030d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030d6:	bf00      	nop
 80030d8:	00f42400 	.word	0x00f42400

080030dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00a      	beq.n	8003106 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00a      	beq.n	800314a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00a      	beq.n	800316c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	f003 0310 	and.w	r3, r3, #16
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00a      	beq.n	800318e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	f003 0320 	and.w	r3, r3, #32
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00a      	beq.n	80031b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d01a      	beq.n	80031f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031da:	d10a      	bne.n	80031f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	605a      	str	r2, [r3, #4]
  }
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af02      	add	r7, sp, #8
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003230:	f7fd ff38 	bl	80010a4 <HAL_GetTick>
 8003234:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b08      	cmp	r3, #8
 8003242:	d10e      	bne.n	8003262 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003244:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f82d 	bl	80032b2 <UART_WaitOnFlagUntilTimeout>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e023      	b.n	80032aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b04      	cmp	r3, #4
 800326e:	d10e      	bne.n	800328e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003270:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f817 	bl	80032b2 <UART_WaitOnFlagUntilTimeout>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e00d      	b.n	80032aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2220      	movs	r2, #32
 8003292:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2220      	movs	r2, #32
 8003298:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b09c      	sub	sp, #112	; 0x70
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	603b      	str	r3, [r7, #0]
 80032be:	4613      	mov	r3, r2
 80032c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032c2:	e0a5      	b.n	8003410 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ca:	f000 80a1 	beq.w	8003410 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ce:	f7fd fee9 	bl	80010a4 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80032da:	429a      	cmp	r2, r3
 80032dc:	d302      	bcc.n	80032e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80032de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d13e      	bne.n	8003362 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ec:	e853 3f00 	ldrex	r3, [r3]
 80032f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80032f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032f8:	667b      	str	r3, [r7, #100]	; 0x64
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	461a      	mov	r2, r3
 8003300:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003302:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003304:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003306:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003308:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800330a:	e841 2300 	strex	r3, r2, [r1]
 800330e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1e6      	bne.n	80032e4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	3308      	adds	r3, #8
 800331c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003320:	e853 3f00 	ldrex	r3, [r3]
 8003324:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003328:	f023 0301 	bic.w	r3, r3, #1
 800332c:	663b      	str	r3, [r7, #96]	; 0x60
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	3308      	adds	r3, #8
 8003334:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003336:	64ba      	str	r2, [r7, #72]	; 0x48
 8003338:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800333c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800333e:	e841 2300 	strex	r3, r2, [r1]
 8003342:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1e5      	bne.n	8003316 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2220      	movs	r2, #32
 8003354:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e067      	b.n	8003432 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	d04f      	beq.n	8003410 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800337a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800337e:	d147      	bne.n	8003410 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003388:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003392:	e853 3f00 	ldrex	r3, [r3]
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800339e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	461a      	mov	r2, r3
 80033a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a8:	637b      	str	r3, [r7, #52]	; 0x34
 80033aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033b0:	e841 2300 	strex	r3, r2, [r1]
 80033b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1e6      	bne.n	800338a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	3308      	adds	r3, #8
 80033c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	e853 3f00 	ldrex	r3, [r3]
 80033ca:	613b      	str	r3, [r7, #16]
   return(result);
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f023 0301 	bic.w	r3, r3, #1
 80033d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	3308      	adds	r3, #8
 80033da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80033dc:	623a      	str	r2, [r7, #32]
 80033de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e0:	69f9      	ldr	r1, [r7, #28]
 80033e2:	6a3a      	ldr	r2, [r7, #32]
 80033e4:	e841 2300 	strex	r3, r2, [r1]
 80033e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1e5      	bne.n	80033bc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2220      	movs	r2, #32
 80033f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2220      	movs	r2, #32
 80033fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2220      	movs	r2, #32
 8003400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e010      	b.n	8003432 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	69da      	ldr	r2, [r3, #28]
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	4013      	ands	r3, r2
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	429a      	cmp	r2, r3
 800341e:	bf0c      	ite	eq
 8003420:	2301      	moveq	r3, #1
 8003422:	2300      	movne	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	461a      	mov	r2, r3
 8003428:	79fb      	ldrb	r3, [r7, #7]
 800342a:	429a      	cmp	r2, r3
 800342c:	f43f af4a 	beq.w	80032c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3770      	adds	r7, #112	; 0x70
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
	...

0800343c <__errno>:
 800343c:	4b01      	ldr	r3, [pc, #4]	; (8003444 <__errno+0x8>)
 800343e:	6818      	ldr	r0, [r3, #0]
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	20000408 	.word	0x20000408

08003448 <getchar>:
 8003448:	4b07      	ldr	r3, [pc, #28]	; (8003468 <getchar+0x20>)
 800344a:	b510      	push	{r4, lr}
 800344c:	681c      	ldr	r4, [r3, #0]
 800344e:	b124      	cbz	r4, 800345a <getchar+0x12>
 8003450:	69a3      	ldr	r3, [r4, #24]
 8003452:	b913      	cbnz	r3, 800345a <getchar+0x12>
 8003454:	4620      	mov	r0, r4
 8003456:	f000 fb8d 	bl	8003b74 <__sinit>
 800345a:	6861      	ldr	r1, [r4, #4]
 800345c:	4620      	mov	r0, r4
 800345e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003462:	f000 bc41 	b.w	8003ce8 <_getc_r>
 8003466:	bf00      	nop
 8003468:	20000408 	.word	0x20000408

0800346c <__libc_init_array>:
 800346c:	b570      	push	{r4, r5, r6, lr}
 800346e:	4d0d      	ldr	r5, [pc, #52]	; (80034a4 <__libc_init_array+0x38>)
 8003470:	4c0d      	ldr	r4, [pc, #52]	; (80034a8 <__libc_init_array+0x3c>)
 8003472:	1b64      	subs	r4, r4, r5
 8003474:	10a4      	asrs	r4, r4, #2
 8003476:	2600      	movs	r6, #0
 8003478:	42a6      	cmp	r6, r4
 800347a:	d109      	bne.n	8003490 <__libc_init_array+0x24>
 800347c:	4d0b      	ldr	r5, [pc, #44]	; (80034ac <__libc_init_array+0x40>)
 800347e:	4c0c      	ldr	r4, [pc, #48]	; (80034b0 <__libc_init_array+0x44>)
 8003480:	f001 ffa0 	bl	80053c4 <_init>
 8003484:	1b64      	subs	r4, r4, r5
 8003486:	10a4      	asrs	r4, r4, #2
 8003488:	2600      	movs	r6, #0
 800348a:	42a6      	cmp	r6, r4
 800348c:	d105      	bne.n	800349a <__libc_init_array+0x2e>
 800348e:	bd70      	pop	{r4, r5, r6, pc}
 8003490:	f855 3b04 	ldr.w	r3, [r5], #4
 8003494:	4798      	blx	r3
 8003496:	3601      	adds	r6, #1
 8003498:	e7ee      	b.n	8003478 <__libc_init_array+0xc>
 800349a:	f855 3b04 	ldr.w	r3, [r5], #4
 800349e:	4798      	blx	r3
 80034a0:	3601      	adds	r6, #1
 80034a2:	e7f2      	b.n	800348a <__libc_init_array+0x1e>
 80034a4:	08005650 	.word	0x08005650
 80034a8:	08005650 	.word	0x08005650
 80034ac:	08005650 	.word	0x08005650
 80034b0:	08005654 	.word	0x08005654

080034b4 <memset>:
 80034b4:	4402      	add	r2, r0
 80034b6:	4603      	mov	r3, r0
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d100      	bne.n	80034be <memset+0xa>
 80034bc:	4770      	bx	lr
 80034be:	f803 1b01 	strb.w	r1, [r3], #1
 80034c2:	e7f9      	b.n	80034b8 <memset+0x4>

080034c4 <iprintf>:
 80034c4:	b40f      	push	{r0, r1, r2, r3}
 80034c6:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <iprintf+0x2c>)
 80034c8:	b513      	push	{r0, r1, r4, lr}
 80034ca:	681c      	ldr	r4, [r3, #0]
 80034cc:	b124      	cbz	r4, 80034d8 <iprintf+0x14>
 80034ce:	69a3      	ldr	r3, [r4, #24]
 80034d0:	b913      	cbnz	r3, 80034d8 <iprintf+0x14>
 80034d2:	4620      	mov	r0, r4
 80034d4:	f000 fb4e 	bl	8003b74 <__sinit>
 80034d8:	ab05      	add	r3, sp, #20
 80034da:	9a04      	ldr	r2, [sp, #16]
 80034dc:	68a1      	ldr	r1, [r4, #8]
 80034de:	9301      	str	r3, [sp, #4]
 80034e0:	4620      	mov	r0, r4
 80034e2:	f000 fdbb 	bl	800405c <_vfiprintf_r>
 80034e6:	b002      	add	sp, #8
 80034e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034ec:	b004      	add	sp, #16
 80034ee:	4770      	bx	lr
 80034f0:	20000408 	.word	0x20000408

080034f4 <_puts_r>:
 80034f4:	b570      	push	{r4, r5, r6, lr}
 80034f6:	460e      	mov	r6, r1
 80034f8:	4605      	mov	r5, r0
 80034fa:	b118      	cbz	r0, 8003504 <_puts_r+0x10>
 80034fc:	6983      	ldr	r3, [r0, #24]
 80034fe:	b90b      	cbnz	r3, 8003504 <_puts_r+0x10>
 8003500:	f000 fb38 	bl	8003b74 <__sinit>
 8003504:	69ab      	ldr	r3, [r5, #24]
 8003506:	68ac      	ldr	r4, [r5, #8]
 8003508:	b913      	cbnz	r3, 8003510 <_puts_r+0x1c>
 800350a:	4628      	mov	r0, r5
 800350c:	f000 fb32 	bl	8003b74 <__sinit>
 8003510:	4b2c      	ldr	r3, [pc, #176]	; (80035c4 <_puts_r+0xd0>)
 8003512:	429c      	cmp	r4, r3
 8003514:	d120      	bne.n	8003558 <_puts_r+0x64>
 8003516:	686c      	ldr	r4, [r5, #4]
 8003518:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800351a:	07db      	lsls	r3, r3, #31
 800351c:	d405      	bmi.n	800352a <_puts_r+0x36>
 800351e:	89a3      	ldrh	r3, [r4, #12]
 8003520:	0598      	lsls	r0, r3, #22
 8003522:	d402      	bmi.n	800352a <_puts_r+0x36>
 8003524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003526:	f000 fc20 	bl	8003d6a <__retarget_lock_acquire_recursive>
 800352a:	89a3      	ldrh	r3, [r4, #12]
 800352c:	0719      	lsls	r1, r3, #28
 800352e:	d51d      	bpl.n	800356c <_puts_r+0x78>
 8003530:	6923      	ldr	r3, [r4, #16]
 8003532:	b1db      	cbz	r3, 800356c <_puts_r+0x78>
 8003534:	3e01      	subs	r6, #1
 8003536:	68a3      	ldr	r3, [r4, #8]
 8003538:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800353c:	3b01      	subs	r3, #1
 800353e:	60a3      	str	r3, [r4, #8]
 8003540:	bb39      	cbnz	r1, 8003592 <_puts_r+0x9e>
 8003542:	2b00      	cmp	r3, #0
 8003544:	da38      	bge.n	80035b8 <_puts_r+0xc4>
 8003546:	4622      	mov	r2, r4
 8003548:	210a      	movs	r1, #10
 800354a:	4628      	mov	r0, r5
 800354c:	f000 f926 	bl	800379c <__swbuf_r>
 8003550:	3001      	adds	r0, #1
 8003552:	d011      	beq.n	8003578 <_puts_r+0x84>
 8003554:	250a      	movs	r5, #10
 8003556:	e011      	b.n	800357c <_puts_r+0x88>
 8003558:	4b1b      	ldr	r3, [pc, #108]	; (80035c8 <_puts_r+0xd4>)
 800355a:	429c      	cmp	r4, r3
 800355c:	d101      	bne.n	8003562 <_puts_r+0x6e>
 800355e:	68ac      	ldr	r4, [r5, #8]
 8003560:	e7da      	b.n	8003518 <_puts_r+0x24>
 8003562:	4b1a      	ldr	r3, [pc, #104]	; (80035cc <_puts_r+0xd8>)
 8003564:	429c      	cmp	r4, r3
 8003566:	bf08      	it	eq
 8003568:	68ec      	ldreq	r4, [r5, #12]
 800356a:	e7d5      	b.n	8003518 <_puts_r+0x24>
 800356c:	4621      	mov	r1, r4
 800356e:	4628      	mov	r0, r5
 8003570:	f000 f966 	bl	8003840 <__swsetup_r>
 8003574:	2800      	cmp	r0, #0
 8003576:	d0dd      	beq.n	8003534 <_puts_r+0x40>
 8003578:	f04f 35ff 	mov.w	r5, #4294967295
 800357c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800357e:	07da      	lsls	r2, r3, #31
 8003580:	d405      	bmi.n	800358e <_puts_r+0x9a>
 8003582:	89a3      	ldrh	r3, [r4, #12]
 8003584:	059b      	lsls	r3, r3, #22
 8003586:	d402      	bmi.n	800358e <_puts_r+0x9a>
 8003588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800358a:	f000 fbef 	bl	8003d6c <__retarget_lock_release_recursive>
 800358e:	4628      	mov	r0, r5
 8003590:	bd70      	pop	{r4, r5, r6, pc}
 8003592:	2b00      	cmp	r3, #0
 8003594:	da04      	bge.n	80035a0 <_puts_r+0xac>
 8003596:	69a2      	ldr	r2, [r4, #24]
 8003598:	429a      	cmp	r2, r3
 800359a:	dc06      	bgt.n	80035aa <_puts_r+0xb6>
 800359c:	290a      	cmp	r1, #10
 800359e:	d004      	beq.n	80035aa <_puts_r+0xb6>
 80035a0:	6823      	ldr	r3, [r4, #0]
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	6022      	str	r2, [r4, #0]
 80035a6:	7019      	strb	r1, [r3, #0]
 80035a8:	e7c5      	b.n	8003536 <_puts_r+0x42>
 80035aa:	4622      	mov	r2, r4
 80035ac:	4628      	mov	r0, r5
 80035ae:	f000 f8f5 	bl	800379c <__swbuf_r>
 80035b2:	3001      	adds	r0, #1
 80035b4:	d1bf      	bne.n	8003536 <_puts_r+0x42>
 80035b6:	e7df      	b.n	8003578 <_puts_r+0x84>
 80035b8:	6823      	ldr	r3, [r4, #0]
 80035ba:	250a      	movs	r5, #10
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	6022      	str	r2, [r4, #0]
 80035c0:	701d      	strb	r5, [r3, #0]
 80035c2:	e7db      	b.n	800357c <_puts_r+0x88>
 80035c4:	080054b8 	.word	0x080054b8
 80035c8:	080054d8 	.word	0x080054d8
 80035cc:	08005498 	.word	0x08005498

080035d0 <puts>:
 80035d0:	4b02      	ldr	r3, [pc, #8]	; (80035dc <puts+0xc>)
 80035d2:	4601      	mov	r1, r0
 80035d4:	6818      	ldr	r0, [r3, #0]
 80035d6:	f7ff bf8d 	b.w	80034f4 <_puts_r>
 80035da:	bf00      	nop
 80035dc:	20000408 	.word	0x20000408

080035e0 <iscanf>:
 80035e0:	b40f      	push	{r0, r1, r2, r3}
 80035e2:	4b0a      	ldr	r3, [pc, #40]	; (800360c <iscanf+0x2c>)
 80035e4:	b513      	push	{r0, r1, r4, lr}
 80035e6:	681c      	ldr	r4, [r3, #0]
 80035e8:	b124      	cbz	r4, 80035f4 <iscanf+0x14>
 80035ea:	69a3      	ldr	r3, [r4, #24]
 80035ec:	b913      	cbnz	r3, 80035f4 <iscanf+0x14>
 80035ee:	4620      	mov	r0, r4
 80035f0:	f000 fac0 	bl	8003b74 <__sinit>
 80035f4:	ab05      	add	r3, sp, #20
 80035f6:	9a04      	ldr	r2, [sp, #16]
 80035f8:	6861      	ldr	r1, [r4, #4]
 80035fa:	9301      	str	r3, [sp, #4]
 80035fc:	4620      	mov	r0, r4
 80035fe:	f001 f997 	bl	8004930 <_vfiscanf_r>
 8003602:	b002      	add	sp, #8
 8003604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003608:	b004      	add	sp, #16
 800360a:	4770      	bx	lr
 800360c:	20000408 	.word	0x20000408

08003610 <setvbuf>:
 8003610:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003614:	461d      	mov	r5, r3
 8003616:	4b5d      	ldr	r3, [pc, #372]	; (800378c <setvbuf+0x17c>)
 8003618:	681f      	ldr	r7, [r3, #0]
 800361a:	4604      	mov	r4, r0
 800361c:	460e      	mov	r6, r1
 800361e:	4690      	mov	r8, r2
 8003620:	b127      	cbz	r7, 800362c <setvbuf+0x1c>
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	b913      	cbnz	r3, 800362c <setvbuf+0x1c>
 8003626:	4638      	mov	r0, r7
 8003628:	f000 faa4 	bl	8003b74 <__sinit>
 800362c:	4b58      	ldr	r3, [pc, #352]	; (8003790 <setvbuf+0x180>)
 800362e:	429c      	cmp	r4, r3
 8003630:	d167      	bne.n	8003702 <setvbuf+0xf2>
 8003632:	687c      	ldr	r4, [r7, #4]
 8003634:	f1b8 0f02 	cmp.w	r8, #2
 8003638:	d006      	beq.n	8003648 <setvbuf+0x38>
 800363a:	f1b8 0f01 	cmp.w	r8, #1
 800363e:	f200 809f 	bhi.w	8003780 <setvbuf+0x170>
 8003642:	2d00      	cmp	r5, #0
 8003644:	f2c0 809c 	blt.w	8003780 <setvbuf+0x170>
 8003648:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800364a:	07db      	lsls	r3, r3, #31
 800364c:	d405      	bmi.n	800365a <setvbuf+0x4a>
 800364e:	89a3      	ldrh	r3, [r4, #12]
 8003650:	0598      	lsls	r0, r3, #22
 8003652:	d402      	bmi.n	800365a <setvbuf+0x4a>
 8003654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003656:	f000 fb88 	bl	8003d6a <__retarget_lock_acquire_recursive>
 800365a:	4621      	mov	r1, r4
 800365c:	4638      	mov	r0, r7
 800365e:	f000 f9e3 	bl	8003a28 <_fflush_r>
 8003662:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003664:	b141      	cbz	r1, 8003678 <setvbuf+0x68>
 8003666:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800366a:	4299      	cmp	r1, r3
 800366c:	d002      	beq.n	8003674 <setvbuf+0x64>
 800366e:	4638      	mov	r0, r7
 8003670:	f000 fbea 	bl	8003e48 <_free_r>
 8003674:	2300      	movs	r3, #0
 8003676:	6363      	str	r3, [r4, #52]	; 0x34
 8003678:	2300      	movs	r3, #0
 800367a:	61a3      	str	r3, [r4, #24]
 800367c:	6063      	str	r3, [r4, #4]
 800367e:	89a3      	ldrh	r3, [r4, #12]
 8003680:	0619      	lsls	r1, r3, #24
 8003682:	d503      	bpl.n	800368c <setvbuf+0x7c>
 8003684:	6921      	ldr	r1, [r4, #16]
 8003686:	4638      	mov	r0, r7
 8003688:	f000 fbde 	bl	8003e48 <_free_r>
 800368c:	89a3      	ldrh	r3, [r4, #12]
 800368e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003692:	f023 0303 	bic.w	r3, r3, #3
 8003696:	f1b8 0f02 	cmp.w	r8, #2
 800369a:	81a3      	strh	r3, [r4, #12]
 800369c:	d06c      	beq.n	8003778 <setvbuf+0x168>
 800369e:	ab01      	add	r3, sp, #4
 80036a0:	466a      	mov	r2, sp
 80036a2:	4621      	mov	r1, r4
 80036a4:	4638      	mov	r0, r7
 80036a6:	f000 fb62 	bl	8003d6e <__swhatbuf_r>
 80036aa:	89a3      	ldrh	r3, [r4, #12]
 80036ac:	4318      	orrs	r0, r3
 80036ae:	81a0      	strh	r0, [r4, #12]
 80036b0:	2d00      	cmp	r5, #0
 80036b2:	d130      	bne.n	8003716 <setvbuf+0x106>
 80036b4:	9d00      	ldr	r5, [sp, #0]
 80036b6:	4628      	mov	r0, r5
 80036b8:	f000 fbbe 	bl	8003e38 <malloc>
 80036bc:	4606      	mov	r6, r0
 80036be:	2800      	cmp	r0, #0
 80036c0:	d155      	bne.n	800376e <setvbuf+0x15e>
 80036c2:	f8dd 9000 	ldr.w	r9, [sp]
 80036c6:	45a9      	cmp	r9, r5
 80036c8:	d14a      	bne.n	8003760 <setvbuf+0x150>
 80036ca:	f04f 35ff 	mov.w	r5, #4294967295
 80036ce:	2200      	movs	r2, #0
 80036d0:	60a2      	str	r2, [r4, #8]
 80036d2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80036d6:	6022      	str	r2, [r4, #0]
 80036d8:	6122      	str	r2, [r4, #16]
 80036da:	2201      	movs	r2, #1
 80036dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036e0:	6162      	str	r2, [r4, #20]
 80036e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80036e4:	f043 0302 	orr.w	r3, r3, #2
 80036e8:	07d2      	lsls	r2, r2, #31
 80036ea:	81a3      	strh	r3, [r4, #12]
 80036ec:	d405      	bmi.n	80036fa <setvbuf+0xea>
 80036ee:	f413 7f00 	tst.w	r3, #512	; 0x200
 80036f2:	d102      	bne.n	80036fa <setvbuf+0xea>
 80036f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036f6:	f000 fb39 	bl	8003d6c <__retarget_lock_release_recursive>
 80036fa:	4628      	mov	r0, r5
 80036fc:	b003      	add	sp, #12
 80036fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003702:	4b24      	ldr	r3, [pc, #144]	; (8003794 <setvbuf+0x184>)
 8003704:	429c      	cmp	r4, r3
 8003706:	d101      	bne.n	800370c <setvbuf+0xfc>
 8003708:	68bc      	ldr	r4, [r7, #8]
 800370a:	e793      	b.n	8003634 <setvbuf+0x24>
 800370c:	4b22      	ldr	r3, [pc, #136]	; (8003798 <setvbuf+0x188>)
 800370e:	429c      	cmp	r4, r3
 8003710:	bf08      	it	eq
 8003712:	68fc      	ldreq	r4, [r7, #12]
 8003714:	e78e      	b.n	8003634 <setvbuf+0x24>
 8003716:	2e00      	cmp	r6, #0
 8003718:	d0cd      	beq.n	80036b6 <setvbuf+0xa6>
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	b913      	cbnz	r3, 8003724 <setvbuf+0x114>
 800371e:	4638      	mov	r0, r7
 8003720:	f000 fa28 	bl	8003b74 <__sinit>
 8003724:	f1b8 0f01 	cmp.w	r8, #1
 8003728:	bf08      	it	eq
 800372a:	89a3      	ldrheq	r3, [r4, #12]
 800372c:	6026      	str	r6, [r4, #0]
 800372e:	bf04      	itt	eq
 8003730:	f043 0301 	orreq.w	r3, r3, #1
 8003734:	81a3      	strheq	r3, [r4, #12]
 8003736:	89a2      	ldrh	r2, [r4, #12]
 8003738:	f012 0308 	ands.w	r3, r2, #8
 800373c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003740:	d01c      	beq.n	800377c <setvbuf+0x16c>
 8003742:	07d3      	lsls	r3, r2, #31
 8003744:	bf41      	itttt	mi
 8003746:	2300      	movmi	r3, #0
 8003748:	426d      	negmi	r5, r5
 800374a:	60a3      	strmi	r3, [r4, #8]
 800374c:	61a5      	strmi	r5, [r4, #24]
 800374e:	bf58      	it	pl
 8003750:	60a5      	strpl	r5, [r4, #8]
 8003752:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003754:	f015 0501 	ands.w	r5, r5, #1
 8003758:	d115      	bne.n	8003786 <setvbuf+0x176>
 800375a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800375e:	e7c8      	b.n	80036f2 <setvbuf+0xe2>
 8003760:	4648      	mov	r0, r9
 8003762:	f000 fb69 	bl	8003e38 <malloc>
 8003766:	4606      	mov	r6, r0
 8003768:	2800      	cmp	r0, #0
 800376a:	d0ae      	beq.n	80036ca <setvbuf+0xba>
 800376c:	464d      	mov	r5, r9
 800376e:	89a3      	ldrh	r3, [r4, #12]
 8003770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003774:	81a3      	strh	r3, [r4, #12]
 8003776:	e7d0      	b.n	800371a <setvbuf+0x10a>
 8003778:	2500      	movs	r5, #0
 800377a:	e7a8      	b.n	80036ce <setvbuf+0xbe>
 800377c:	60a3      	str	r3, [r4, #8]
 800377e:	e7e8      	b.n	8003752 <setvbuf+0x142>
 8003780:	f04f 35ff 	mov.w	r5, #4294967295
 8003784:	e7b9      	b.n	80036fa <setvbuf+0xea>
 8003786:	2500      	movs	r5, #0
 8003788:	e7b7      	b.n	80036fa <setvbuf+0xea>
 800378a:	bf00      	nop
 800378c:	20000408 	.word	0x20000408
 8003790:	080054b8 	.word	0x080054b8
 8003794:	080054d8 	.word	0x080054d8
 8003798:	08005498 	.word	0x08005498

0800379c <__swbuf_r>:
 800379c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379e:	460e      	mov	r6, r1
 80037a0:	4614      	mov	r4, r2
 80037a2:	4605      	mov	r5, r0
 80037a4:	b118      	cbz	r0, 80037ae <__swbuf_r+0x12>
 80037a6:	6983      	ldr	r3, [r0, #24]
 80037a8:	b90b      	cbnz	r3, 80037ae <__swbuf_r+0x12>
 80037aa:	f000 f9e3 	bl	8003b74 <__sinit>
 80037ae:	4b21      	ldr	r3, [pc, #132]	; (8003834 <__swbuf_r+0x98>)
 80037b0:	429c      	cmp	r4, r3
 80037b2:	d12b      	bne.n	800380c <__swbuf_r+0x70>
 80037b4:	686c      	ldr	r4, [r5, #4]
 80037b6:	69a3      	ldr	r3, [r4, #24]
 80037b8:	60a3      	str	r3, [r4, #8]
 80037ba:	89a3      	ldrh	r3, [r4, #12]
 80037bc:	071a      	lsls	r2, r3, #28
 80037be:	d52f      	bpl.n	8003820 <__swbuf_r+0x84>
 80037c0:	6923      	ldr	r3, [r4, #16]
 80037c2:	b36b      	cbz	r3, 8003820 <__swbuf_r+0x84>
 80037c4:	6923      	ldr	r3, [r4, #16]
 80037c6:	6820      	ldr	r0, [r4, #0]
 80037c8:	1ac0      	subs	r0, r0, r3
 80037ca:	6963      	ldr	r3, [r4, #20]
 80037cc:	b2f6      	uxtb	r6, r6
 80037ce:	4283      	cmp	r3, r0
 80037d0:	4637      	mov	r7, r6
 80037d2:	dc04      	bgt.n	80037de <__swbuf_r+0x42>
 80037d4:	4621      	mov	r1, r4
 80037d6:	4628      	mov	r0, r5
 80037d8:	f000 f926 	bl	8003a28 <_fflush_r>
 80037dc:	bb30      	cbnz	r0, 800382c <__swbuf_r+0x90>
 80037de:	68a3      	ldr	r3, [r4, #8]
 80037e0:	3b01      	subs	r3, #1
 80037e2:	60a3      	str	r3, [r4, #8]
 80037e4:	6823      	ldr	r3, [r4, #0]
 80037e6:	1c5a      	adds	r2, r3, #1
 80037e8:	6022      	str	r2, [r4, #0]
 80037ea:	701e      	strb	r6, [r3, #0]
 80037ec:	6963      	ldr	r3, [r4, #20]
 80037ee:	3001      	adds	r0, #1
 80037f0:	4283      	cmp	r3, r0
 80037f2:	d004      	beq.n	80037fe <__swbuf_r+0x62>
 80037f4:	89a3      	ldrh	r3, [r4, #12]
 80037f6:	07db      	lsls	r3, r3, #31
 80037f8:	d506      	bpl.n	8003808 <__swbuf_r+0x6c>
 80037fa:	2e0a      	cmp	r6, #10
 80037fc:	d104      	bne.n	8003808 <__swbuf_r+0x6c>
 80037fe:	4621      	mov	r1, r4
 8003800:	4628      	mov	r0, r5
 8003802:	f000 f911 	bl	8003a28 <_fflush_r>
 8003806:	b988      	cbnz	r0, 800382c <__swbuf_r+0x90>
 8003808:	4638      	mov	r0, r7
 800380a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800380c:	4b0a      	ldr	r3, [pc, #40]	; (8003838 <__swbuf_r+0x9c>)
 800380e:	429c      	cmp	r4, r3
 8003810:	d101      	bne.n	8003816 <__swbuf_r+0x7a>
 8003812:	68ac      	ldr	r4, [r5, #8]
 8003814:	e7cf      	b.n	80037b6 <__swbuf_r+0x1a>
 8003816:	4b09      	ldr	r3, [pc, #36]	; (800383c <__swbuf_r+0xa0>)
 8003818:	429c      	cmp	r4, r3
 800381a:	bf08      	it	eq
 800381c:	68ec      	ldreq	r4, [r5, #12]
 800381e:	e7ca      	b.n	80037b6 <__swbuf_r+0x1a>
 8003820:	4621      	mov	r1, r4
 8003822:	4628      	mov	r0, r5
 8003824:	f000 f80c 	bl	8003840 <__swsetup_r>
 8003828:	2800      	cmp	r0, #0
 800382a:	d0cb      	beq.n	80037c4 <__swbuf_r+0x28>
 800382c:	f04f 37ff 	mov.w	r7, #4294967295
 8003830:	e7ea      	b.n	8003808 <__swbuf_r+0x6c>
 8003832:	bf00      	nop
 8003834:	080054b8 	.word	0x080054b8
 8003838:	080054d8 	.word	0x080054d8
 800383c:	08005498 	.word	0x08005498

08003840 <__swsetup_r>:
 8003840:	4b32      	ldr	r3, [pc, #200]	; (800390c <__swsetup_r+0xcc>)
 8003842:	b570      	push	{r4, r5, r6, lr}
 8003844:	681d      	ldr	r5, [r3, #0]
 8003846:	4606      	mov	r6, r0
 8003848:	460c      	mov	r4, r1
 800384a:	b125      	cbz	r5, 8003856 <__swsetup_r+0x16>
 800384c:	69ab      	ldr	r3, [r5, #24]
 800384e:	b913      	cbnz	r3, 8003856 <__swsetup_r+0x16>
 8003850:	4628      	mov	r0, r5
 8003852:	f000 f98f 	bl	8003b74 <__sinit>
 8003856:	4b2e      	ldr	r3, [pc, #184]	; (8003910 <__swsetup_r+0xd0>)
 8003858:	429c      	cmp	r4, r3
 800385a:	d10f      	bne.n	800387c <__swsetup_r+0x3c>
 800385c:	686c      	ldr	r4, [r5, #4]
 800385e:	89a3      	ldrh	r3, [r4, #12]
 8003860:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003864:	0719      	lsls	r1, r3, #28
 8003866:	d42c      	bmi.n	80038c2 <__swsetup_r+0x82>
 8003868:	06dd      	lsls	r5, r3, #27
 800386a:	d411      	bmi.n	8003890 <__swsetup_r+0x50>
 800386c:	2309      	movs	r3, #9
 800386e:	6033      	str	r3, [r6, #0]
 8003870:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003874:	81a3      	strh	r3, [r4, #12]
 8003876:	f04f 30ff 	mov.w	r0, #4294967295
 800387a:	e03e      	b.n	80038fa <__swsetup_r+0xba>
 800387c:	4b25      	ldr	r3, [pc, #148]	; (8003914 <__swsetup_r+0xd4>)
 800387e:	429c      	cmp	r4, r3
 8003880:	d101      	bne.n	8003886 <__swsetup_r+0x46>
 8003882:	68ac      	ldr	r4, [r5, #8]
 8003884:	e7eb      	b.n	800385e <__swsetup_r+0x1e>
 8003886:	4b24      	ldr	r3, [pc, #144]	; (8003918 <__swsetup_r+0xd8>)
 8003888:	429c      	cmp	r4, r3
 800388a:	bf08      	it	eq
 800388c:	68ec      	ldreq	r4, [r5, #12]
 800388e:	e7e6      	b.n	800385e <__swsetup_r+0x1e>
 8003890:	0758      	lsls	r0, r3, #29
 8003892:	d512      	bpl.n	80038ba <__swsetup_r+0x7a>
 8003894:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003896:	b141      	cbz	r1, 80038aa <__swsetup_r+0x6a>
 8003898:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800389c:	4299      	cmp	r1, r3
 800389e:	d002      	beq.n	80038a6 <__swsetup_r+0x66>
 80038a0:	4630      	mov	r0, r6
 80038a2:	f000 fad1 	bl	8003e48 <_free_r>
 80038a6:	2300      	movs	r3, #0
 80038a8:	6363      	str	r3, [r4, #52]	; 0x34
 80038aa:	89a3      	ldrh	r3, [r4, #12]
 80038ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80038b0:	81a3      	strh	r3, [r4, #12]
 80038b2:	2300      	movs	r3, #0
 80038b4:	6063      	str	r3, [r4, #4]
 80038b6:	6923      	ldr	r3, [r4, #16]
 80038b8:	6023      	str	r3, [r4, #0]
 80038ba:	89a3      	ldrh	r3, [r4, #12]
 80038bc:	f043 0308 	orr.w	r3, r3, #8
 80038c0:	81a3      	strh	r3, [r4, #12]
 80038c2:	6923      	ldr	r3, [r4, #16]
 80038c4:	b94b      	cbnz	r3, 80038da <__swsetup_r+0x9a>
 80038c6:	89a3      	ldrh	r3, [r4, #12]
 80038c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80038cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038d0:	d003      	beq.n	80038da <__swsetup_r+0x9a>
 80038d2:	4621      	mov	r1, r4
 80038d4:	4630      	mov	r0, r6
 80038d6:	f000 fa6f 	bl	8003db8 <__smakebuf_r>
 80038da:	89a0      	ldrh	r0, [r4, #12]
 80038dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038e0:	f010 0301 	ands.w	r3, r0, #1
 80038e4:	d00a      	beq.n	80038fc <__swsetup_r+0xbc>
 80038e6:	2300      	movs	r3, #0
 80038e8:	60a3      	str	r3, [r4, #8]
 80038ea:	6963      	ldr	r3, [r4, #20]
 80038ec:	425b      	negs	r3, r3
 80038ee:	61a3      	str	r3, [r4, #24]
 80038f0:	6923      	ldr	r3, [r4, #16]
 80038f2:	b943      	cbnz	r3, 8003906 <__swsetup_r+0xc6>
 80038f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80038f8:	d1ba      	bne.n	8003870 <__swsetup_r+0x30>
 80038fa:	bd70      	pop	{r4, r5, r6, pc}
 80038fc:	0781      	lsls	r1, r0, #30
 80038fe:	bf58      	it	pl
 8003900:	6963      	ldrpl	r3, [r4, #20]
 8003902:	60a3      	str	r3, [r4, #8]
 8003904:	e7f4      	b.n	80038f0 <__swsetup_r+0xb0>
 8003906:	2000      	movs	r0, #0
 8003908:	e7f7      	b.n	80038fa <__swsetup_r+0xba>
 800390a:	bf00      	nop
 800390c:	20000408 	.word	0x20000408
 8003910:	080054b8 	.word	0x080054b8
 8003914:	080054d8 	.word	0x080054d8
 8003918:	08005498 	.word	0x08005498

0800391c <__sflush_r>:
 800391c:	898a      	ldrh	r2, [r1, #12]
 800391e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003922:	4605      	mov	r5, r0
 8003924:	0710      	lsls	r0, r2, #28
 8003926:	460c      	mov	r4, r1
 8003928:	d458      	bmi.n	80039dc <__sflush_r+0xc0>
 800392a:	684b      	ldr	r3, [r1, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	dc05      	bgt.n	800393c <__sflush_r+0x20>
 8003930:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003932:	2b00      	cmp	r3, #0
 8003934:	dc02      	bgt.n	800393c <__sflush_r+0x20>
 8003936:	2000      	movs	r0, #0
 8003938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800393c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800393e:	2e00      	cmp	r6, #0
 8003940:	d0f9      	beq.n	8003936 <__sflush_r+0x1a>
 8003942:	2300      	movs	r3, #0
 8003944:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003948:	682f      	ldr	r7, [r5, #0]
 800394a:	602b      	str	r3, [r5, #0]
 800394c:	d032      	beq.n	80039b4 <__sflush_r+0x98>
 800394e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003950:	89a3      	ldrh	r3, [r4, #12]
 8003952:	075a      	lsls	r2, r3, #29
 8003954:	d505      	bpl.n	8003962 <__sflush_r+0x46>
 8003956:	6863      	ldr	r3, [r4, #4]
 8003958:	1ac0      	subs	r0, r0, r3
 800395a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800395c:	b10b      	cbz	r3, 8003962 <__sflush_r+0x46>
 800395e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003960:	1ac0      	subs	r0, r0, r3
 8003962:	2300      	movs	r3, #0
 8003964:	4602      	mov	r2, r0
 8003966:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003968:	6a21      	ldr	r1, [r4, #32]
 800396a:	4628      	mov	r0, r5
 800396c:	47b0      	blx	r6
 800396e:	1c43      	adds	r3, r0, #1
 8003970:	89a3      	ldrh	r3, [r4, #12]
 8003972:	d106      	bne.n	8003982 <__sflush_r+0x66>
 8003974:	6829      	ldr	r1, [r5, #0]
 8003976:	291d      	cmp	r1, #29
 8003978:	d82c      	bhi.n	80039d4 <__sflush_r+0xb8>
 800397a:	4a2a      	ldr	r2, [pc, #168]	; (8003a24 <__sflush_r+0x108>)
 800397c:	40ca      	lsrs	r2, r1
 800397e:	07d6      	lsls	r6, r2, #31
 8003980:	d528      	bpl.n	80039d4 <__sflush_r+0xb8>
 8003982:	2200      	movs	r2, #0
 8003984:	6062      	str	r2, [r4, #4]
 8003986:	04d9      	lsls	r1, r3, #19
 8003988:	6922      	ldr	r2, [r4, #16]
 800398a:	6022      	str	r2, [r4, #0]
 800398c:	d504      	bpl.n	8003998 <__sflush_r+0x7c>
 800398e:	1c42      	adds	r2, r0, #1
 8003990:	d101      	bne.n	8003996 <__sflush_r+0x7a>
 8003992:	682b      	ldr	r3, [r5, #0]
 8003994:	b903      	cbnz	r3, 8003998 <__sflush_r+0x7c>
 8003996:	6560      	str	r0, [r4, #84]	; 0x54
 8003998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800399a:	602f      	str	r7, [r5, #0]
 800399c:	2900      	cmp	r1, #0
 800399e:	d0ca      	beq.n	8003936 <__sflush_r+0x1a>
 80039a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039a4:	4299      	cmp	r1, r3
 80039a6:	d002      	beq.n	80039ae <__sflush_r+0x92>
 80039a8:	4628      	mov	r0, r5
 80039aa:	f000 fa4d 	bl	8003e48 <_free_r>
 80039ae:	2000      	movs	r0, #0
 80039b0:	6360      	str	r0, [r4, #52]	; 0x34
 80039b2:	e7c1      	b.n	8003938 <__sflush_r+0x1c>
 80039b4:	6a21      	ldr	r1, [r4, #32]
 80039b6:	2301      	movs	r3, #1
 80039b8:	4628      	mov	r0, r5
 80039ba:	47b0      	blx	r6
 80039bc:	1c41      	adds	r1, r0, #1
 80039be:	d1c7      	bne.n	8003950 <__sflush_r+0x34>
 80039c0:	682b      	ldr	r3, [r5, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0c4      	beq.n	8003950 <__sflush_r+0x34>
 80039c6:	2b1d      	cmp	r3, #29
 80039c8:	d001      	beq.n	80039ce <__sflush_r+0xb2>
 80039ca:	2b16      	cmp	r3, #22
 80039cc:	d101      	bne.n	80039d2 <__sflush_r+0xb6>
 80039ce:	602f      	str	r7, [r5, #0]
 80039d0:	e7b1      	b.n	8003936 <__sflush_r+0x1a>
 80039d2:	89a3      	ldrh	r3, [r4, #12]
 80039d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039d8:	81a3      	strh	r3, [r4, #12]
 80039da:	e7ad      	b.n	8003938 <__sflush_r+0x1c>
 80039dc:	690f      	ldr	r7, [r1, #16]
 80039de:	2f00      	cmp	r7, #0
 80039e0:	d0a9      	beq.n	8003936 <__sflush_r+0x1a>
 80039e2:	0793      	lsls	r3, r2, #30
 80039e4:	680e      	ldr	r6, [r1, #0]
 80039e6:	bf08      	it	eq
 80039e8:	694b      	ldreq	r3, [r1, #20]
 80039ea:	600f      	str	r7, [r1, #0]
 80039ec:	bf18      	it	ne
 80039ee:	2300      	movne	r3, #0
 80039f0:	eba6 0807 	sub.w	r8, r6, r7
 80039f4:	608b      	str	r3, [r1, #8]
 80039f6:	f1b8 0f00 	cmp.w	r8, #0
 80039fa:	dd9c      	ble.n	8003936 <__sflush_r+0x1a>
 80039fc:	6a21      	ldr	r1, [r4, #32]
 80039fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003a00:	4643      	mov	r3, r8
 8003a02:	463a      	mov	r2, r7
 8003a04:	4628      	mov	r0, r5
 8003a06:	47b0      	blx	r6
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	dc06      	bgt.n	8003a1a <__sflush_r+0xfe>
 8003a0c:	89a3      	ldrh	r3, [r4, #12]
 8003a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a12:	81a3      	strh	r3, [r4, #12]
 8003a14:	f04f 30ff 	mov.w	r0, #4294967295
 8003a18:	e78e      	b.n	8003938 <__sflush_r+0x1c>
 8003a1a:	4407      	add	r7, r0
 8003a1c:	eba8 0800 	sub.w	r8, r8, r0
 8003a20:	e7e9      	b.n	80039f6 <__sflush_r+0xda>
 8003a22:	bf00      	nop
 8003a24:	20400001 	.word	0x20400001

08003a28 <_fflush_r>:
 8003a28:	b538      	push	{r3, r4, r5, lr}
 8003a2a:	690b      	ldr	r3, [r1, #16]
 8003a2c:	4605      	mov	r5, r0
 8003a2e:	460c      	mov	r4, r1
 8003a30:	b913      	cbnz	r3, 8003a38 <_fflush_r+0x10>
 8003a32:	2500      	movs	r5, #0
 8003a34:	4628      	mov	r0, r5
 8003a36:	bd38      	pop	{r3, r4, r5, pc}
 8003a38:	b118      	cbz	r0, 8003a42 <_fflush_r+0x1a>
 8003a3a:	6983      	ldr	r3, [r0, #24]
 8003a3c:	b90b      	cbnz	r3, 8003a42 <_fflush_r+0x1a>
 8003a3e:	f000 f899 	bl	8003b74 <__sinit>
 8003a42:	4b14      	ldr	r3, [pc, #80]	; (8003a94 <_fflush_r+0x6c>)
 8003a44:	429c      	cmp	r4, r3
 8003a46:	d11b      	bne.n	8003a80 <_fflush_r+0x58>
 8003a48:	686c      	ldr	r4, [r5, #4]
 8003a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0ef      	beq.n	8003a32 <_fflush_r+0xa>
 8003a52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003a54:	07d0      	lsls	r0, r2, #31
 8003a56:	d404      	bmi.n	8003a62 <_fflush_r+0x3a>
 8003a58:	0599      	lsls	r1, r3, #22
 8003a5a:	d402      	bmi.n	8003a62 <_fflush_r+0x3a>
 8003a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a5e:	f000 f984 	bl	8003d6a <__retarget_lock_acquire_recursive>
 8003a62:	4628      	mov	r0, r5
 8003a64:	4621      	mov	r1, r4
 8003a66:	f7ff ff59 	bl	800391c <__sflush_r>
 8003a6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a6c:	07da      	lsls	r2, r3, #31
 8003a6e:	4605      	mov	r5, r0
 8003a70:	d4e0      	bmi.n	8003a34 <_fflush_r+0xc>
 8003a72:	89a3      	ldrh	r3, [r4, #12]
 8003a74:	059b      	lsls	r3, r3, #22
 8003a76:	d4dd      	bmi.n	8003a34 <_fflush_r+0xc>
 8003a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a7a:	f000 f977 	bl	8003d6c <__retarget_lock_release_recursive>
 8003a7e:	e7d9      	b.n	8003a34 <_fflush_r+0xc>
 8003a80:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <_fflush_r+0x70>)
 8003a82:	429c      	cmp	r4, r3
 8003a84:	d101      	bne.n	8003a8a <_fflush_r+0x62>
 8003a86:	68ac      	ldr	r4, [r5, #8]
 8003a88:	e7df      	b.n	8003a4a <_fflush_r+0x22>
 8003a8a:	4b04      	ldr	r3, [pc, #16]	; (8003a9c <_fflush_r+0x74>)
 8003a8c:	429c      	cmp	r4, r3
 8003a8e:	bf08      	it	eq
 8003a90:	68ec      	ldreq	r4, [r5, #12]
 8003a92:	e7da      	b.n	8003a4a <_fflush_r+0x22>
 8003a94:	080054b8 	.word	0x080054b8
 8003a98:	080054d8 	.word	0x080054d8
 8003a9c:	08005498 	.word	0x08005498

08003aa0 <fflush>:
 8003aa0:	4601      	mov	r1, r0
 8003aa2:	b920      	cbnz	r0, 8003aae <fflush+0xe>
 8003aa4:	4b04      	ldr	r3, [pc, #16]	; (8003ab8 <fflush+0x18>)
 8003aa6:	4905      	ldr	r1, [pc, #20]	; (8003abc <fflush+0x1c>)
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	f000 b8fe 	b.w	8003caa <_fwalk_reent>
 8003aae:	4b04      	ldr	r3, [pc, #16]	; (8003ac0 <fflush+0x20>)
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	f7ff bfb9 	b.w	8003a28 <_fflush_r>
 8003ab6:	bf00      	nop
 8003ab8:	08005494 	.word	0x08005494
 8003abc:	08003a29 	.word	0x08003a29
 8003ac0:	20000408 	.word	0x20000408

08003ac4 <std>:
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	b510      	push	{r4, lr}
 8003ac8:	4604      	mov	r4, r0
 8003aca:	e9c0 3300 	strd	r3, r3, [r0]
 8003ace:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ad2:	6083      	str	r3, [r0, #8]
 8003ad4:	8181      	strh	r1, [r0, #12]
 8003ad6:	6643      	str	r3, [r0, #100]	; 0x64
 8003ad8:	81c2      	strh	r2, [r0, #14]
 8003ada:	6183      	str	r3, [r0, #24]
 8003adc:	4619      	mov	r1, r3
 8003ade:	2208      	movs	r2, #8
 8003ae0:	305c      	adds	r0, #92	; 0x5c
 8003ae2:	f7ff fce7 	bl	80034b4 <memset>
 8003ae6:	4b05      	ldr	r3, [pc, #20]	; (8003afc <std+0x38>)
 8003ae8:	6263      	str	r3, [r4, #36]	; 0x24
 8003aea:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <std+0x3c>)
 8003aec:	62a3      	str	r3, [r4, #40]	; 0x28
 8003aee:	4b05      	ldr	r3, [pc, #20]	; (8003b04 <std+0x40>)
 8003af0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003af2:	4b05      	ldr	r3, [pc, #20]	; (8003b08 <std+0x44>)
 8003af4:	6224      	str	r4, [r4, #32]
 8003af6:	6323      	str	r3, [r4, #48]	; 0x30
 8003af8:	bd10      	pop	{r4, pc}
 8003afa:	bf00      	nop
 8003afc:	08004e35 	.word	0x08004e35
 8003b00:	08004e57 	.word	0x08004e57
 8003b04:	08004e8f 	.word	0x08004e8f
 8003b08:	08004eb3 	.word	0x08004eb3

08003b0c <_cleanup_r>:
 8003b0c:	4901      	ldr	r1, [pc, #4]	; (8003b14 <_cleanup_r+0x8>)
 8003b0e:	f000 b8cc 	b.w	8003caa <_fwalk_reent>
 8003b12:	bf00      	nop
 8003b14:	08003a29 	.word	0x08003a29

08003b18 <__sfmoreglue>:
 8003b18:	b570      	push	{r4, r5, r6, lr}
 8003b1a:	2268      	movs	r2, #104	; 0x68
 8003b1c:	1e4d      	subs	r5, r1, #1
 8003b1e:	4355      	muls	r5, r2
 8003b20:	460e      	mov	r6, r1
 8003b22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003b26:	f000 f9fb 	bl	8003f20 <_malloc_r>
 8003b2a:	4604      	mov	r4, r0
 8003b2c:	b140      	cbz	r0, 8003b40 <__sfmoreglue+0x28>
 8003b2e:	2100      	movs	r1, #0
 8003b30:	e9c0 1600 	strd	r1, r6, [r0]
 8003b34:	300c      	adds	r0, #12
 8003b36:	60a0      	str	r0, [r4, #8]
 8003b38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003b3c:	f7ff fcba 	bl	80034b4 <memset>
 8003b40:	4620      	mov	r0, r4
 8003b42:	bd70      	pop	{r4, r5, r6, pc}

08003b44 <__sfp_lock_acquire>:
 8003b44:	4801      	ldr	r0, [pc, #4]	; (8003b4c <__sfp_lock_acquire+0x8>)
 8003b46:	f000 b910 	b.w	8003d6a <__retarget_lock_acquire_recursive>
 8003b4a:	bf00      	nop
 8003b4c:	2000051d 	.word	0x2000051d

08003b50 <__sfp_lock_release>:
 8003b50:	4801      	ldr	r0, [pc, #4]	; (8003b58 <__sfp_lock_release+0x8>)
 8003b52:	f000 b90b 	b.w	8003d6c <__retarget_lock_release_recursive>
 8003b56:	bf00      	nop
 8003b58:	2000051d 	.word	0x2000051d

08003b5c <__sinit_lock_acquire>:
 8003b5c:	4801      	ldr	r0, [pc, #4]	; (8003b64 <__sinit_lock_acquire+0x8>)
 8003b5e:	f000 b904 	b.w	8003d6a <__retarget_lock_acquire_recursive>
 8003b62:	bf00      	nop
 8003b64:	2000051e 	.word	0x2000051e

08003b68 <__sinit_lock_release>:
 8003b68:	4801      	ldr	r0, [pc, #4]	; (8003b70 <__sinit_lock_release+0x8>)
 8003b6a:	f000 b8ff 	b.w	8003d6c <__retarget_lock_release_recursive>
 8003b6e:	bf00      	nop
 8003b70:	2000051e 	.word	0x2000051e

08003b74 <__sinit>:
 8003b74:	b510      	push	{r4, lr}
 8003b76:	4604      	mov	r4, r0
 8003b78:	f7ff fff0 	bl	8003b5c <__sinit_lock_acquire>
 8003b7c:	69a3      	ldr	r3, [r4, #24]
 8003b7e:	b11b      	cbz	r3, 8003b88 <__sinit+0x14>
 8003b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b84:	f7ff bff0 	b.w	8003b68 <__sinit_lock_release>
 8003b88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003b8c:	6523      	str	r3, [r4, #80]	; 0x50
 8003b8e:	4b13      	ldr	r3, [pc, #76]	; (8003bdc <__sinit+0x68>)
 8003b90:	4a13      	ldr	r2, [pc, #76]	; (8003be0 <__sinit+0x6c>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	62a2      	str	r2, [r4, #40]	; 0x28
 8003b96:	42a3      	cmp	r3, r4
 8003b98:	bf04      	itt	eq
 8003b9a:	2301      	moveq	r3, #1
 8003b9c:	61a3      	streq	r3, [r4, #24]
 8003b9e:	4620      	mov	r0, r4
 8003ba0:	f000 f820 	bl	8003be4 <__sfp>
 8003ba4:	6060      	str	r0, [r4, #4]
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	f000 f81c 	bl	8003be4 <__sfp>
 8003bac:	60a0      	str	r0, [r4, #8]
 8003bae:	4620      	mov	r0, r4
 8003bb0:	f000 f818 	bl	8003be4 <__sfp>
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	60e0      	str	r0, [r4, #12]
 8003bb8:	2104      	movs	r1, #4
 8003bba:	6860      	ldr	r0, [r4, #4]
 8003bbc:	f7ff ff82 	bl	8003ac4 <std>
 8003bc0:	68a0      	ldr	r0, [r4, #8]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	2109      	movs	r1, #9
 8003bc6:	f7ff ff7d 	bl	8003ac4 <std>
 8003bca:	68e0      	ldr	r0, [r4, #12]
 8003bcc:	2202      	movs	r2, #2
 8003bce:	2112      	movs	r1, #18
 8003bd0:	f7ff ff78 	bl	8003ac4 <std>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	61a3      	str	r3, [r4, #24]
 8003bd8:	e7d2      	b.n	8003b80 <__sinit+0xc>
 8003bda:	bf00      	nop
 8003bdc:	08005494 	.word	0x08005494
 8003be0:	08003b0d 	.word	0x08003b0d

08003be4 <__sfp>:
 8003be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be6:	4607      	mov	r7, r0
 8003be8:	f7ff ffac 	bl	8003b44 <__sfp_lock_acquire>
 8003bec:	4b1e      	ldr	r3, [pc, #120]	; (8003c68 <__sfp+0x84>)
 8003bee:	681e      	ldr	r6, [r3, #0]
 8003bf0:	69b3      	ldr	r3, [r6, #24]
 8003bf2:	b913      	cbnz	r3, 8003bfa <__sfp+0x16>
 8003bf4:	4630      	mov	r0, r6
 8003bf6:	f7ff ffbd 	bl	8003b74 <__sinit>
 8003bfa:	3648      	adds	r6, #72	; 0x48
 8003bfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003c00:	3b01      	subs	r3, #1
 8003c02:	d503      	bpl.n	8003c0c <__sfp+0x28>
 8003c04:	6833      	ldr	r3, [r6, #0]
 8003c06:	b30b      	cbz	r3, 8003c4c <__sfp+0x68>
 8003c08:	6836      	ldr	r6, [r6, #0]
 8003c0a:	e7f7      	b.n	8003bfc <__sfp+0x18>
 8003c0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003c10:	b9d5      	cbnz	r5, 8003c48 <__sfp+0x64>
 8003c12:	4b16      	ldr	r3, [pc, #88]	; (8003c6c <__sfp+0x88>)
 8003c14:	60e3      	str	r3, [r4, #12]
 8003c16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003c1a:	6665      	str	r5, [r4, #100]	; 0x64
 8003c1c:	f000 f8a4 	bl	8003d68 <__retarget_lock_init_recursive>
 8003c20:	f7ff ff96 	bl	8003b50 <__sfp_lock_release>
 8003c24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003c28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003c2c:	6025      	str	r5, [r4, #0]
 8003c2e:	61a5      	str	r5, [r4, #24]
 8003c30:	2208      	movs	r2, #8
 8003c32:	4629      	mov	r1, r5
 8003c34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003c38:	f7ff fc3c 	bl	80034b4 <memset>
 8003c3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003c40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003c44:	4620      	mov	r0, r4
 8003c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c48:	3468      	adds	r4, #104	; 0x68
 8003c4a:	e7d9      	b.n	8003c00 <__sfp+0x1c>
 8003c4c:	2104      	movs	r1, #4
 8003c4e:	4638      	mov	r0, r7
 8003c50:	f7ff ff62 	bl	8003b18 <__sfmoreglue>
 8003c54:	4604      	mov	r4, r0
 8003c56:	6030      	str	r0, [r6, #0]
 8003c58:	2800      	cmp	r0, #0
 8003c5a:	d1d5      	bne.n	8003c08 <__sfp+0x24>
 8003c5c:	f7ff ff78 	bl	8003b50 <__sfp_lock_release>
 8003c60:	230c      	movs	r3, #12
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	e7ee      	b.n	8003c44 <__sfp+0x60>
 8003c66:	bf00      	nop
 8003c68:	08005494 	.word	0x08005494
 8003c6c:	ffff0001 	.word	0xffff0001

08003c70 <_fwalk>:
 8003c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c74:	460f      	mov	r7, r1
 8003c76:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003c7a:	2600      	movs	r6, #0
 8003c7c:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8003c80:	f1b8 0801 	subs.w	r8, r8, #1
 8003c84:	d505      	bpl.n	8003c92 <_fwalk+0x22>
 8003c86:	6824      	ldr	r4, [r4, #0]
 8003c88:	2c00      	cmp	r4, #0
 8003c8a:	d1f7      	bne.n	8003c7c <_fwalk+0xc>
 8003c8c:	4630      	mov	r0, r6
 8003c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c92:	89ab      	ldrh	r3, [r5, #12]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d906      	bls.n	8003ca6 <_fwalk+0x36>
 8003c98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	d002      	beq.n	8003ca6 <_fwalk+0x36>
 8003ca0:	4628      	mov	r0, r5
 8003ca2:	47b8      	blx	r7
 8003ca4:	4306      	orrs	r6, r0
 8003ca6:	3568      	adds	r5, #104	; 0x68
 8003ca8:	e7ea      	b.n	8003c80 <_fwalk+0x10>

08003caa <_fwalk_reent>:
 8003caa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cae:	4606      	mov	r6, r0
 8003cb0:	4688      	mov	r8, r1
 8003cb2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003cb6:	2700      	movs	r7, #0
 8003cb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003cbc:	f1b9 0901 	subs.w	r9, r9, #1
 8003cc0:	d505      	bpl.n	8003cce <_fwalk_reent+0x24>
 8003cc2:	6824      	ldr	r4, [r4, #0]
 8003cc4:	2c00      	cmp	r4, #0
 8003cc6:	d1f7      	bne.n	8003cb8 <_fwalk_reent+0xe>
 8003cc8:	4638      	mov	r0, r7
 8003cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cce:	89ab      	ldrh	r3, [r5, #12]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d907      	bls.n	8003ce4 <_fwalk_reent+0x3a>
 8003cd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	d003      	beq.n	8003ce4 <_fwalk_reent+0x3a>
 8003cdc:	4629      	mov	r1, r5
 8003cde:	4630      	mov	r0, r6
 8003ce0:	47c0      	blx	r8
 8003ce2:	4307      	orrs	r7, r0
 8003ce4:	3568      	adds	r5, #104	; 0x68
 8003ce6:	e7e9      	b.n	8003cbc <_fwalk_reent+0x12>

08003ce8 <_getc_r>:
 8003ce8:	b538      	push	{r3, r4, r5, lr}
 8003cea:	460c      	mov	r4, r1
 8003cec:	4605      	mov	r5, r0
 8003cee:	b118      	cbz	r0, 8003cf8 <_getc_r+0x10>
 8003cf0:	6983      	ldr	r3, [r0, #24]
 8003cf2:	b90b      	cbnz	r3, 8003cf8 <_getc_r+0x10>
 8003cf4:	f7ff ff3e 	bl	8003b74 <__sinit>
 8003cf8:	4b18      	ldr	r3, [pc, #96]	; (8003d5c <_getc_r+0x74>)
 8003cfa:	429c      	cmp	r4, r3
 8003cfc:	d11e      	bne.n	8003d3c <_getc_r+0x54>
 8003cfe:	686c      	ldr	r4, [r5, #4]
 8003d00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d02:	07d8      	lsls	r0, r3, #31
 8003d04:	d405      	bmi.n	8003d12 <_getc_r+0x2a>
 8003d06:	89a3      	ldrh	r3, [r4, #12]
 8003d08:	0599      	lsls	r1, r3, #22
 8003d0a:	d402      	bmi.n	8003d12 <_getc_r+0x2a>
 8003d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d0e:	f000 f82c 	bl	8003d6a <__retarget_lock_acquire_recursive>
 8003d12:	6863      	ldr	r3, [r4, #4]
 8003d14:	3b01      	subs	r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	6063      	str	r3, [r4, #4]
 8003d1a:	da19      	bge.n	8003d50 <_getc_r+0x68>
 8003d1c:	4628      	mov	r0, r5
 8003d1e:	4621      	mov	r1, r4
 8003d20:	f001 f814 	bl	8004d4c <__srget_r>
 8003d24:	4605      	mov	r5, r0
 8003d26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d28:	07da      	lsls	r2, r3, #31
 8003d2a:	d405      	bmi.n	8003d38 <_getc_r+0x50>
 8003d2c:	89a3      	ldrh	r3, [r4, #12]
 8003d2e:	059b      	lsls	r3, r3, #22
 8003d30:	d402      	bmi.n	8003d38 <_getc_r+0x50>
 8003d32:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d34:	f000 f81a 	bl	8003d6c <__retarget_lock_release_recursive>
 8003d38:	4628      	mov	r0, r5
 8003d3a:	bd38      	pop	{r3, r4, r5, pc}
 8003d3c:	4b08      	ldr	r3, [pc, #32]	; (8003d60 <_getc_r+0x78>)
 8003d3e:	429c      	cmp	r4, r3
 8003d40:	d101      	bne.n	8003d46 <_getc_r+0x5e>
 8003d42:	68ac      	ldr	r4, [r5, #8]
 8003d44:	e7dc      	b.n	8003d00 <_getc_r+0x18>
 8003d46:	4b07      	ldr	r3, [pc, #28]	; (8003d64 <_getc_r+0x7c>)
 8003d48:	429c      	cmp	r4, r3
 8003d4a:	bf08      	it	eq
 8003d4c:	68ec      	ldreq	r4, [r5, #12]
 8003d4e:	e7d7      	b.n	8003d00 <_getc_r+0x18>
 8003d50:	6823      	ldr	r3, [r4, #0]
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	6022      	str	r2, [r4, #0]
 8003d56:	781d      	ldrb	r5, [r3, #0]
 8003d58:	e7e5      	b.n	8003d26 <_getc_r+0x3e>
 8003d5a:	bf00      	nop
 8003d5c:	080054b8 	.word	0x080054b8
 8003d60:	080054d8 	.word	0x080054d8
 8003d64:	08005498 	.word	0x08005498

08003d68 <__retarget_lock_init_recursive>:
 8003d68:	4770      	bx	lr

08003d6a <__retarget_lock_acquire_recursive>:
 8003d6a:	4770      	bx	lr

08003d6c <__retarget_lock_release_recursive>:
 8003d6c:	4770      	bx	lr

08003d6e <__swhatbuf_r>:
 8003d6e:	b570      	push	{r4, r5, r6, lr}
 8003d70:	460e      	mov	r6, r1
 8003d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d76:	2900      	cmp	r1, #0
 8003d78:	b096      	sub	sp, #88	; 0x58
 8003d7a:	4614      	mov	r4, r2
 8003d7c:	461d      	mov	r5, r3
 8003d7e:	da08      	bge.n	8003d92 <__swhatbuf_r+0x24>
 8003d80:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	602a      	str	r2, [r5, #0]
 8003d88:	061a      	lsls	r2, r3, #24
 8003d8a:	d410      	bmi.n	8003dae <__swhatbuf_r+0x40>
 8003d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d90:	e00e      	b.n	8003db0 <__swhatbuf_r+0x42>
 8003d92:	466a      	mov	r2, sp
 8003d94:	f001 fa7e 	bl	8005294 <_fstat_r>
 8003d98:	2800      	cmp	r0, #0
 8003d9a:	dbf1      	blt.n	8003d80 <__swhatbuf_r+0x12>
 8003d9c:	9a01      	ldr	r2, [sp, #4]
 8003d9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003da2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003da6:	425a      	negs	r2, r3
 8003da8:	415a      	adcs	r2, r3
 8003daa:	602a      	str	r2, [r5, #0]
 8003dac:	e7ee      	b.n	8003d8c <__swhatbuf_r+0x1e>
 8003dae:	2340      	movs	r3, #64	; 0x40
 8003db0:	2000      	movs	r0, #0
 8003db2:	6023      	str	r3, [r4, #0]
 8003db4:	b016      	add	sp, #88	; 0x58
 8003db6:	bd70      	pop	{r4, r5, r6, pc}

08003db8 <__smakebuf_r>:
 8003db8:	898b      	ldrh	r3, [r1, #12]
 8003dba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003dbc:	079d      	lsls	r5, r3, #30
 8003dbe:	4606      	mov	r6, r0
 8003dc0:	460c      	mov	r4, r1
 8003dc2:	d507      	bpl.n	8003dd4 <__smakebuf_r+0x1c>
 8003dc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003dc8:	6023      	str	r3, [r4, #0]
 8003dca:	6123      	str	r3, [r4, #16]
 8003dcc:	2301      	movs	r3, #1
 8003dce:	6163      	str	r3, [r4, #20]
 8003dd0:	b002      	add	sp, #8
 8003dd2:	bd70      	pop	{r4, r5, r6, pc}
 8003dd4:	ab01      	add	r3, sp, #4
 8003dd6:	466a      	mov	r2, sp
 8003dd8:	f7ff ffc9 	bl	8003d6e <__swhatbuf_r>
 8003ddc:	9900      	ldr	r1, [sp, #0]
 8003dde:	4605      	mov	r5, r0
 8003de0:	4630      	mov	r0, r6
 8003de2:	f000 f89d 	bl	8003f20 <_malloc_r>
 8003de6:	b948      	cbnz	r0, 8003dfc <__smakebuf_r+0x44>
 8003de8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dec:	059a      	lsls	r2, r3, #22
 8003dee:	d4ef      	bmi.n	8003dd0 <__smakebuf_r+0x18>
 8003df0:	f023 0303 	bic.w	r3, r3, #3
 8003df4:	f043 0302 	orr.w	r3, r3, #2
 8003df8:	81a3      	strh	r3, [r4, #12]
 8003dfa:	e7e3      	b.n	8003dc4 <__smakebuf_r+0xc>
 8003dfc:	4b0d      	ldr	r3, [pc, #52]	; (8003e34 <__smakebuf_r+0x7c>)
 8003dfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8003e00:	89a3      	ldrh	r3, [r4, #12]
 8003e02:	6020      	str	r0, [r4, #0]
 8003e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e08:	81a3      	strh	r3, [r4, #12]
 8003e0a:	9b00      	ldr	r3, [sp, #0]
 8003e0c:	6163      	str	r3, [r4, #20]
 8003e0e:	9b01      	ldr	r3, [sp, #4]
 8003e10:	6120      	str	r0, [r4, #16]
 8003e12:	b15b      	cbz	r3, 8003e2c <__smakebuf_r+0x74>
 8003e14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e18:	4630      	mov	r0, r6
 8003e1a:	f001 fa4d 	bl	80052b8 <_isatty_r>
 8003e1e:	b128      	cbz	r0, 8003e2c <__smakebuf_r+0x74>
 8003e20:	89a3      	ldrh	r3, [r4, #12]
 8003e22:	f023 0303 	bic.w	r3, r3, #3
 8003e26:	f043 0301 	orr.w	r3, r3, #1
 8003e2a:	81a3      	strh	r3, [r4, #12]
 8003e2c:	89a0      	ldrh	r0, [r4, #12]
 8003e2e:	4305      	orrs	r5, r0
 8003e30:	81a5      	strh	r5, [r4, #12]
 8003e32:	e7cd      	b.n	8003dd0 <__smakebuf_r+0x18>
 8003e34:	08003b0d 	.word	0x08003b0d

08003e38 <malloc>:
 8003e38:	4b02      	ldr	r3, [pc, #8]	; (8003e44 <malloc+0xc>)
 8003e3a:	4601      	mov	r1, r0
 8003e3c:	6818      	ldr	r0, [r3, #0]
 8003e3e:	f000 b86f 	b.w	8003f20 <_malloc_r>
 8003e42:	bf00      	nop
 8003e44:	20000408 	.word	0x20000408

08003e48 <_free_r>:
 8003e48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e4a:	2900      	cmp	r1, #0
 8003e4c:	d044      	beq.n	8003ed8 <_free_r+0x90>
 8003e4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e52:	9001      	str	r0, [sp, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f1a1 0404 	sub.w	r4, r1, #4
 8003e5a:	bfb8      	it	lt
 8003e5c:	18e4      	addlt	r4, r4, r3
 8003e5e:	f001 fa5b 	bl	8005318 <__malloc_lock>
 8003e62:	4a1e      	ldr	r2, [pc, #120]	; (8003edc <_free_r+0x94>)
 8003e64:	9801      	ldr	r0, [sp, #4]
 8003e66:	6813      	ldr	r3, [r2, #0]
 8003e68:	b933      	cbnz	r3, 8003e78 <_free_r+0x30>
 8003e6a:	6063      	str	r3, [r4, #4]
 8003e6c:	6014      	str	r4, [r2, #0]
 8003e6e:	b003      	add	sp, #12
 8003e70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e74:	f001 ba56 	b.w	8005324 <__malloc_unlock>
 8003e78:	42a3      	cmp	r3, r4
 8003e7a:	d908      	bls.n	8003e8e <_free_r+0x46>
 8003e7c:	6825      	ldr	r5, [r4, #0]
 8003e7e:	1961      	adds	r1, r4, r5
 8003e80:	428b      	cmp	r3, r1
 8003e82:	bf01      	itttt	eq
 8003e84:	6819      	ldreq	r1, [r3, #0]
 8003e86:	685b      	ldreq	r3, [r3, #4]
 8003e88:	1949      	addeq	r1, r1, r5
 8003e8a:	6021      	streq	r1, [r4, #0]
 8003e8c:	e7ed      	b.n	8003e6a <_free_r+0x22>
 8003e8e:	461a      	mov	r2, r3
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	b10b      	cbz	r3, 8003e98 <_free_r+0x50>
 8003e94:	42a3      	cmp	r3, r4
 8003e96:	d9fa      	bls.n	8003e8e <_free_r+0x46>
 8003e98:	6811      	ldr	r1, [r2, #0]
 8003e9a:	1855      	adds	r5, r2, r1
 8003e9c:	42a5      	cmp	r5, r4
 8003e9e:	d10b      	bne.n	8003eb8 <_free_r+0x70>
 8003ea0:	6824      	ldr	r4, [r4, #0]
 8003ea2:	4421      	add	r1, r4
 8003ea4:	1854      	adds	r4, r2, r1
 8003ea6:	42a3      	cmp	r3, r4
 8003ea8:	6011      	str	r1, [r2, #0]
 8003eaa:	d1e0      	bne.n	8003e6e <_free_r+0x26>
 8003eac:	681c      	ldr	r4, [r3, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	6053      	str	r3, [r2, #4]
 8003eb2:	4421      	add	r1, r4
 8003eb4:	6011      	str	r1, [r2, #0]
 8003eb6:	e7da      	b.n	8003e6e <_free_r+0x26>
 8003eb8:	d902      	bls.n	8003ec0 <_free_r+0x78>
 8003eba:	230c      	movs	r3, #12
 8003ebc:	6003      	str	r3, [r0, #0]
 8003ebe:	e7d6      	b.n	8003e6e <_free_r+0x26>
 8003ec0:	6825      	ldr	r5, [r4, #0]
 8003ec2:	1961      	adds	r1, r4, r5
 8003ec4:	428b      	cmp	r3, r1
 8003ec6:	bf04      	itt	eq
 8003ec8:	6819      	ldreq	r1, [r3, #0]
 8003eca:	685b      	ldreq	r3, [r3, #4]
 8003ecc:	6063      	str	r3, [r4, #4]
 8003ece:	bf04      	itt	eq
 8003ed0:	1949      	addeq	r1, r1, r5
 8003ed2:	6021      	streq	r1, [r4, #0]
 8003ed4:	6054      	str	r4, [r2, #4]
 8003ed6:	e7ca      	b.n	8003e6e <_free_r+0x26>
 8003ed8:	b003      	add	sp, #12
 8003eda:	bd30      	pop	{r4, r5, pc}
 8003edc:	20000520 	.word	0x20000520

08003ee0 <sbrk_aligned>:
 8003ee0:	b570      	push	{r4, r5, r6, lr}
 8003ee2:	4e0e      	ldr	r6, [pc, #56]	; (8003f1c <sbrk_aligned+0x3c>)
 8003ee4:	460c      	mov	r4, r1
 8003ee6:	6831      	ldr	r1, [r6, #0]
 8003ee8:	4605      	mov	r5, r0
 8003eea:	b911      	cbnz	r1, 8003ef2 <sbrk_aligned+0x12>
 8003eec:	f000 ff5a 	bl	8004da4 <_sbrk_r>
 8003ef0:	6030      	str	r0, [r6, #0]
 8003ef2:	4621      	mov	r1, r4
 8003ef4:	4628      	mov	r0, r5
 8003ef6:	f000 ff55 	bl	8004da4 <_sbrk_r>
 8003efa:	1c43      	adds	r3, r0, #1
 8003efc:	d00a      	beq.n	8003f14 <sbrk_aligned+0x34>
 8003efe:	1cc4      	adds	r4, r0, #3
 8003f00:	f024 0403 	bic.w	r4, r4, #3
 8003f04:	42a0      	cmp	r0, r4
 8003f06:	d007      	beq.n	8003f18 <sbrk_aligned+0x38>
 8003f08:	1a21      	subs	r1, r4, r0
 8003f0a:	4628      	mov	r0, r5
 8003f0c:	f000 ff4a 	bl	8004da4 <_sbrk_r>
 8003f10:	3001      	adds	r0, #1
 8003f12:	d101      	bne.n	8003f18 <sbrk_aligned+0x38>
 8003f14:	f04f 34ff 	mov.w	r4, #4294967295
 8003f18:	4620      	mov	r0, r4
 8003f1a:	bd70      	pop	{r4, r5, r6, pc}
 8003f1c:	20000524 	.word	0x20000524

08003f20 <_malloc_r>:
 8003f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f24:	1ccd      	adds	r5, r1, #3
 8003f26:	f025 0503 	bic.w	r5, r5, #3
 8003f2a:	3508      	adds	r5, #8
 8003f2c:	2d0c      	cmp	r5, #12
 8003f2e:	bf38      	it	cc
 8003f30:	250c      	movcc	r5, #12
 8003f32:	2d00      	cmp	r5, #0
 8003f34:	4607      	mov	r7, r0
 8003f36:	db01      	blt.n	8003f3c <_malloc_r+0x1c>
 8003f38:	42a9      	cmp	r1, r5
 8003f3a:	d905      	bls.n	8003f48 <_malloc_r+0x28>
 8003f3c:	230c      	movs	r3, #12
 8003f3e:	603b      	str	r3, [r7, #0]
 8003f40:	2600      	movs	r6, #0
 8003f42:	4630      	mov	r0, r6
 8003f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f48:	4e2e      	ldr	r6, [pc, #184]	; (8004004 <_malloc_r+0xe4>)
 8003f4a:	f001 f9e5 	bl	8005318 <__malloc_lock>
 8003f4e:	6833      	ldr	r3, [r6, #0]
 8003f50:	461c      	mov	r4, r3
 8003f52:	bb34      	cbnz	r4, 8003fa2 <_malloc_r+0x82>
 8003f54:	4629      	mov	r1, r5
 8003f56:	4638      	mov	r0, r7
 8003f58:	f7ff ffc2 	bl	8003ee0 <sbrk_aligned>
 8003f5c:	1c43      	adds	r3, r0, #1
 8003f5e:	4604      	mov	r4, r0
 8003f60:	d14d      	bne.n	8003ffe <_malloc_r+0xde>
 8003f62:	6834      	ldr	r4, [r6, #0]
 8003f64:	4626      	mov	r6, r4
 8003f66:	2e00      	cmp	r6, #0
 8003f68:	d140      	bne.n	8003fec <_malloc_r+0xcc>
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	4631      	mov	r1, r6
 8003f6e:	4638      	mov	r0, r7
 8003f70:	eb04 0803 	add.w	r8, r4, r3
 8003f74:	f000 ff16 	bl	8004da4 <_sbrk_r>
 8003f78:	4580      	cmp	r8, r0
 8003f7a:	d13a      	bne.n	8003ff2 <_malloc_r+0xd2>
 8003f7c:	6821      	ldr	r1, [r4, #0]
 8003f7e:	3503      	adds	r5, #3
 8003f80:	1a6d      	subs	r5, r5, r1
 8003f82:	f025 0503 	bic.w	r5, r5, #3
 8003f86:	3508      	adds	r5, #8
 8003f88:	2d0c      	cmp	r5, #12
 8003f8a:	bf38      	it	cc
 8003f8c:	250c      	movcc	r5, #12
 8003f8e:	4629      	mov	r1, r5
 8003f90:	4638      	mov	r0, r7
 8003f92:	f7ff ffa5 	bl	8003ee0 <sbrk_aligned>
 8003f96:	3001      	adds	r0, #1
 8003f98:	d02b      	beq.n	8003ff2 <_malloc_r+0xd2>
 8003f9a:	6823      	ldr	r3, [r4, #0]
 8003f9c:	442b      	add	r3, r5
 8003f9e:	6023      	str	r3, [r4, #0]
 8003fa0:	e00e      	b.n	8003fc0 <_malloc_r+0xa0>
 8003fa2:	6822      	ldr	r2, [r4, #0]
 8003fa4:	1b52      	subs	r2, r2, r5
 8003fa6:	d41e      	bmi.n	8003fe6 <_malloc_r+0xc6>
 8003fa8:	2a0b      	cmp	r2, #11
 8003faa:	d916      	bls.n	8003fda <_malloc_r+0xba>
 8003fac:	1961      	adds	r1, r4, r5
 8003fae:	42a3      	cmp	r3, r4
 8003fb0:	6025      	str	r5, [r4, #0]
 8003fb2:	bf18      	it	ne
 8003fb4:	6059      	strne	r1, [r3, #4]
 8003fb6:	6863      	ldr	r3, [r4, #4]
 8003fb8:	bf08      	it	eq
 8003fba:	6031      	streq	r1, [r6, #0]
 8003fbc:	5162      	str	r2, [r4, r5]
 8003fbe:	604b      	str	r3, [r1, #4]
 8003fc0:	4638      	mov	r0, r7
 8003fc2:	f104 060b 	add.w	r6, r4, #11
 8003fc6:	f001 f9ad 	bl	8005324 <__malloc_unlock>
 8003fca:	f026 0607 	bic.w	r6, r6, #7
 8003fce:	1d23      	adds	r3, r4, #4
 8003fd0:	1af2      	subs	r2, r6, r3
 8003fd2:	d0b6      	beq.n	8003f42 <_malloc_r+0x22>
 8003fd4:	1b9b      	subs	r3, r3, r6
 8003fd6:	50a3      	str	r3, [r4, r2]
 8003fd8:	e7b3      	b.n	8003f42 <_malloc_r+0x22>
 8003fda:	6862      	ldr	r2, [r4, #4]
 8003fdc:	42a3      	cmp	r3, r4
 8003fde:	bf0c      	ite	eq
 8003fe0:	6032      	streq	r2, [r6, #0]
 8003fe2:	605a      	strne	r2, [r3, #4]
 8003fe4:	e7ec      	b.n	8003fc0 <_malloc_r+0xa0>
 8003fe6:	4623      	mov	r3, r4
 8003fe8:	6864      	ldr	r4, [r4, #4]
 8003fea:	e7b2      	b.n	8003f52 <_malloc_r+0x32>
 8003fec:	4634      	mov	r4, r6
 8003fee:	6876      	ldr	r6, [r6, #4]
 8003ff0:	e7b9      	b.n	8003f66 <_malloc_r+0x46>
 8003ff2:	230c      	movs	r3, #12
 8003ff4:	603b      	str	r3, [r7, #0]
 8003ff6:	4638      	mov	r0, r7
 8003ff8:	f001 f994 	bl	8005324 <__malloc_unlock>
 8003ffc:	e7a1      	b.n	8003f42 <_malloc_r+0x22>
 8003ffe:	6025      	str	r5, [r4, #0]
 8004000:	e7de      	b.n	8003fc0 <_malloc_r+0xa0>
 8004002:	bf00      	nop
 8004004:	20000520 	.word	0x20000520

08004008 <__sfputc_r>:
 8004008:	6893      	ldr	r3, [r2, #8]
 800400a:	3b01      	subs	r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	b410      	push	{r4}
 8004010:	6093      	str	r3, [r2, #8]
 8004012:	da08      	bge.n	8004026 <__sfputc_r+0x1e>
 8004014:	6994      	ldr	r4, [r2, #24]
 8004016:	42a3      	cmp	r3, r4
 8004018:	db01      	blt.n	800401e <__sfputc_r+0x16>
 800401a:	290a      	cmp	r1, #10
 800401c:	d103      	bne.n	8004026 <__sfputc_r+0x1e>
 800401e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004022:	f7ff bbbb 	b.w	800379c <__swbuf_r>
 8004026:	6813      	ldr	r3, [r2, #0]
 8004028:	1c58      	adds	r0, r3, #1
 800402a:	6010      	str	r0, [r2, #0]
 800402c:	7019      	strb	r1, [r3, #0]
 800402e:	4608      	mov	r0, r1
 8004030:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004034:	4770      	bx	lr

08004036 <__sfputs_r>:
 8004036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004038:	4606      	mov	r6, r0
 800403a:	460f      	mov	r7, r1
 800403c:	4614      	mov	r4, r2
 800403e:	18d5      	adds	r5, r2, r3
 8004040:	42ac      	cmp	r4, r5
 8004042:	d101      	bne.n	8004048 <__sfputs_r+0x12>
 8004044:	2000      	movs	r0, #0
 8004046:	e007      	b.n	8004058 <__sfputs_r+0x22>
 8004048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800404c:	463a      	mov	r2, r7
 800404e:	4630      	mov	r0, r6
 8004050:	f7ff ffda 	bl	8004008 <__sfputc_r>
 8004054:	1c43      	adds	r3, r0, #1
 8004056:	d1f3      	bne.n	8004040 <__sfputs_r+0xa>
 8004058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800405c <_vfiprintf_r>:
 800405c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004060:	460d      	mov	r5, r1
 8004062:	b09d      	sub	sp, #116	; 0x74
 8004064:	4614      	mov	r4, r2
 8004066:	4698      	mov	r8, r3
 8004068:	4606      	mov	r6, r0
 800406a:	b118      	cbz	r0, 8004074 <_vfiprintf_r+0x18>
 800406c:	6983      	ldr	r3, [r0, #24]
 800406e:	b90b      	cbnz	r3, 8004074 <_vfiprintf_r+0x18>
 8004070:	f7ff fd80 	bl	8003b74 <__sinit>
 8004074:	4b89      	ldr	r3, [pc, #548]	; (800429c <_vfiprintf_r+0x240>)
 8004076:	429d      	cmp	r5, r3
 8004078:	d11b      	bne.n	80040b2 <_vfiprintf_r+0x56>
 800407a:	6875      	ldr	r5, [r6, #4]
 800407c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800407e:	07d9      	lsls	r1, r3, #31
 8004080:	d405      	bmi.n	800408e <_vfiprintf_r+0x32>
 8004082:	89ab      	ldrh	r3, [r5, #12]
 8004084:	059a      	lsls	r2, r3, #22
 8004086:	d402      	bmi.n	800408e <_vfiprintf_r+0x32>
 8004088:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800408a:	f7ff fe6e 	bl	8003d6a <__retarget_lock_acquire_recursive>
 800408e:	89ab      	ldrh	r3, [r5, #12]
 8004090:	071b      	lsls	r3, r3, #28
 8004092:	d501      	bpl.n	8004098 <_vfiprintf_r+0x3c>
 8004094:	692b      	ldr	r3, [r5, #16]
 8004096:	b9eb      	cbnz	r3, 80040d4 <_vfiprintf_r+0x78>
 8004098:	4629      	mov	r1, r5
 800409a:	4630      	mov	r0, r6
 800409c:	f7ff fbd0 	bl	8003840 <__swsetup_r>
 80040a0:	b1c0      	cbz	r0, 80040d4 <_vfiprintf_r+0x78>
 80040a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040a4:	07dc      	lsls	r4, r3, #31
 80040a6:	d50e      	bpl.n	80040c6 <_vfiprintf_r+0x6a>
 80040a8:	f04f 30ff 	mov.w	r0, #4294967295
 80040ac:	b01d      	add	sp, #116	; 0x74
 80040ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040b2:	4b7b      	ldr	r3, [pc, #492]	; (80042a0 <_vfiprintf_r+0x244>)
 80040b4:	429d      	cmp	r5, r3
 80040b6:	d101      	bne.n	80040bc <_vfiprintf_r+0x60>
 80040b8:	68b5      	ldr	r5, [r6, #8]
 80040ba:	e7df      	b.n	800407c <_vfiprintf_r+0x20>
 80040bc:	4b79      	ldr	r3, [pc, #484]	; (80042a4 <_vfiprintf_r+0x248>)
 80040be:	429d      	cmp	r5, r3
 80040c0:	bf08      	it	eq
 80040c2:	68f5      	ldreq	r5, [r6, #12]
 80040c4:	e7da      	b.n	800407c <_vfiprintf_r+0x20>
 80040c6:	89ab      	ldrh	r3, [r5, #12]
 80040c8:	0598      	lsls	r0, r3, #22
 80040ca:	d4ed      	bmi.n	80040a8 <_vfiprintf_r+0x4c>
 80040cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040ce:	f7ff fe4d 	bl	8003d6c <__retarget_lock_release_recursive>
 80040d2:	e7e9      	b.n	80040a8 <_vfiprintf_r+0x4c>
 80040d4:	2300      	movs	r3, #0
 80040d6:	9309      	str	r3, [sp, #36]	; 0x24
 80040d8:	2320      	movs	r3, #32
 80040da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040de:	f8cd 800c 	str.w	r8, [sp, #12]
 80040e2:	2330      	movs	r3, #48	; 0x30
 80040e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80042a8 <_vfiprintf_r+0x24c>
 80040e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040ec:	f04f 0901 	mov.w	r9, #1
 80040f0:	4623      	mov	r3, r4
 80040f2:	469a      	mov	sl, r3
 80040f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040f8:	b10a      	cbz	r2, 80040fe <_vfiprintf_r+0xa2>
 80040fa:	2a25      	cmp	r2, #37	; 0x25
 80040fc:	d1f9      	bne.n	80040f2 <_vfiprintf_r+0x96>
 80040fe:	ebba 0b04 	subs.w	fp, sl, r4
 8004102:	d00b      	beq.n	800411c <_vfiprintf_r+0xc0>
 8004104:	465b      	mov	r3, fp
 8004106:	4622      	mov	r2, r4
 8004108:	4629      	mov	r1, r5
 800410a:	4630      	mov	r0, r6
 800410c:	f7ff ff93 	bl	8004036 <__sfputs_r>
 8004110:	3001      	adds	r0, #1
 8004112:	f000 80aa 	beq.w	800426a <_vfiprintf_r+0x20e>
 8004116:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004118:	445a      	add	r2, fp
 800411a:	9209      	str	r2, [sp, #36]	; 0x24
 800411c:	f89a 3000 	ldrb.w	r3, [sl]
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 80a2 	beq.w	800426a <_vfiprintf_r+0x20e>
 8004126:	2300      	movs	r3, #0
 8004128:	f04f 32ff 	mov.w	r2, #4294967295
 800412c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004130:	f10a 0a01 	add.w	sl, sl, #1
 8004134:	9304      	str	r3, [sp, #16]
 8004136:	9307      	str	r3, [sp, #28]
 8004138:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800413c:	931a      	str	r3, [sp, #104]	; 0x68
 800413e:	4654      	mov	r4, sl
 8004140:	2205      	movs	r2, #5
 8004142:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004146:	4858      	ldr	r0, [pc, #352]	; (80042a8 <_vfiprintf_r+0x24c>)
 8004148:	f7fc fa1a 	bl	8000580 <memchr>
 800414c:	9a04      	ldr	r2, [sp, #16]
 800414e:	b9d8      	cbnz	r0, 8004188 <_vfiprintf_r+0x12c>
 8004150:	06d1      	lsls	r1, r2, #27
 8004152:	bf44      	itt	mi
 8004154:	2320      	movmi	r3, #32
 8004156:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800415a:	0713      	lsls	r3, r2, #28
 800415c:	bf44      	itt	mi
 800415e:	232b      	movmi	r3, #43	; 0x2b
 8004160:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004164:	f89a 3000 	ldrb.w	r3, [sl]
 8004168:	2b2a      	cmp	r3, #42	; 0x2a
 800416a:	d015      	beq.n	8004198 <_vfiprintf_r+0x13c>
 800416c:	9a07      	ldr	r2, [sp, #28]
 800416e:	4654      	mov	r4, sl
 8004170:	2000      	movs	r0, #0
 8004172:	f04f 0c0a 	mov.w	ip, #10
 8004176:	4621      	mov	r1, r4
 8004178:	f811 3b01 	ldrb.w	r3, [r1], #1
 800417c:	3b30      	subs	r3, #48	; 0x30
 800417e:	2b09      	cmp	r3, #9
 8004180:	d94e      	bls.n	8004220 <_vfiprintf_r+0x1c4>
 8004182:	b1b0      	cbz	r0, 80041b2 <_vfiprintf_r+0x156>
 8004184:	9207      	str	r2, [sp, #28]
 8004186:	e014      	b.n	80041b2 <_vfiprintf_r+0x156>
 8004188:	eba0 0308 	sub.w	r3, r0, r8
 800418c:	fa09 f303 	lsl.w	r3, r9, r3
 8004190:	4313      	orrs	r3, r2
 8004192:	9304      	str	r3, [sp, #16]
 8004194:	46a2      	mov	sl, r4
 8004196:	e7d2      	b.n	800413e <_vfiprintf_r+0xe2>
 8004198:	9b03      	ldr	r3, [sp, #12]
 800419a:	1d19      	adds	r1, r3, #4
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	9103      	str	r1, [sp, #12]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	bfbb      	ittet	lt
 80041a4:	425b      	neglt	r3, r3
 80041a6:	f042 0202 	orrlt.w	r2, r2, #2
 80041aa:	9307      	strge	r3, [sp, #28]
 80041ac:	9307      	strlt	r3, [sp, #28]
 80041ae:	bfb8      	it	lt
 80041b0:	9204      	strlt	r2, [sp, #16]
 80041b2:	7823      	ldrb	r3, [r4, #0]
 80041b4:	2b2e      	cmp	r3, #46	; 0x2e
 80041b6:	d10c      	bne.n	80041d2 <_vfiprintf_r+0x176>
 80041b8:	7863      	ldrb	r3, [r4, #1]
 80041ba:	2b2a      	cmp	r3, #42	; 0x2a
 80041bc:	d135      	bne.n	800422a <_vfiprintf_r+0x1ce>
 80041be:	9b03      	ldr	r3, [sp, #12]
 80041c0:	1d1a      	adds	r2, r3, #4
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	9203      	str	r2, [sp, #12]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	bfb8      	it	lt
 80041ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80041ce:	3402      	adds	r4, #2
 80041d0:	9305      	str	r3, [sp, #20]
 80041d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80042b8 <_vfiprintf_r+0x25c>
 80041d6:	7821      	ldrb	r1, [r4, #0]
 80041d8:	2203      	movs	r2, #3
 80041da:	4650      	mov	r0, sl
 80041dc:	f7fc f9d0 	bl	8000580 <memchr>
 80041e0:	b140      	cbz	r0, 80041f4 <_vfiprintf_r+0x198>
 80041e2:	2340      	movs	r3, #64	; 0x40
 80041e4:	eba0 000a 	sub.w	r0, r0, sl
 80041e8:	fa03 f000 	lsl.w	r0, r3, r0
 80041ec:	9b04      	ldr	r3, [sp, #16]
 80041ee:	4303      	orrs	r3, r0
 80041f0:	3401      	adds	r4, #1
 80041f2:	9304      	str	r3, [sp, #16]
 80041f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041f8:	482c      	ldr	r0, [pc, #176]	; (80042ac <_vfiprintf_r+0x250>)
 80041fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041fe:	2206      	movs	r2, #6
 8004200:	f7fc f9be 	bl	8000580 <memchr>
 8004204:	2800      	cmp	r0, #0
 8004206:	d03f      	beq.n	8004288 <_vfiprintf_r+0x22c>
 8004208:	4b29      	ldr	r3, [pc, #164]	; (80042b0 <_vfiprintf_r+0x254>)
 800420a:	bb1b      	cbnz	r3, 8004254 <_vfiprintf_r+0x1f8>
 800420c:	9b03      	ldr	r3, [sp, #12]
 800420e:	3307      	adds	r3, #7
 8004210:	f023 0307 	bic.w	r3, r3, #7
 8004214:	3308      	adds	r3, #8
 8004216:	9303      	str	r3, [sp, #12]
 8004218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800421a:	443b      	add	r3, r7
 800421c:	9309      	str	r3, [sp, #36]	; 0x24
 800421e:	e767      	b.n	80040f0 <_vfiprintf_r+0x94>
 8004220:	fb0c 3202 	mla	r2, ip, r2, r3
 8004224:	460c      	mov	r4, r1
 8004226:	2001      	movs	r0, #1
 8004228:	e7a5      	b.n	8004176 <_vfiprintf_r+0x11a>
 800422a:	2300      	movs	r3, #0
 800422c:	3401      	adds	r4, #1
 800422e:	9305      	str	r3, [sp, #20]
 8004230:	4619      	mov	r1, r3
 8004232:	f04f 0c0a 	mov.w	ip, #10
 8004236:	4620      	mov	r0, r4
 8004238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800423c:	3a30      	subs	r2, #48	; 0x30
 800423e:	2a09      	cmp	r2, #9
 8004240:	d903      	bls.n	800424a <_vfiprintf_r+0x1ee>
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0c5      	beq.n	80041d2 <_vfiprintf_r+0x176>
 8004246:	9105      	str	r1, [sp, #20]
 8004248:	e7c3      	b.n	80041d2 <_vfiprintf_r+0x176>
 800424a:	fb0c 2101 	mla	r1, ip, r1, r2
 800424e:	4604      	mov	r4, r0
 8004250:	2301      	movs	r3, #1
 8004252:	e7f0      	b.n	8004236 <_vfiprintf_r+0x1da>
 8004254:	ab03      	add	r3, sp, #12
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	462a      	mov	r2, r5
 800425a:	4b16      	ldr	r3, [pc, #88]	; (80042b4 <_vfiprintf_r+0x258>)
 800425c:	a904      	add	r1, sp, #16
 800425e:	4630      	mov	r0, r6
 8004260:	f3af 8000 	nop.w
 8004264:	4607      	mov	r7, r0
 8004266:	1c78      	adds	r0, r7, #1
 8004268:	d1d6      	bne.n	8004218 <_vfiprintf_r+0x1bc>
 800426a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800426c:	07d9      	lsls	r1, r3, #31
 800426e:	d405      	bmi.n	800427c <_vfiprintf_r+0x220>
 8004270:	89ab      	ldrh	r3, [r5, #12]
 8004272:	059a      	lsls	r2, r3, #22
 8004274:	d402      	bmi.n	800427c <_vfiprintf_r+0x220>
 8004276:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004278:	f7ff fd78 	bl	8003d6c <__retarget_lock_release_recursive>
 800427c:	89ab      	ldrh	r3, [r5, #12]
 800427e:	065b      	lsls	r3, r3, #25
 8004280:	f53f af12 	bmi.w	80040a8 <_vfiprintf_r+0x4c>
 8004284:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004286:	e711      	b.n	80040ac <_vfiprintf_r+0x50>
 8004288:	ab03      	add	r3, sp, #12
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	462a      	mov	r2, r5
 800428e:	4b09      	ldr	r3, [pc, #36]	; (80042b4 <_vfiprintf_r+0x258>)
 8004290:	a904      	add	r1, sp, #16
 8004292:	4630      	mov	r0, r6
 8004294:	f000 f880 	bl	8004398 <_printf_i>
 8004298:	e7e4      	b.n	8004264 <_vfiprintf_r+0x208>
 800429a:	bf00      	nop
 800429c:	080054b8 	.word	0x080054b8
 80042a0:	080054d8 	.word	0x080054d8
 80042a4:	08005498 	.word	0x08005498
 80042a8:	080054f8 	.word	0x080054f8
 80042ac:	08005502 	.word	0x08005502
 80042b0:	00000000 	.word	0x00000000
 80042b4:	08004037 	.word	0x08004037
 80042b8:	080054fe 	.word	0x080054fe

080042bc <_printf_common>:
 80042bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042c0:	4616      	mov	r6, r2
 80042c2:	4699      	mov	r9, r3
 80042c4:	688a      	ldr	r2, [r1, #8]
 80042c6:	690b      	ldr	r3, [r1, #16]
 80042c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042cc:	4293      	cmp	r3, r2
 80042ce:	bfb8      	it	lt
 80042d0:	4613      	movlt	r3, r2
 80042d2:	6033      	str	r3, [r6, #0]
 80042d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042d8:	4607      	mov	r7, r0
 80042da:	460c      	mov	r4, r1
 80042dc:	b10a      	cbz	r2, 80042e2 <_printf_common+0x26>
 80042de:	3301      	adds	r3, #1
 80042e0:	6033      	str	r3, [r6, #0]
 80042e2:	6823      	ldr	r3, [r4, #0]
 80042e4:	0699      	lsls	r1, r3, #26
 80042e6:	bf42      	ittt	mi
 80042e8:	6833      	ldrmi	r3, [r6, #0]
 80042ea:	3302      	addmi	r3, #2
 80042ec:	6033      	strmi	r3, [r6, #0]
 80042ee:	6825      	ldr	r5, [r4, #0]
 80042f0:	f015 0506 	ands.w	r5, r5, #6
 80042f4:	d106      	bne.n	8004304 <_printf_common+0x48>
 80042f6:	f104 0a19 	add.w	sl, r4, #25
 80042fa:	68e3      	ldr	r3, [r4, #12]
 80042fc:	6832      	ldr	r2, [r6, #0]
 80042fe:	1a9b      	subs	r3, r3, r2
 8004300:	42ab      	cmp	r3, r5
 8004302:	dc26      	bgt.n	8004352 <_printf_common+0x96>
 8004304:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004308:	1e13      	subs	r3, r2, #0
 800430a:	6822      	ldr	r2, [r4, #0]
 800430c:	bf18      	it	ne
 800430e:	2301      	movne	r3, #1
 8004310:	0692      	lsls	r2, r2, #26
 8004312:	d42b      	bmi.n	800436c <_printf_common+0xb0>
 8004314:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004318:	4649      	mov	r1, r9
 800431a:	4638      	mov	r0, r7
 800431c:	47c0      	blx	r8
 800431e:	3001      	adds	r0, #1
 8004320:	d01e      	beq.n	8004360 <_printf_common+0xa4>
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	68e5      	ldr	r5, [r4, #12]
 8004326:	6832      	ldr	r2, [r6, #0]
 8004328:	f003 0306 	and.w	r3, r3, #6
 800432c:	2b04      	cmp	r3, #4
 800432e:	bf08      	it	eq
 8004330:	1aad      	subeq	r5, r5, r2
 8004332:	68a3      	ldr	r3, [r4, #8]
 8004334:	6922      	ldr	r2, [r4, #16]
 8004336:	bf0c      	ite	eq
 8004338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800433c:	2500      	movne	r5, #0
 800433e:	4293      	cmp	r3, r2
 8004340:	bfc4      	itt	gt
 8004342:	1a9b      	subgt	r3, r3, r2
 8004344:	18ed      	addgt	r5, r5, r3
 8004346:	2600      	movs	r6, #0
 8004348:	341a      	adds	r4, #26
 800434a:	42b5      	cmp	r5, r6
 800434c:	d11a      	bne.n	8004384 <_printf_common+0xc8>
 800434e:	2000      	movs	r0, #0
 8004350:	e008      	b.n	8004364 <_printf_common+0xa8>
 8004352:	2301      	movs	r3, #1
 8004354:	4652      	mov	r2, sl
 8004356:	4649      	mov	r1, r9
 8004358:	4638      	mov	r0, r7
 800435a:	47c0      	blx	r8
 800435c:	3001      	adds	r0, #1
 800435e:	d103      	bne.n	8004368 <_printf_common+0xac>
 8004360:	f04f 30ff 	mov.w	r0, #4294967295
 8004364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004368:	3501      	adds	r5, #1
 800436a:	e7c6      	b.n	80042fa <_printf_common+0x3e>
 800436c:	18e1      	adds	r1, r4, r3
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	2030      	movs	r0, #48	; 0x30
 8004372:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004376:	4422      	add	r2, r4
 8004378:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800437c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004380:	3302      	adds	r3, #2
 8004382:	e7c7      	b.n	8004314 <_printf_common+0x58>
 8004384:	2301      	movs	r3, #1
 8004386:	4622      	mov	r2, r4
 8004388:	4649      	mov	r1, r9
 800438a:	4638      	mov	r0, r7
 800438c:	47c0      	blx	r8
 800438e:	3001      	adds	r0, #1
 8004390:	d0e6      	beq.n	8004360 <_printf_common+0xa4>
 8004392:	3601      	adds	r6, #1
 8004394:	e7d9      	b.n	800434a <_printf_common+0x8e>
	...

08004398 <_printf_i>:
 8004398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800439c:	7e0f      	ldrb	r7, [r1, #24]
 800439e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043a0:	2f78      	cmp	r7, #120	; 0x78
 80043a2:	4691      	mov	r9, r2
 80043a4:	4680      	mov	r8, r0
 80043a6:	460c      	mov	r4, r1
 80043a8:	469a      	mov	sl, r3
 80043aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043ae:	d807      	bhi.n	80043c0 <_printf_i+0x28>
 80043b0:	2f62      	cmp	r7, #98	; 0x62
 80043b2:	d80a      	bhi.n	80043ca <_printf_i+0x32>
 80043b4:	2f00      	cmp	r7, #0
 80043b6:	f000 80d8 	beq.w	800456a <_printf_i+0x1d2>
 80043ba:	2f58      	cmp	r7, #88	; 0x58
 80043bc:	f000 80a3 	beq.w	8004506 <_printf_i+0x16e>
 80043c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043c8:	e03a      	b.n	8004440 <_printf_i+0xa8>
 80043ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043ce:	2b15      	cmp	r3, #21
 80043d0:	d8f6      	bhi.n	80043c0 <_printf_i+0x28>
 80043d2:	a101      	add	r1, pc, #4	; (adr r1, 80043d8 <_printf_i+0x40>)
 80043d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043d8:	08004431 	.word	0x08004431
 80043dc:	08004445 	.word	0x08004445
 80043e0:	080043c1 	.word	0x080043c1
 80043e4:	080043c1 	.word	0x080043c1
 80043e8:	080043c1 	.word	0x080043c1
 80043ec:	080043c1 	.word	0x080043c1
 80043f0:	08004445 	.word	0x08004445
 80043f4:	080043c1 	.word	0x080043c1
 80043f8:	080043c1 	.word	0x080043c1
 80043fc:	080043c1 	.word	0x080043c1
 8004400:	080043c1 	.word	0x080043c1
 8004404:	08004551 	.word	0x08004551
 8004408:	08004475 	.word	0x08004475
 800440c:	08004533 	.word	0x08004533
 8004410:	080043c1 	.word	0x080043c1
 8004414:	080043c1 	.word	0x080043c1
 8004418:	08004573 	.word	0x08004573
 800441c:	080043c1 	.word	0x080043c1
 8004420:	08004475 	.word	0x08004475
 8004424:	080043c1 	.word	0x080043c1
 8004428:	080043c1 	.word	0x080043c1
 800442c:	0800453b 	.word	0x0800453b
 8004430:	682b      	ldr	r3, [r5, #0]
 8004432:	1d1a      	adds	r2, r3, #4
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	602a      	str	r2, [r5, #0]
 8004438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800443c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004440:	2301      	movs	r3, #1
 8004442:	e0a3      	b.n	800458c <_printf_i+0x1f4>
 8004444:	6820      	ldr	r0, [r4, #0]
 8004446:	6829      	ldr	r1, [r5, #0]
 8004448:	0606      	lsls	r6, r0, #24
 800444a:	f101 0304 	add.w	r3, r1, #4
 800444e:	d50a      	bpl.n	8004466 <_printf_i+0xce>
 8004450:	680e      	ldr	r6, [r1, #0]
 8004452:	602b      	str	r3, [r5, #0]
 8004454:	2e00      	cmp	r6, #0
 8004456:	da03      	bge.n	8004460 <_printf_i+0xc8>
 8004458:	232d      	movs	r3, #45	; 0x2d
 800445a:	4276      	negs	r6, r6
 800445c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004460:	485e      	ldr	r0, [pc, #376]	; (80045dc <_printf_i+0x244>)
 8004462:	230a      	movs	r3, #10
 8004464:	e019      	b.n	800449a <_printf_i+0x102>
 8004466:	680e      	ldr	r6, [r1, #0]
 8004468:	602b      	str	r3, [r5, #0]
 800446a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800446e:	bf18      	it	ne
 8004470:	b236      	sxthne	r6, r6
 8004472:	e7ef      	b.n	8004454 <_printf_i+0xbc>
 8004474:	682b      	ldr	r3, [r5, #0]
 8004476:	6820      	ldr	r0, [r4, #0]
 8004478:	1d19      	adds	r1, r3, #4
 800447a:	6029      	str	r1, [r5, #0]
 800447c:	0601      	lsls	r1, r0, #24
 800447e:	d501      	bpl.n	8004484 <_printf_i+0xec>
 8004480:	681e      	ldr	r6, [r3, #0]
 8004482:	e002      	b.n	800448a <_printf_i+0xf2>
 8004484:	0646      	lsls	r6, r0, #25
 8004486:	d5fb      	bpl.n	8004480 <_printf_i+0xe8>
 8004488:	881e      	ldrh	r6, [r3, #0]
 800448a:	4854      	ldr	r0, [pc, #336]	; (80045dc <_printf_i+0x244>)
 800448c:	2f6f      	cmp	r7, #111	; 0x6f
 800448e:	bf0c      	ite	eq
 8004490:	2308      	moveq	r3, #8
 8004492:	230a      	movne	r3, #10
 8004494:	2100      	movs	r1, #0
 8004496:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800449a:	6865      	ldr	r5, [r4, #4]
 800449c:	60a5      	str	r5, [r4, #8]
 800449e:	2d00      	cmp	r5, #0
 80044a0:	bfa2      	ittt	ge
 80044a2:	6821      	ldrge	r1, [r4, #0]
 80044a4:	f021 0104 	bicge.w	r1, r1, #4
 80044a8:	6021      	strge	r1, [r4, #0]
 80044aa:	b90e      	cbnz	r6, 80044b0 <_printf_i+0x118>
 80044ac:	2d00      	cmp	r5, #0
 80044ae:	d04d      	beq.n	800454c <_printf_i+0x1b4>
 80044b0:	4615      	mov	r5, r2
 80044b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80044b6:	fb03 6711 	mls	r7, r3, r1, r6
 80044ba:	5dc7      	ldrb	r7, [r0, r7]
 80044bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044c0:	4637      	mov	r7, r6
 80044c2:	42bb      	cmp	r3, r7
 80044c4:	460e      	mov	r6, r1
 80044c6:	d9f4      	bls.n	80044b2 <_printf_i+0x11a>
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d10b      	bne.n	80044e4 <_printf_i+0x14c>
 80044cc:	6823      	ldr	r3, [r4, #0]
 80044ce:	07de      	lsls	r6, r3, #31
 80044d0:	d508      	bpl.n	80044e4 <_printf_i+0x14c>
 80044d2:	6923      	ldr	r3, [r4, #16]
 80044d4:	6861      	ldr	r1, [r4, #4]
 80044d6:	4299      	cmp	r1, r3
 80044d8:	bfde      	ittt	le
 80044da:	2330      	movle	r3, #48	; 0x30
 80044dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80044e4:	1b52      	subs	r2, r2, r5
 80044e6:	6122      	str	r2, [r4, #16]
 80044e8:	f8cd a000 	str.w	sl, [sp]
 80044ec:	464b      	mov	r3, r9
 80044ee:	aa03      	add	r2, sp, #12
 80044f0:	4621      	mov	r1, r4
 80044f2:	4640      	mov	r0, r8
 80044f4:	f7ff fee2 	bl	80042bc <_printf_common>
 80044f8:	3001      	adds	r0, #1
 80044fa:	d14c      	bne.n	8004596 <_printf_i+0x1fe>
 80044fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004500:	b004      	add	sp, #16
 8004502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004506:	4835      	ldr	r0, [pc, #212]	; (80045dc <_printf_i+0x244>)
 8004508:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800450c:	6829      	ldr	r1, [r5, #0]
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	f851 6b04 	ldr.w	r6, [r1], #4
 8004514:	6029      	str	r1, [r5, #0]
 8004516:	061d      	lsls	r5, r3, #24
 8004518:	d514      	bpl.n	8004544 <_printf_i+0x1ac>
 800451a:	07df      	lsls	r7, r3, #31
 800451c:	bf44      	itt	mi
 800451e:	f043 0320 	orrmi.w	r3, r3, #32
 8004522:	6023      	strmi	r3, [r4, #0]
 8004524:	b91e      	cbnz	r6, 800452e <_printf_i+0x196>
 8004526:	6823      	ldr	r3, [r4, #0]
 8004528:	f023 0320 	bic.w	r3, r3, #32
 800452c:	6023      	str	r3, [r4, #0]
 800452e:	2310      	movs	r3, #16
 8004530:	e7b0      	b.n	8004494 <_printf_i+0xfc>
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	f043 0320 	orr.w	r3, r3, #32
 8004538:	6023      	str	r3, [r4, #0]
 800453a:	2378      	movs	r3, #120	; 0x78
 800453c:	4828      	ldr	r0, [pc, #160]	; (80045e0 <_printf_i+0x248>)
 800453e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004542:	e7e3      	b.n	800450c <_printf_i+0x174>
 8004544:	0659      	lsls	r1, r3, #25
 8004546:	bf48      	it	mi
 8004548:	b2b6      	uxthmi	r6, r6
 800454a:	e7e6      	b.n	800451a <_printf_i+0x182>
 800454c:	4615      	mov	r5, r2
 800454e:	e7bb      	b.n	80044c8 <_printf_i+0x130>
 8004550:	682b      	ldr	r3, [r5, #0]
 8004552:	6826      	ldr	r6, [r4, #0]
 8004554:	6961      	ldr	r1, [r4, #20]
 8004556:	1d18      	adds	r0, r3, #4
 8004558:	6028      	str	r0, [r5, #0]
 800455a:	0635      	lsls	r5, r6, #24
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	d501      	bpl.n	8004564 <_printf_i+0x1cc>
 8004560:	6019      	str	r1, [r3, #0]
 8004562:	e002      	b.n	800456a <_printf_i+0x1d2>
 8004564:	0670      	lsls	r0, r6, #25
 8004566:	d5fb      	bpl.n	8004560 <_printf_i+0x1c8>
 8004568:	8019      	strh	r1, [r3, #0]
 800456a:	2300      	movs	r3, #0
 800456c:	6123      	str	r3, [r4, #16]
 800456e:	4615      	mov	r5, r2
 8004570:	e7ba      	b.n	80044e8 <_printf_i+0x150>
 8004572:	682b      	ldr	r3, [r5, #0]
 8004574:	1d1a      	adds	r2, r3, #4
 8004576:	602a      	str	r2, [r5, #0]
 8004578:	681d      	ldr	r5, [r3, #0]
 800457a:	6862      	ldr	r2, [r4, #4]
 800457c:	2100      	movs	r1, #0
 800457e:	4628      	mov	r0, r5
 8004580:	f7fb fffe 	bl	8000580 <memchr>
 8004584:	b108      	cbz	r0, 800458a <_printf_i+0x1f2>
 8004586:	1b40      	subs	r0, r0, r5
 8004588:	6060      	str	r0, [r4, #4]
 800458a:	6863      	ldr	r3, [r4, #4]
 800458c:	6123      	str	r3, [r4, #16]
 800458e:	2300      	movs	r3, #0
 8004590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004594:	e7a8      	b.n	80044e8 <_printf_i+0x150>
 8004596:	6923      	ldr	r3, [r4, #16]
 8004598:	462a      	mov	r2, r5
 800459a:	4649      	mov	r1, r9
 800459c:	4640      	mov	r0, r8
 800459e:	47d0      	blx	sl
 80045a0:	3001      	adds	r0, #1
 80045a2:	d0ab      	beq.n	80044fc <_printf_i+0x164>
 80045a4:	6823      	ldr	r3, [r4, #0]
 80045a6:	079b      	lsls	r3, r3, #30
 80045a8:	d413      	bmi.n	80045d2 <_printf_i+0x23a>
 80045aa:	68e0      	ldr	r0, [r4, #12]
 80045ac:	9b03      	ldr	r3, [sp, #12]
 80045ae:	4298      	cmp	r0, r3
 80045b0:	bfb8      	it	lt
 80045b2:	4618      	movlt	r0, r3
 80045b4:	e7a4      	b.n	8004500 <_printf_i+0x168>
 80045b6:	2301      	movs	r3, #1
 80045b8:	4632      	mov	r2, r6
 80045ba:	4649      	mov	r1, r9
 80045bc:	4640      	mov	r0, r8
 80045be:	47d0      	blx	sl
 80045c0:	3001      	adds	r0, #1
 80045c2:	d09b      	beq.n	80044fc <_printf_i+0x164>
 80045c4:	3501      	adds	r5, #1
 80045c6:	68e3      	ldr	r3, [r4, #12]
 80045c8:	9903      	ldr	r1, [sp, #12]
 80045ca:	1a5b      	subs	r3, r3, r1
 80045cc:	42ab      	cmp	r3, r5
 80045ce:	dcf2      	bgt.n	80045b6 <_printf_i+0x21e>
 80045d0:	e7eb      	b.n	80045aa <_printf_i+0x212>
 80045d2:	2500      	movs	r5, #0
 80045d4:	f104 0619 	add.w	r6, r4, #25
 80045d8:	e7f5      	b.n	80045c6 <_printf_i+0x22e>
 80045da:	bf00      	nop
 80045dc:	08005509 	.word	0x08005509
 80045e0:	0800551a 	.word	0x0800551a

080045e4 <__svfiscanf_r>:
 80045e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045e8:	461d      	mov	r5, r3
 80045ea:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80045ec:	07df      	lsls	r7, r3, #31
 80045ee:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80045f2:	4606      	mov	r6, r0
 80045f4:	460c      	mov	r4, r1
 80045f6:	4692      	mov	sl, r2
 80045f8:	d405      	bmi.n	8004606 <__svfiscanf_r+0x22>
 80045fa:	898b      	ldrh	r3, [r1, #12]
 80045fc:	0598      	lsls	r0, r3, #22
 80045fe:	d402      	bmi.n	8004606 <__svfiscanf_r+0x22>
 8004600:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8004602:	f7ff fbb2 	bl	8003d6a <__retarget_lock_acquire_recursive>
 8004606:	2300      	movs	r3, #0
 8004608:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 800460c:	4ba6      	ldr	r3, [pc, #664]	; (80048a8 <__svfiscanf_r+0x2c4>)
 800460e:	93a0      	str	r3, [sp, #640]	; 0x280
 8004610:	f10d 0804 	add.w	r8, sp, #4
 8004614:	4ba5      	ldr	r3, [pc, #660]	; (80048ac <__svfiscanf_r+0x2c8>)
 8004616:	4fa6      	ldr	r7, [pc, #664]	; (80048b0 <__svfiscanf_r+0x2cc>)
 8004618:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80048b4 <__svfiscanf_r+0x2d0>
 800461c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004620:	93a1      	str	r3, [sp, #644]	; 0x284
 8004622:	9500      	str	r5, [sp, #0]
 8004624:	f89a 3000 	ldrb.w	r3, [sl]
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 8173 	beq.w	8004914 <__svfiscanf_r+0x330>
 800462e:	5dd9      	ldrb	r1, [r3, r7]
 8004630:	f011 0108 	ands.w	r1, r1, #8
 8004634:	f10a 0501 	add.w	r5, sl, #1
 8004638:	d019      	beq.n	800466e <__svfiscanf_r+0x8a>
 800463a:	6863      	ldr	r3, [r4, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	dd0f      	ble.n	8004660 <__svfiscanf_r+0x7c>
 8004640:	6823      	ldr	r3, [r4, #0]
 8004642:	781a      	ldrb	r2, [r3, #0]
 8004644:	5cba      	ldrb	r2, [r7, r2]
 8004646:	0711      	lsls	r1, r2, #28
 8004648:	d401      	bmi.n	800464e <__svfiscanf_r+0x6a>
 800464a:	46aa      	mov	sl, r5
 800464c:	e7ea      	b.n	8004624 <__svfiscanf_r+0x40>
 800464e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004650:	3201      	adds	r2, #1
 8004652:	9245      	str	r2, [sp, #276]	; 0x114
 8004654:	6862      	ldr	r2, [r4, #4]
 8004656:	3301      	adds	r3, #1
 8004658:	3a01      	subs	r2, #1
 800465a:	6062      	str	r2, [r4, #4]
 800465c:	6023      	str	r3, [r4, #0]
 800465e:	e7ec      	b.n	800463a <__svfiscanf_r+0x56>
 8004660:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004662:	4621      	mov	r1, r4
 8004664:	4630      	mov	r0, r6
 8004666:	4798      	blx	r3
 8004668:	2800      	cmp	r0, #0
 800466a:	d0e9      	beq.n	8004640 <__svfiscanf_r+0x5c>
 800466c:	e7ed      	b.n	800464a <__svfiscanf_r+0x66>
 800466e:	2b25      	cmp	r3, #37	; 0x25
 8004670:	d012      	beq.n	8004698 <__svfiscanf_r+0xb4>
 8004672:	469a      	mov	sl, r3
 8004674:	6863      	ldr	r3, [r4, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	f340 8095 	ble.w	80047a6 <__svfiscanf_r+0x1c2>
 800467c:	6822      	ldr	r2, [r4, #0]
 800467e:	7813      	ldrb	r3, [r2, #0]
 8004680:	4553      	cmp	r3, sl
 8004682:	f040 8147 	bne.w	8004914 <__svfiscanf_r+0x330>
 8004686:	6863      	ldr	r3, [r4, #4]
 8004688:	3b01      	subs	r3, #1
 800468a:	6063      	str	r3, [r4, #4]
 800468c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800468e:	3201      	adds	r2, #1
 8004690:	3301      	adds	r3, #1
 8004692:	6022      	str	r2, [r4, #0]
 8004694:	9345      	str	r3, [sp, #276]	; 0x114
 8004696:	e7d8      	b.n	800464a <__svfiscanf_r+0x66>
 8004698:	9141      	str	r1, [sp, #260]	; 0x104
 800469a:	9143      	str	r1, [sp, #268]	; 0x10c
 800469c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80046a0:	2b2a      	cmp	r3, #42	; 0x2a
 80046a2:	bf02      	ittt	eq
 80046a4:	2310      	moveq	r3, #16
 80046a6:	9341      	streq	r3, [sp, #260]	; 0x104
 80046a8:	f10a 0502 	addeq.w	r5, sl, #2
 80046ac:	220a      	movs	r2, #10
 80046ae:	46aa      	mov	sl, r5
 80046b0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80046b4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80046b8:	2b09      	cmp	r3, #9
 80046ba:	d91e      	bls.n	80046fa <__svfiscanf_r+0x116>
 80046bc:	487d      	ldr	r0, [pc, #500]	; (80048b4 <__svfiscanf_r+0x2d0>)
 80046be:	2203      	movs	r2, #3
 80046c0:	f7fb ff5e 	bl	8000580 <memchr>
 80046c4:	b140      	cbz	r0, 80046d8 <__svfiscanf_r+0xf4>
 80046c6:	2301      	movs	r3, #1
 80046c8:	eba0 0009 	sub.w	r0, r0, r9
 80046cc:	fa03 f000 	lsl.w	r0, r3, r0
 80046d0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80046d2:	4318      	orrs	r0, r3
 80046d4:	9041      	str	r0, [sp, #260]	; 0x104
 80046d6:	4655      	mov	r5, sl
 80046d8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80046dc:	2b78      	cmp	r3, #120	; 0x78
 80046de:	d807      	bhi.n	80046f0 <__svfiscanf_r+0x10c>
 80046e0:	2b57      	cmp	r3, #87	; 0x57
 80046e2:	d811      	bhi.n	8004708 <__svfiscanf_r+0x124>
 80046e4:	2b25      	cmp	r3, #37	; 0x25
 80046e6:	d0c4      	beq.n	8004672 <__svfiscanf_r+0x8e>
 80046e8:	d858      	bhi.n	800479c <__svfiscanf_r+0x1b8>
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 80c8 	beq.w	8004880 <__svfiscanf_r+0x29c>
 80046f0:	2303      	movs	r3, #3
 80046f2:	9347      	str	r3, [sp, #284]	; 0x11c
 80046f4:	230a      	movs	r3, #10
 80046f6:	9342      	str	r3, [sp, #264]	; 0x108
 80046f8:	e07c      	b.n	80047f4 <__svfiscanf_r+0x210>
 80046fa:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80046fc:	fb02 1103 	mla	r1, r2, r3, r1
 8004700:	3930      	subs	r1, #48	; 0x30
 8004702:	9143      	str	r1, [sp, #268]	; 0x10c
 8004704:	4655      	mov	r5, sl
 8004706:	e7d2      	b.n	80046ae <__svfiscanf_r+0xca>
 8004708:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800470c:	2a20      	cmp	r2, #32
 800470e:	d8ef      	bhi.n	80046f0 <__svfiscanf_r+0x10c>
 8004710:	a101      	add	r1, pc, #4	; (adr r1, 8004718 <__svfiscanf_r+0x134>)
 8004712:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004716:	bf00      	nop
 8004718:	080047df 	.word	0x080047df
 800471c:	080046f1 	.word	0x080046f1
 8004720:	080046f1 	.word	0x080046f1
 8004724:	0800483d 	.word	0x0800483d
 8004728:	080046f1 	.word	0x080046f1
 800472c:	080046f1 	.word	0x080046f1
 8004730:	080046f1 	.word	0x080046f1
 8004734:	080046f1 	.word	0x080046f1
 8004738:	080046f1 	.word	0x080046f1
 800473c:	080046f1 	.word	0x080046f1
 8004740:	080046f1 	.word	0x080046f1
 8004744:	08004853 	.word	0x08004853
 8004748:	08004829 	.word	0x08004829
 800474c:	080047a3 	.word	0x080047a3
 8004750:	080047a3 	.word	0x080047a3
 8004754:	080047a3 	.word	0x080047a3
 8004758:	080046f1 	.word	0x080046f1
 800475c:	0800482d 	.word	0x0800482d
 8004760:	080046f1 	.word	0x080046f1
 8004764:	080046f1 	.word	0x080046f1
 8004768:	080046f1 	.word	0x080046f1
 800476c:	080046f1 	.word	0x080046f1
 8004770:	08004863 	.word	0x08004863
 8004774:	08004835 	.word	0x08004835
 8004778:	080047d7 	.word	0x080047d7
 800477c:	080046f1 	.word	0x080046f1
 8004780:	080046f1 	.word	0x080046f1
 8004784:	0800485f 	.word	0x0800485f
 8004788:	080046f1 	.word	0x080046f1
 800478c:	08004829 	.word	0x08004829
 8004790:	080046f1 	.word	0x080046f1
 8004794:	080046f1 	.word	0x080046f1
 8004798:	080047df 	.word	0x080047df
 800479c:	3b45      	subs	r3, #69	; 0x45
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d8a6      	bhi.n	80046f0 <__svfiscanf_r+0x10c>
 80047a2:	2305      	movs	r3, #5
 80047a4:	e025      	b.n	80047f2 <__svfiscanf_r+0x20e>
 80047a6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80047a8:	4621      	mov	r1, r4
 80047aa:	4630      	mov	r0, r6
 80047ac:	4798      	blx	r3
 80047ae:	2800      	cmp	r0, #0
 80047b0:	f43f af64 	beq.w	800467c <__svfiscanf_r+0x98>
 80047b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047b6:	07da      	lsls	r2, r3, #31
 80047b8:	f140 80a4 	bpl.w	8004904 <__svfiscanf_r+0x320>
 80047bc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80047be:	2800      	cmp	r0, #0
 80047c0:	d067      	beq.n	8004892 <__svfiscanf_r+0x2ae>
 80047c2:	89a3      	ldrh	r3, [r4, #12]
 80047c4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80047c8:	bf18      	it	ne
 80047ca:	f04f 30ff 	movne.w	r0, #4294967295
 80047ce:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80047d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80047d8:	f042 0220 	orr.w	r2, r2, #32
 80047dc:	9241      	str	r2, [sp, #260]	; 0x104
 80047de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80047e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e4:	9241      	str	r2, [sp, #260]	; 0x104
 80047e6:	2210      	movs	r2, #16
 80047e8:	2b6f      	cmp	r3, #111	; 0x6f
 80047ea:	9242      	str	r2, [sp, #264]	; 0x108
 80047ec:	bf34      	ite	cc
 80047ee:	2303      	movcc	r3, #3
 80047f0:	2304      	movcs	r3, #4
 80047f2:	9347      	str	r3, [sp, #284]	; 0x11c
 80047f4:	6863      	ldr	r3, [r4, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	dd4e      	ble.n	8004898 <__svfiscanf_r+0x2b4>
 80047fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80047fc:	065b      	lsls	r3, r3, #25
 80047fe:	d404      	bmi.n	800480a <__svfiscanf_r+0x226>
 8004800:	6823      	ldr	r3, [r4, #0]
 8004802:	781a      	ldrb	r2, [r3, #0]
 8004804:	5cba      	ldrb	r2, [r7, r2]
 8004806:	0710      	lsls	r0, r2, #28
 8004808:	d456      	bmi.n	80048b8 <__svfiscanf_r+0x2d4>
 800480a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800480c:	2b02      	cmp	r3, #2
 800480e:	dc65      	bgt.n	80048dc <__svfiscanf_r+0x2f8>
 8004810:	466b      	mov	r3, sp
 8004812:	4622      	mov	r2, r4
 8004814:	a941      	add	r1, sp, #260	; 0x104
 8004816:	4630      	mov	r0, r6
 8004818:	f000 f8b2 	bl	8004980 <_scanf_chars>
 800481c:	2801      	cmp	r0, #1
 800481e:	d079      	beq.n	8004914 <__svfiscanf_r+0x330>
 8004820:	2802      	cmp	r0, #2
 8004822:	f47f af12 	bne.w	800464a <__svfiscanf_r+0x66>
 8004826:	e7c5      	b.n	80047b4 <__svfiscanf_r+0x1d0>
 8004828:	220a      	movs	r2, #10
 800482a:	e7dd      	b.n	80047e8 <__svfiscanf_r+0x204>
 800482c:	2300      	movs	r3, #0
 800482e:	9342      	str	r3, [sp, #264]	; 0x108
 8004830:	2303      	movs	r3, #3
 8004832:	e7de      	b.n	80047f2 <__svfiscanf_r+0x20e>
 8004834:	2308      	movs	r3, #8
 8004836:	9342      	str	r3, [sp, #264]	; 0x108
 8004838:	2304      	movs	r3, #4
 800483a:	e7da      	b.n	80047f2 <__svfiscanf_r+0x20e>
 800483c:	4629      	mov	r1, r5
 800483e:	4640      	mov	r0, r8
 8004840:	f000 fac0 	bl	8004dc4 <__sccl>
 8004844:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800484a:	9341      	str	r3, [sp, #260]	; 0x104
 800484c:	4605      	mov	r5, r0
 800484e:	2301      	movs	r3, #1
 8004850:	e7cf      	b.n	80047f2 <__svfiscanf_r+0x20e>
 8004852:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004858:	9341      	str	r3, [sp, #260]	; 0x104
 800485a:	2300      	movs	r3, #0
 800485c:	e7c9      	b.n	80047f2 <__svfiscanf_r+0x20e>
 800485e:	2302      	movs	r3, #2
 8004860:	e7c7      	b.n	80047f2 <__svfiscanf_r+0x20e>
 8004862:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004864:	06c3      	lsls	r3, r0, #27
 8004866:	f53f aef0 	bmi.w	800464a <__svfiscanf_r+0x66>
 800486a:	9b00      	ldr	r3, [sp, #0]
 800486c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800486e:	1d19      	adds	r1, r3, #4
 8004870:	9100      	str	r1, [sp, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f010 0f01 	tst.w	r0, #1
 8004878:	bf14      	ite	ne
 800487a:	801a      	strhne	r2, [r3, #0]
 800487c:	601a      	streq	r2, [r3, #0]
 800487e:	e6e4      	b.n	800464a <__svfiscanf_r+0x66>
 8004880:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004882:	07d8      	lsls	r0, r3, #31
 8004884:	d405      	bmi.n	8004892 <__svfiscanf_r+0x2ae>
 8004886:	89a3      	ldrh	r3, [r4, #12]
 8004888:	0599      	lsls	r1, r3, #22
 800488a:	d402      	bmi.n	8004892 <__svfiscanf_r+0x2ae>
 800488c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800488e:	f7ff fa6d 	bl	8003d6c <__retarget_lock_release_recursive>
 8004892:	f04f 30ff 	mov.w	r0, #4294967295
 8004896:	e79a      	b.n	80047ce <__svfiscanf_r+0x1ea>
 8004898:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800489a:	4621      	mov	r1, r4
 800489c:	4630      	mov	r0, r6
 800489e:	4798      	blx	r3
 80048a0:	2800      	cmp	r0, #0
 80048a2:	d0aa      	beq.n	80047fa <__svfiscanf_r+0x216>
 80048a4:	e786      	b.n	80047b4 <__svfiscanf_r+0x1d0>
 80048a6:	bf00      	nop
 80048a8:	08005121 	.word	0x08005121
 80048ac:	08004c39 	.word	0x08004c39
 80048b0:	08005547 	.word	0x08005547
 80048b4:	080054fe 	.word	0x080054fe
 80048b8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80048ba:	3201      	adds	r2, #1
 80048bc:	9245      	str	r2, [sp, #276]	; 0x114
 80048be:	6862      	ldr	r2, [r4, #4]
 80048c0:	3a01      	subs	r2, #1
 80048c2:	2a00      	cmp	r2, #0
 80048c4:	6062      	str	r2, [r4, #4]
 80048c6:	dd02      	ble.n	80048ce <__svfiscanf_r+0x2ea>
 80048c8:	3301      	adds	r3, #1
 80048ca:	6023      	str	r3, [r4, #0]
 80048cc:	e798      	b.n	8004800 <__svfiscanf_r+0x21c>
 80048ce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80048d0:	4621      	mov	r1, r4
 80048d2:	4630      	mov	r0, r6
 80048d4:	4798      	blx	r3
 80048d6:	2800      	cmp	r0, #0
 80048d8:	d092      	beq.n	8004800 <__svfiscanf_r+0x21c>
 80048da:	e76b      	b.n	80047b4 <__svfiscanf_r+0x1d0>
 80048dc:	2b04      	cmp	r3, #4
 80048de:	dc06      	bgt.n	80048ee <__svfiscanf_r+0x30a>
 80048e0:	466b      	mov	r3, sp
 80048e2:	4622      	mov	r2, r4
 80048e4:	a941      	add	r1, sp, #260	; 0x104
 80048e6:	4630      	mov	r0, r6
 80048e8:	f000 f8a4 	bl	8004a34 <_scanf_i>
 80048ec:	e796      	b.n	800481c <__svfiscanf_r+0x238>
 80048ee:	4b0f      	ldr	r3, [pc, #60]	; (800492c <__svfiscanf_r+0x348>)
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f43f aeaa 	beq.w	800464a <__svfiscanf_r+0x66>
 80048f6:	466b      	mov	r3, sp
 80048f8:	4622      	mov	r2, r4
 80048fa:	a941      	add	r1, sp, #260	; 0x104
 80048fc:	4630      	mov	r0, r6
 80048fe:	f3af 8000 	nop.w
 8004902:	e78b      	b.n	800481c <__svfiscanf_r+0x238>
 8004904:	89a3      	ldrh	r3, [r4, #12]
 8004906:	0599      	lsls	r1, r3, #22
 8004908:	f53f af58 	bmi.w	80047bc <__svfiscanf_r+0x1d8>
 800490c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800490e:	f7ff fa2d 	bl	8003d6c <__retarget_lock_release_recursive>
 8004912:	e753      	b.n	80047bc <__svfiscanf_r+0x1d8>
 8004914:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004916:	07da      	lsls	r2, r3, #31
 8004918:	d405      	bmi.n	8004926 <__svfiscanf_r+0x342>
 800491a:	89a3      	ldrh	r3, [r4, #12]
 800491c:	059b      	lsls	r3, r3, #22
 800491e:	d402      	bmi.n	8004926 <__svfiscanf_r+0x342>
 8004920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004922:	f7ff fa23 	bl	8003d6c <__retarget_lock_release_recursive>
 8004926:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004928:	e751      	b.n	80047ce <__svfiscanf_r+0x1ea>
 800492a:	bf00      	nop
 800492c:	00000000 	.word	0x00000000

08004930 <_vfiscanf_r>:
 8004930:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004932:	460c      	mov	r4, r1
 8004934:	4605      	mov	r5, r0
 8004936:	b138      	cbz	r0, 8004948 <_vfiscanf_r+0x18>
 8004938:	6981      	ldr	r1, [r0, #24]
 800493a:	b929      	cbnz	r1, 8004948 <_vfiscanf_r+0x18>
 800493c:	e9cd 2300 	strd	r2, r3, [sp]
 8004940:	f7ff f918 	bl	8003b74 <__sinit>
 8004944:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004948:	490a      	ldr	r1, [pc, #40]	; (8004974 <_vfiscanf_r+0x44>)
 800494a:	428c      	cmp	r4, r1
 800494c:	d107      	bne.n	800495e <_vfiscanf_r+0x2e>
 800494e:	686c      	ldr	r4, [r5, #4]
 8004950:	4621      	mov	r1, r4
 8004952:	4628      	mov	r0, r5
 8004954:	b003      	add	sp, #12
 8004956:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800495a:	f7ff be43 	b.w	80045e4 <__svfiscanf_r>
 800495e:	4906      	ldr	r1, [pc, #24]	; (8004978 <_vfiscanf_r+0x48>)
 8004960:	428c      	cmp	r4, r1
 8004962:	d101      	bne.n	8004968 <_vfiscanf_r+0x38>
 8004964:	68ac      	ldr	r4, [r5, #8]
 8004966:	e7f3      	b.n	8004950 <_vfiscanf_r+0x20>
 8004968:	4904      	ldr	r1, [pc, #16]	; (800497c <_vfiscanf_r+0x4c>)
 800496a:	428c      	cmp	r4, r1
 800496c:	bf08      	it	eq
 800496e:	68ec      	ldreq	r4, [r5, #12]
 8004970:	e7ee      	b.n	8004950 <_vfiscanf_r+0x20>
 8004972:	bf00      	nop
 8004974:	080054b8 	.word	0x080054b8
 8004978:	080054d8 	.word	0x080054d8
 800497c:	08005498 	.word	0x08005498

08004980 <_scanf_chars>:
 8004980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004984:	4615      	mov	r5, r2
 8004986:	688a      	ldr	r2, [r1, #8]
 8004988:	4680      	mov	r8, r0
 800498a:	460c      	mov	r4, r1
 800498c:	b932      	cbnz	r2, 800499c <_scanf_chars+0x1c>
 800498e:	698a      	ldr	r2, [r1, #24]
 8004990:	2a00      	cmp	r2, #0
 8004992:	bf0c      	ite	eq
 8004994:	2201      	moveq	r2, #1
 8004996:	f04f 32ff 	movne.w	r2, #4294967295
 800499a:	608a      	str	r2, [r1, #8]
 800499c:	6822      	ldr	r2, [r4, #0]
 800499e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8004a30 <_scanf_chars+0xb0>
 80049a2:	06d1      	lsls	r1, r2, #27
 80049a4:	bf5f      	itttt	pl
 80049a6:	681a      	ldrpl	r2, [r3, #0]
 80049a8:	1d11      	addpl	r1, r2, #4
 80049aa:	6019      	strpl	r1, [r3, #0]
 80049ac:	6816      	ldrpl	r6, [r2, #0]
 80049ae:	2700      	movs	r7, #0
 80049b0:	69a0      	ldr	r0, [r4, #24]
 80049b2:	b188      	cbz	r0, 80049d8 <_scanf_chars+0x58>
 80049b4:	2801      	cmp	r0, #1
 80049b6:	d107      	bne.n	80049c8 <_scanf_chars+0x48>
 80049b8:	682a      	ldr	r2, [r5, #0]
 80049ba:	7811      	ldrb	r1, [r2, #0]
 80049bc:	6962      	ldr	r2, [r4, #20]
 80049be:	5c52      	ldrb	r2, [r2, r1]
 80049c0:	b952      	cbnz	r2, 80049d8 <_scanf_chars+0x58>
 80049c2:	2f00      	cmp	r7, #0
 80049c4:	d031      	beq.n	8004a2a <_scanf_chars+0xaa>
 80049c6:	e022      	b.n	8004a0e <_scanf_chars+0x8e>
 80049c8:	2802      	cmp	r0, #2
 80049ca:	d120      	bne.n	8004a0e <_scanf_chars+0x8e>
 80049cc:	682b      	ldr	r3, [r5, #0]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80049d4:	071b      	lsls	r3, r3, #28
 80049d6:	d41a      	bmi.n	8004a0e <_scanf_chars+0x8e>
 80049d8:	6823      	ldr	r3, [r4, #0]
 80049da:	06da      	lsls	r2, r3, #27
 80049dc:	bf5e      	ittt	pl
 80049de:	682b      	ldrpl	r3, [r5, #0]
 80049e0:	781b      	ldrbpl	r3, [r3, #0]
 80049e2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80049e6:	682a      	ldr	r2, [r5, #0]
 80049e8:	686b      	ldr	r3, [r5, #4]
 80049ea:	3201      	adds	r2, #1
 80049ec:	602a      	str	r2, [r5, #0]
 80049ee:	68a2      	ldr	r2, [r4, #8]
 80049f0:	3b01      	subs	r3, #1
 80049f2:	3a01      	subs	r2, #1
 80049f4:	606b      	str	r3, [r5, #4]
 80049f6:	3701      	adds	r7, #1
 80049f8:	60a2      	str	r2, [r4, #8]
 80049fa:	b142      	cbz	r2, 8004a0e <_scanf_chars+0x8e>
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	dcd7      	bgt.n	80049b0 <_scanf_chars+0x30>
 8004a00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004a04:	4629      	mov	r1, r5
 8004a06:	4640      	mov	r0, r8
 8004a08:	4798      	blx	r3
 8004a0a:	2800      	cmp	r0, #0
 8004a0c:	d0d0      	beq.n	80049b0 <_scanf_chars+0x30>
 8004a0e:	6823      	ldr	r3, [r4, #0]
 8004a10:	f013 0310 	ands.w	r3, r3, #16
 8004a14:	d105      	bne.n	8004a22 <_scanf_chars+0xa2>
 8004a16:	68e2      	ldr	r2, [r4, #12]
 8004a18:	3201      	adds	r2, #1
 8004a1a:	60e2      	str	r2, [r4, #12]
 8004a1c:	69a2      	ldr	r2, [r4, #24]
 8004a1e:	b102      	cbz	r2, 8004a22 <_scanf_chars+0xa2>
 8004a20:	7033      	strb	r3, [r6, #0]
 8004a22:	6923      	ldr	r3, [r4, #16]
 8004a24:	443b      	add	r3, r7
 8004a26:	6123      	str	r3, [r4, #16]
 8004a28:	2000      	movs	r0, #0
 8004a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a2e:	bf00      	nop
 8004a30:	08005547 	.word	0x08005547

08004a34 <_scanf_i>:
 8004a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a38:	4698      	mov	r8, r3
 8004a3a:	4b76      	ldr	r3, [pc, #472]	; (8004c14 <_scanf_i+0x1e0>)
 8004a3c:	460c      	mov	r4, r1
 8004a3e:	4682      	mov	sl, r0
 8004a40:	4616      	mov	r6, r2
 8004a42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004a46:	b087      	sub	sp, #28
 8004a48:	ab03      	add	r3, sp, #12
 8004a4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004a4e:	4b72      	ldr	r3, [pc, #456]	; (8004c18 <_scanf_i+0x1e4>)
 8004a50:	69a1      	ldr	r1, [r4, #24]
 8004a52:	4a72      	ldr	r2, [pc, #456]	; (8004c1c <_scanf_i+0x1e8>)
 8004a54:	2903      	cmp	r1, #3
 8004a56:	bf18      	it	ne
 8004a58:	461a      	movne	r2, r3
 8004a5a:	68a3      	ldr	r3, [r4, #8]
 8004a5c:	9201      	str	r2, [sp, #4]
 8004a5e:	1e5a      	subs	r2, r3, #1
 8004a60:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004a64:	bf88      	it	hi
 8004a66:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004a6a:	4627      	mov	r7, r4
 8004a6c:	bf82      	ittt	hi
 8004a6e:	eb03 0905 	addhi.w	r9, r3, r5
 8004a72:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004a76:	60a3      	strhi	r3, [r4, #8]
 8004a78:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004a7c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004a80:	bf98      	it	ls
 8004a82:	f04f 0900 	movls.w	r9, #0
 8004a86:	6023      	str	r3, [r4, #0]
 8004a88:	463d      	mov	r5, r7
 8004a8a:	f04f 0b00 	mov.w	fp, #0
 8004a8e:	6831      	ldr	r1, [r6, #0]
 8004a90:	ab03      	add	r3, sp, #12
 8004a92:	7809      	ldrb	r1, [r1, #0]
 8004a94:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004a98:	2202      	movs	r2, #2
 8004a9a:	f7fb fd71 	bl	8000580 <memchr>
 8004a9e:	b328      	cbz	r0, 8004aec <_scanf_i+0xb8>
 8004aa0:	f1bb 0f01 	cmp.w	fp, #1
 8004aa4:	d159      	bne.n	8004b5a <_scanf_i+0x126>
 8004aa6:	6862      	ldr	r2, [r4, #4]
 8004aa8:	b92a      	cbnz	r2, 8004ab6 <_scanf_i+0x82>
 8004aaa:	6822      	ldr	r2, [r4, #0]
 8004aac:	2308      	movs	r3, #8
 8004aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ab2:	6063      	str	r3, [r4, #4]
 8004ab4:	6022      	str	r2, [r4, #0]
 8004ab6:	6822      	ldr	r2, [r4, #0]
 8004ab8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004abc:	6022      	str	r2, [r4, #0]
 8004abe:	68a2      	ldr	r2, [r4, #8]
 8004ac0:	1e51      	subs	r1, r2, #1
 8004ac2:	60a1      	str	r1, [r4, #8]
 8004ac4:	b192      	cbz	r2, 8004aec <_scanf_i+0xb8>
 8004ac6:	6832      	ldr	r2, [r6, #0]
 8004ac8:	1c51      	adds	r1, r2, #1
 8004aca:	6031      	str	r1, [r6, #0]
 8004acc:	7812      	ldrb	r2, [r2, #0]
 8004ace:	f805 2b01 	strb.w	r2, [r5], #1
 8004ad2:	6872      	ldr	r2, [r6, #4]
 8004ad4:	3a01      	subs	r2, #1
 8004ad6:	2a00      	cmp	r2, #0
 8004ad8:	6072      	str	r2, [r6, #4]
 8004ada:	dc07      	bgt.n	8004aec <_scanf_i+0xb8>
 8004adc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004ae0:	4631      	mov	r1, r6
 8004ae2:	4650      	mov	r0, sl
 8004ae4:	4790      	blx	r2
 8004ae6:	2800      	cmp	r0, #0
 8004ae8:	f040 8085 	bne.w	8004bf6 <_scanf_i+0x1c2>
 8004aec:	f10b 0b01 	add.w	fp, fp, #1
 8004af0:	f1bb 0f03 	cmp.w	fp, #3
 8004af4:	d1cb      	bne.n	8004a8e <_scanf_i+0x5a>
 8004af6:	6863      	ldr	r3, [r4, #4]
 8004af8:	b90b      	cbnz	r3, 8004afe <_scanf_i+0xca>
 8004afa:	230a      	movs	r3, #10
 8004afc:	6063      	str	r3, [r4, #4]
 8004afe:	6863      	ldr	r3, [r4, #4]
 8004b00:	4947      	ldr	r1, [pc, #284]	; (8004c20 <_scanf_i+0x1ec>)
 8004b02:	6960      	ldr	r0, [r4, #20]
 8004b04:	1ac9      	subs	r1, r1, r3
 8004b06:	f000 f95d 	bl	8004dc4 <__sccl>
 8004b0a:	f04f 0b00 	mov.w	fp, #0
 8004b0e:	68a3      	ldr	r3, [r4, #8]
 8004b10:	6822      	ldr	r2, [r4, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d03d      	beq.n	8004b92 <_scanf_i+0x15e>
 8004b16:	6831      	ldr	r1, [r6, #0]
 8004b18:	6960      	ldr	r0, [r4, #20]
 8004b1a:	f891 c000 	ldrb.w	ip, [r1]
 8004b1e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004b22:	2800      	cmp	r0, #0
 8004b24:	d035      	beq.n	8004b92 <_scanf_i+0x15e>
 8004b26:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004b2a:	d124      	bne.n	8004b76 <_scanf_i+0x142>
 8004b2c:	0510      	lsls	r0, r2, #20
 8004b2e:	d522      	bpl.n	8004b76 <_scanf_i+0x142>
 8004b30:	f10b 0b01 	add.w	fp, fp, #1
 8004b34:	f1b9 0f00 	cmp.w	r9, #0
 8004b38:	d003      	beq.n	8004b42 <_scanf_i+0x10e>
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	f109 39ff 	add.w	r9, r9, #4294967295
 8004b40:	60a3      	str	r3, [r4, #8]
 8004b42:	6873      	ldr	r3, [r6, #4]
 8004b44:	3b01      	subs	r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	6073      	str	r3, [r6, #4]
 8004b4a:	dd1b      	ble.n	8004b84 <_scanf_i+0x150>
 8004b4c:	6833      	ldr	r3, [r6, #0]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	6033      	str	r3, [r6, #0]
 8004b52:	68a3      	ldr	r3, [r4, #8]
 8004b54:	3b01      	subs	r3, #1
 8004b56:	60a3      	str	r3, [r4, #8]
 8004b58:	e7d9      	b.n	8004b0e <_scanf_i+0xda>
 8004b5a:	f1bb 0f02 	cmp.w	fp, #2
 8004b5e:	d1ae      	bne.n	8004abe <_scanf_i+0x8a>
 8004b60:	6822      	ldr	r2, [r4, #0]
 8004b62:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004b66:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004b6a:	d1bf      	bne.n	8004aec <_scanf_i+0xb8>
 8004b6c:	2310      	movs	r3, #16
 8004b6e:	6063      	str	r3, [r4, #4]
 8004b70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b74:	e7a2      	b.n	8004abc <_scanf_i+0x88>
 8004b76:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004b7a:	6022      	str	r2, [r4, #0]
 8004b7c:	780b      	ldrb	r3, [r1, #0]
 8004b7e:	f805 3b01 	strb.w	r3, [r5], #1
 8004b82:	e7de      	b.n	8004b42 <_scanf_i+0x10e>
 8004b84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004b88:	4631      	mov	r1, r6
 8004b8a:	4650      	mov	r0, sl
 8004b8c:	4798      	blx	r3
 8004b8e:	2800      	cmp	r0, #0
 8004b90:	d0df      	beq.n	8004b52 <_scanf_i+0x11e>
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	05db      	lsls	r3, r3, #23
 8004b96:	d50d      	bpl.n	8004bb4 <_scanf_i+0x180>
 8004b98:	42bd      	cmp	r5, r7
 8004b9a:	d909      	bls.n	8004bb0 <_scanf_i+0x17c>
 8004b9c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004ba0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ba4:	4632      	mov	r2, r6
 8004ba6:	4650      	mov	r0, sl
 8004ba8:	4798      	blx	r3
 8004baa:	f105 39ff 	add.w	r9, r5, #4294967295
 8004bae:	464d      	mov	r5, r9
 8004bb0:	42bd      	cmp	r5, r7
 8004bb2:	d02d      	beq.n	8004c10 <_scanf_i+0x1dc>
 8004bb4:	6822      	ldr	r2, [r4, #0]
 8004bb6:	f012 0210 	ands.w	r2, r2, #16
 8004bba:	d113      	bne.n	8004be4 <_scanf_i+0x1b0>
 8004bbc:	702a      	strb	r2, [r5, #0]
 8004bbe:	6863      	ldr	r3, [r4, #4]
 8004bc0:	9e01      	ldr	r6, [sp, #4]
 8004bc2:	4639      	mov	r1, r7
 8004bc4:	4650      	mov	r0, sl
 8004bc6:	47b0      	blx	r6
 8004bc8:	6821      	ldr	r1, [r4, #0]
 8004bca:	f8d8 3000 	ldr.w	r3, [r8]
 8004bce:	f011 0f20 	tst.w	r1, #32
 8004bd2:	d013      	beq.n	8004bfc <_scanf_i+0x1c8>
 8004bd4:	1d1a      	adds	r2, r3, #4
 8004bd6:	f8c8 2000 	str.w	r2, [r8]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6018      	str	r0, [r3, #0]
 8004bde:	68e3      	ldr	r3, [r4, #12]
 8004be0:	3301      	adds	r3, #1
 8004be2:	60e3      	str	r3, [r4, #12]
 8004be4:	1bed      	subs	r5, r5, r7
 8004be6:	44ab      	add	fp, r5
 8004be8:	6925      	ldr	r5, [r4, #16]
 8004bea:	445d      	add	r5, fp
 8004bec:	6125      	str	r5, [r4, #16]
 8004bee:	2000      	movs	r0, #0
 8004bf0:	b007      	add	sp, #28
 8004bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bf6:	f04f 0b00 	mov.w	fp, #0
 8004bfa:	e7ca      	b.n	8004b92 <_scanf_i+0x15e>
 8004bfc:	1d1a      	adds	r2, r3, #4
 8004bfe:	f8c8 2000 	str.w	r2, [r8]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f011 0f01 	tst.w	r1, #1
 8004c08:	bf14      	ite	ne
 8004c0a:	8018      	strhne	r0, [r3, #0]
 8004c0c:	6018      	streq	r0, [r3, #0]
 8004c0e:	e7e6      	b.n	8004bde <_scanf_i+0x1aa>
 8004c10:	2001      	movs	r0, #1
 8004c12:	e7ed      	b.n	8004bf0 <_scanf_i+0x1bc>
 8004c14:	08005440 	.word	0x08005440
 8004c18:	080050a9 	.word	0x080050a9
 8004c1c:	08004fc1 	.word	0x08004fc1
 8004c20:	08005544 	.word	0x08005544

08004c24 <lflush>:
 8004c24:	8983      	ldrh	r3, [r0, #12]
 8004c26:	f003 0309 	and.w	r3, r3, #9
 8004c2a:	2b09      	cmp	r3, #9
 8004c2c:	d101      	bne.n	8004c32 <lflush+0xe>
 8004c2e:	f7fe bf37 	b.w	8003aa0 <fflush>
 8004c32:	2000      	movs	r0, #0
 8004c34:	4770      	bx	lr
	...

08004c38 <__srefill_r>:
 8004c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3a:	460c      	mov	r4, r1
 8004c3c:	4605      	mov	r5, r0
 8004c3e:	b118      	cbz	r0, 8004c48 <__srefill_r+0x10>
 8004c40:	6983      	ldr	r3, [r0, #24]
 8004c42:	b90b      	cbnz	r3, 8004c48 <__srefill_r+0x10>
 8004c44:	f7fe ff96 	bl	8003b74 <__sinit>
 8004c48:	4b3b      	ldr	r3, [pc, #236]	; (8004d38 <__srefill_r+0x100>)
 8004c4a:	429c      	cmp	r4, r3
 8004c4c:	d10a      	bne.n	8004c64 <__srefill_r+0x2c>
 8004c4e:	686c      	ldr	r4, [r5, #4]
 8004c50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c54:	2300      	movs	r3, #0
 8004c56:	6063      	str	r3, [r4, #4]
 8004c58:	89a3      	ldrh	r3, [r4, #12]
 8004c5a:	069e      	lsls	r6, r3, #26
 8004c5c:	d50c      	bpl.n	8004c78 <__srefill_r+0x40>
 8004c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c62:	e066      	b.n	8004d32 <__srefill_r+0xfa>
 8004c64:	4b35      	ldr	r3, [pc, #212]	; (8004d3c <__srefill_r+0x104>)
 8004c66:	429c      	cmp	r4, r3
 8004c68:	d101      	bne.n	8004c6e <__srefill_r+0x36>
 8004c6a:	68ac      	ldr	r4, [r5, #8]
 8004c6c:	e7f0      	b.n	8004c50 <__srefill_r+0x18>
 8004c6e:	4b34      	ldr	r3, [pc, #208]	; (8004d40 <__srefill_r+0x108>)
 8004c70:	429c      	cmp	r4, r3
 8004c72:	bf08      	it	eq
 8004c74:	68ec      	ldreq	r4, [r5, #12]
 8004c76:	e7eb      	b.n	8004c50 <__srefill_r+0x18>
 8004c78:	0758      	lsls	r0, r3, #29
 8004c7a:	d448      	bmi.n	8004d0e <__srefill_r+0xd6>
 8004c7c:	06d9      	lsls	r1, r3, #27
 8004c7e:	d405      	bmi.n	8004c8c <__srefill_r+0x54>
 8004c80:	2309      	movs	r3, #9
 8004c82:	602b      	str	r3, [r5, #0]
 8004c84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004c88:	81a3      	strh	r3, [r4, #12]
 8004c8a:	e7e8      	b.n	8004c5e <__srefill_r+0x26>
 8004c8c:	071a      	lsls	r2, r3, #28
 8004c8e:	d50b      	bpl.n	8004ca8 <__srefill_r+0x70>
 8004c90:	4621      	mov	r1, r4
 8004c92:	4628      	mov	r0, r5
 8004c94:	f7fe fec8 	bl	8003a28 <_fflush_r>
 8004c98:	2800      	cmp	r0, #0
 8004c9a:	d1e0      	bne.n	8004c5e <__srefill_r+0x26>
 8004c9c:	89a3      	ldrh	r3, [r4, #12]
 8004c9e:	60a0      	str	r0, [r4, #8]
 8004ca0:	f023 0308 	bic.w	r3, r3, #8
 8004ca4:	81a3      	strh	r3, [r4, #12]
 8004ca6:	61a0      	str	r0, [r4, #24]
 8004ca8:	89a3      	ldrh	r3, [r4, #12]
 8004caa:	f043 0304 	orr.w	r3, r3, #4
 8004cae:	81a3      	strh	r3, [r4, #12]
 8004cb0:	6923      	ldr	r3, [r4, #16]
 8004cb2:	b91b      	cbnz	r3, 8004cbc <__srefill_r+0x84>
 8004cb4:	4621      	mov	r1, r4
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	f7ff f87e 	bl	8003db8 <__smakebuf_r>
 8004cbc:	89a6      	ldrh	r6, [r4, #12]
 8004cbe:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8004cc2:	07b3      	lsls	r3, r6, #30
 8004cc4:	d00f      	beq.n	8004ce6 <__srefill_r+0xae>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	81a3      	strh	r3, [r4, #12]
 8004cca:	4b1e      	ldr	r3, [pc, #120]	; (8004d44 <__srefill_r+0x10c>)
 8004ccc:	491e      	ldr	r1, [pc, #120]	; (8004d48 <__srefill_r+0x110>)
 8004cce:	6818      	ldr	r0, [r3, #0]
 8004cd0:	f006 0609 	and.w	r6, r6, #9
 8004cd4:	f7fe ffcc 	bl	8003c70 <_fwalk>
 8004cd8:	2e09      	cmp	r6, #9
 8004cda:	81a7      	strh	r7, [r4, #12]
 8004cdc:	d103      	bne.n	8004ce6 <__srefill_r+0xae>
 8004cde:	4621      	mov	r1, r4
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	f7fe fe1b 	bl	800391c <__sflush_r>
 8004ce6:	6922      	ldr	r2, [r4, #16]
 8004ce8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004cea:	6963      	ldr	r3, [r4, #20]
 8004cec:	6a21      	ldr	r1, [r4, #32]
 8004cee:	6022      	str	r2, [r4, #0]
 8004cf0:	4628      	mov	r0, r5
 8004cf2:	47b0      	blx	r6
 8004cf4:	2800      	cmp	r0, #0
 8004cf6:	6060      	str	r0, [r4, #4]
 8004cf8:	dc1c      	bgt.n	8004d34 <__srefill_r+0xfc>
 8004cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cfe:	bf17      	itett	ne
 8004d00:	2200      	movne	r2, #0
 8004d02:	f043 0320 	orreq.w	r3, r3, #32
 8004d06:	6062      	strne	r2, [r4, #4]
 8004d08:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8004d0c:	e7bc      	b.n	8004c88 <__srefill_r+0x50>
 8004d0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d10:	2900      	cmp	r1, #0
 8004d12:	d0cd      	beq.n	8004cb0 <__srefill_r+0x78>
 8004d14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d18:	4299      	cmp	r1, r3
 8004d1a:	d002      	beq.n	8004d22 <__srefill_r+0xea>
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	f7ff f893 	bl	8003e48 <_free_r>
 8004d22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d24:	6063      	str	r3, [r4, #4]
 8004d26:	2000      	movs	r0, #0
 8004d28:	6360      	str	r0, [r4, #52]	; 0x34
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0c0      	beq.n	8004cb0 <__srefill_r+0x78>
 8004d2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004d30:	6023      	str	r3, [r4, #0]
 8004d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d34:	2000      	movs	r0, #0
 8004d36:	e7fc      	b.n	8004d32 <__srefill_r+0xfa>
 8004d38:	080054b8 	.word	0x080054b8
 8004d3c:	080054d8 	.word	0x080054d8
 8004d40:	08005498 	.word	0x08005498
 8004d44:	08005494 	.word	0x08005494
 8004d48:	08004c25 	.word	0x08004c25

08004d4c <__srget_r>:
 8004d4c:	b538      	push	{r3, r4, r5, lr}
 8004d4e:	460c      	mov	r4, r1
 8004d50:	4605      	mov	r5, r0
 8004d52:	b118      	cbz	r0, 8004d5c <__srget_r+0x10>
 8004d54:	6983      	ldr	r3, [r0, #24]
 8004d56:	b90b      	cbnz	r3, 8004d5c <__srget_r+0x10>
 8004d58:	f7fe ff0c 	bl	8003b74 <__sinit>
 8004d5c:	4b0e      	ldr	r3, [pc, #56]	; (8004d98 <__srget_r+0x4c>)
 8004d5e:	429c      	cmp	r4, r3
 8004d60:	d10d      	bne.n	8004d7e <__srget_r+0x32>
 8004d62:	686c      	ldr	r4, [r5, #4]
 8004d64:	4621      	mov	r1, r4
 8004d66:	4628      	mov	r0, r5
 8004d68:	f7ff ff66 	bl	8004c38 <__srefill_r>
 8004d6c:	b988      	cbnz	r0, 8004d92 <__srget_r+0x46>
 8004d6e:	6863      	ldr	r3, [r4, #4]
 8004d70:	3b01      	subs	r3, #1
 8004d72:	6063      	str	r3, [r4, #4]
 8004d74:	6823      	ldr	r3, [r4, #0]
 8004d76:	1c5a      	adds	r2, r3, #1
 8004d78:	6022      	str	r2, [r4, #0]
 8004d7a:	7818      	ldrb	r0, [r3, #0]
 8004d7c:	bd38      	pop	{r3, r4, r5, pc}
 8004d7e:	4b07      	ldr	r3, [pc, #28]	; (8004d9c <__srget_r+0x50>)
 8004d80:	429c      	cmp	r4, r3
 8004d82:	d101      	bne.n	8004d88 <__srget_r+0x3c>
 8004d84:	68ac      	ldr	r4, [r5, #8]
 8004d86:	e7ed      	b.n	8004d64 <__srget_r+0x18>
 8004d88:	4b05      	ldr	r3, [pc, #20]	; (8004da0 <__srget_r+0x54>)
 8004d8a:	429c      	cmp	r4, r3
 8004d8c:	bf08      	it	eq
 8004d8e:	68ec      	ldreq	r4, [r5, #12]
 8004d90:	e7e8      	b.n	8004d64 <__srget_r+0x18>
 8004d92:	f04f 30ff 	mov.w	r0, #4294967295
 8004d96:	e7f1      	b.n	8004d7c <__srget_r+0x30>
 8004d98:	080054b8 	.word	0x080054b8
 8004d9c:	080054d8 	.word	0x080054d8
 8004da0:	08005498 	.word	0x08005498

08004da4 <_sbrk_r>:
 8004da4:	b538      	push	{r3, r4, r5, lr}
 8004da6:	4d06      	ldr	r5, [pc, #24]	; (8004dc0 <_sbrk_r+0x1c>)
 8004da8:	2300      	movs	r3, #0
 8004daa:	4604      	mov	r4, r0
 8004dac:	4608      	mov	r0, r1
 8004dae:	602b      	str	r3, [r5, #0]
 8004db0:	f7fc f89e 	bl	8000ef0 <_sbrk>
 8004db4:	1c43      	adds	r3, r0, #1
 8004db6:	d102      	bne.n	8004dbe <_sbrk_r+0x1a>
 8004db8:	682b      	ldr	r3, [r5, #0]
 8004dba:	b103      	cbz	r3, 8004dbe <_sbrk_r+0x1a>
 8004dbc:	6023      	str	r3, [r4, #0]
 8004dbe:	bd38      	pop	{r3, r4, r5, pc}
 8004dc0:	20000528 	.word	0x20000528

08004dc4 <__sccl>:
 8004dc4:	b570      	push	{r4, r5, r6, lr}
 8004dc6:	780b      	ldrb	r3, [r1, #0]
 8004dc8:	4604      	mov	r4, r0
 8004dca:	2b5e      	cmp	r3, #94	; 0x5e
 8004dcc:	bf0b      	itete	eq
 8004dce:	784b      	ldrbeq	r3, [r1, #1]
 8004dd0:	1c48      	addne	r0, r1, #1
 8004dd2:	1c88      	addeq	r0, r1, #2
 8004dd4:	2200      	movne	r2, #0
 8004dd6:	bf08      	it	eq
 8004dd8:	2201      	moveq	r2, #1
 8004dda:	1e61      	subs	r1, r4, #1
 8004ddc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004de0:	f801 2f01 	strb.w	r2, [r1, #1]!
 8004de4:	42a9      	cmp	r1, r5
 8004de6:	d1fb      	bne.n	8004de0 <__sccl+0x1c>
 8004de8:	b90b      	cbnz	r3, 8004dee <__sccl+0x2a>
 8004dea:	3801      	subs	r0, #1
 8004dec:	bd70      	pop	{r4, r5, r6, pc}
 8004dee:	f082 0201 	eor.w	r2, r2, #1
 8004df2:	54e2      	strb	r2, [r4, r3]
 8004df4:	4605      	mov	r5, r0
 8004df6:	4628      	mov	r0, r5
 8004df8:	f810 1b01 	ldrb.w	r1, [r0], #1
 8004dfc:	292d      	cmp	r1, #45	; 0x2d
 8004dfe:	d006      	beq.n	8004e0e <__sccl+0x4a>
 8004e00:	295d      	cmp	r1, #93	; 0x5d
 8004e02:	d0f3      	beq.n	8004dec <__sccl+0x28>
 8004e04:	b909      	cbnz	r1, 8004e0a <__sccl+0x46>
 8004e06:	4628      	mov	r0, r5
 8004e08:	e7f0      	b.n	8004dec <__sccl+0x28>
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	e7f1      	b.n	8004df2 <__sccl+0x2e>
 8004e0e:	786e      	ldrb	r6, [r5, #1]
 8004e10:	2e5d      	cmp	r6, #93	; 0x5d
 8004e12:	d0fa      	beq.n	8004e0a <__sccl+0x46>
 8004e14:	42b3      	cmp	r3, r6
 8004e16:	dcf8      	bgt.n	8004e0a <__sccl+0x46>
 8004e18:	3502      	adds	r5, #2
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	3101      	adds	r1, #1
 8004e1e:	428e      	cmp	r6, r1
 8004e20:	5462      	strb	r2, [r4, r1]
 8004e22:	dcfb      	bgt.n	8004e1c <__sccl+0x58>
 8004e24:	1af1      	subs	r1, r6, r3
 8004e26:	3901      	subs	r1, #1
 8004e28:	1c58      	adds	r0, r3, #1
 8004e2a:	42b3      	cmp	r3, r6
 8004e2c:	bfa8      	it	ge
 8004e2e:	2100      	movge	r1, #0
 8004e30:	1843      	adds	r3, r0, r1
 8004e32:	e7e0      	b.n	8004df6 <__sccl+0x32>

08004e34 <__sread>:
 8004e34:	b510      	push	{r4, lr}
 8004e36:	460c      	mov	r4, r1
 8004e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e3c:	f000 faa8 	bl	8005390 <_read_r>
 8004e40:	2800      	cmp	r0, #0
 8004e42:	bfab      	itete	ge
 8004e44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e46:	89a3      	ldrhlt	r3, [r4, #12]
 8004e48:	181b      	addge	r3, r3, r0
 8004e4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e4e:	bfac      	ite	ge
 8004e50:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e52:	81a3      	strhlt	r3, [r4, #12]
 8004e54:	bd10      	pop	{r4, pc}

08004e56 <__swrite>:
 8004e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e5a:	461f      	mov	r7, r3
 8004e5c:	898b      	ldrh	r3, [r1, #12]
 8004e5e:	05db      	lsls	r3, r3, #23
 8004e60:	4605      	mov	r5, r0
 8004e62:	460c      	mov	r4, r1
 8004e64:	4616      	mov	r6, r2
 8004e66:	d505      	bpl.n	8004e74 <__swrite+0x1e>
 8004e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f000 fa32 	bl	80052d8 <_lseek_r>
 8004e74:	89a3      	ldrh	r3, [r4, #12]
 8004e76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e7e:	81a3      	strh	r3, [r4, #12]
 8004e80:	4632      	mov	r2, r6
 8004e82:	463b      	mov	r3, r7
 8004e84:	4628      	mov	r0, r5
 8004e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e8a:	f000 b9e1 	b.w	8005250 <_write_r>

08004e8e <__sseek>:
 8004e8e:	b510      	push	{r4, lr}
 8004e90:	460c      	mov	r4, r1
 8004e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e96:	f000 fa1f 	bl	80052d8 <_lseek_r>
 8004e9a:	1c43      	adds	r3, r0, #1
 8004e9c:	89a3      	ldrh	r3, [r4, #12]
 8004e9e:	bf15      	itete	ne
 8004ea0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ea2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ea6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004eaa:	81a3      	strheq	r3, [r4, #12]
 8004eac:	bf18      	it	ne
 8004eae:	81a3      	strhne	r3, [r4, #12]
 8004eb0:	bd10      	pop	{r4, pc}

08004eb2 <__sclose>:
 8004eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eb6:	f000 b9dd 	b.w	8005274 <_close_r>
	...

08004ebc <_strtol_l.constprop.0>:
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec2:	d001      	beq.n	8004ec8 <_strtol_l.constprop.0+0xc>
 8004ec4:	2b24      	cmp	r3, #36	; 0x24
 8004ec6:	d906      	bls.n	8004ed6 <_strtol_l.constprop.0+0x1a>
 8004ec8:	f7fe fab8 	bl	800343c <__errno>
 8004ecc:	2316      	movs	r3, #22
 8004ece:	6003      	str	r3, [r0, #0]
 8004ed0:	2000      	movs	r0, #0
 8004ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ed6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004fbc <_strtol_l.constprop.0+0x100>
 8004eda:	460d      	mov	r5, r1
 8004edc:	462e      	mov	r6, r5
 8004ede:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ee2:	f814 700c 	ldrb.w	r7, [r4, ip]
 8004ee6:	f017 0708 	ands.w	r7, r7, #8
 8004eea:	d1f7      	bne.n	8004edc <_strtol_l.constprop.0+0x20>
 8004eec:	2c2d      	cmp	r4, #45	; 0x2d
 8004eee:	d132      	bne.n	8004f56 <_strtol_l.constprop.0+0x9a>
 8004ef0:	782c      	ldrb	r4, [r5, #0]
 8004ef2:	2701      	movs	r7, #1
 8004ef4:	1cb5      	adds	r5, r6, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d05b      	beq.n	8004fb2 <_strtol_l.constprop.0+0xf6>
 8004efa:	2b10      	cmp	r3, #16
 8004efc:	d109      	bne.n	8004f12 <_strtol_l.constprop.0+0x56>
 8004efe:	2c30      	cmp	r4, #48	; 0x30
 8004f00:	d107      	bne.n	8004f12 <_strtol_l.constprop.0+0x56>
 8004f02:	782c      	ldrb	r4, [r5, #0]
 8004f04:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004f08:	2c58      	cmp	r4, #88	; 0x58
 8004f0a:	d14d      	bne.n	8004fa8 <_strtol_l.constprop.0+0xec>
 8004f0c:	786c      	ldrb	r4, [r5, #1]
 8004f0e:	2310      	movs	r3, #16
 8004f10:	3502      	adds	r5, #2
 8004f12:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004f16:	f108 38ff 	add.w	r8, r8, #4294967295
 8004f1a:	f04f 0c00 	mov.w	ip, #0
 8004f1e:	fbb8 f9f3 	udiv	r9, r8, r3
 8004f22:	4666      	mov	r6, ip
 8004f24:	fb03 8a19 	mls	sl, r3, r9, r8
 8004f28:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004f2c:	f1be 0f09 	cmp.w	lr, #9
 8004f30:	d816      	bhi.n	8004f60 <_strtol_l.constprop.0+0xa4>
 8004f32:	4674      	mov	r4, lr
 8004f34:	42a3      	cmp	r3, r4
 8004f36:	dd24      	ble.n	8004f82 <_strtol_l.constprop.0+0xc6>
 8004f38:	f1bc 0f00 	cmp.w	ip, #0
 8004f3c:	db1e      	blt.n	8004f7c <_strtol_l.constprop.0+0xc0>
 8004f3e:	45b1      	cmp	r9, r6
 8004f40:	d31c      	bcc.n	8004f7c <_strtol_l.constprop.0+0xc0>
 8004f42:	d101      	bne.n	8004f48 <_strtol_l.constprop.0+0x8c>
 8004f44:	45a2      	cmp	sl, r4
 8004f46:	db19      	blt.n	8004f7c <_strtol_l.constprop.0+0xc0>
 8004f48:	fb06 4603 	mla	r6, r6, r3, r4
 8004f4c:	f04f 0c01 	mov.w	ip, #1
 8004f50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004f54:	e7e8      	b.n	8004f28 <_strtol_l.constprop.0+0x6c>
 8004f56:	2c2b      	cmp	r4, #43	; 0x2b
 8004f58:	bf04      	itt	eq
 8004f5a:	782c      	ldrbeq	r4, [r5, #0]
 8004f5c:	1cb5      	addeq	r5, r6, #2
 8004f5e:	e7ca      	b.n	8004ef6 <_strtol_l.constprop.0+0x3a>
 8004f60:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004f64:	f1be 0f19 	cmp.w	lr, #25
 8004f68:	d801      	bhi.n	8004f6e <_strtol_l.constprop.0+0xb2>
 8004f6a:	3c37      	subs	r4, #55	; 0x37
 8004f6c:	e7e2      	b.n	8004f34 <_strtol_l.constprop.0+0x78>
 8004f6e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004f72:	f1be 0f19 	cmp.w	lr, #25
 8004f76:	d804      	bhi.n	8004f82 <_strtol_l.constprop.0+0xc6>
 8004f78:	3c57      	subs	r4, #87	; 0x57
 8004f7a:	e7db      	b.n	8004f34 <_strtol_l.constprop.0+0x78>
 8004f7c:	f04f 3cff 	mov.w	ip, #4294967295
 8004f80:	e7e6      	b.n	8004f50 <_strtol_l.constprop.0+0x94>
 8004f82:	f1bc 0f00 	cmp.w	ip, #0
 8004f86:	da05      	bge.n	8004f94 <_strtol_l.constprop.0+0xd8>
 8004f88:	2322      	movs	r3, #34	; 0x22
 8004f8a:	6003      	str	r3, [r0, #0]
 8004f8c:	4646      	mov	r6, r8
 8004f8e:	b942      	cbnz	r2, 8004fa2 <_strtol_l.constprop.0+0xe6>
 8004f90:	4630      	mov	r0, r6
 8004f92:	e79e      	b.n	8004ed2 <_strtol_l.constprop.0+0x16>
 8004f94:	b107      	cbz	r7, 8004f98 <_strtol_l.constprop.0+0xdc>
 8004f96:	4276      	negs	r6, r6
 8004f98:	2a00      	cmp	r2, #0
 8004f9a:	d0f9      	beq.n	8004f90 <_strtol_l.constprop.0+0xd4>
 8004f9c:	f1bc 0f00 	cmp.w	ip, #0
 8004fa0:	d000      	beq.n	8004fa4 <_strtol_l.constprop.0+0xe8>
 8004fa2:	1e69      	subs	r1, r5, #1
 8004fa4:	6011      	str	r1, [r2, #0]
 8004fa6:	e7f3      	b.n	8004f90 <_strtol_l.constprop.0+0xd4>
 8004fa8:	2430      	movs	r4, #48	; 0x30
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1b1      	bne.n	8004f12 <_strtol_l.constprop.0+0x56>
 8004fae:	2308      	movs	r3, #8
 8004fb0:	e7af      	b.n	8004f12 <_strtol_l.constprop.0+0x56>
 8004fb2:	2c30      	cmp	r4, #48	; 0x30
 8004fb4:	d0a5      	beq.n	8004f02 <_strtol_l.constprop.0+0x46>
 8004fb6:	230a      	movs	r3, #10
 8004fb8:	e7ab      	b.n	8004f12 <_strtol_l.constprop.0+0x56>
 8004fba:	bf00      	nop
 8004fbc:	08005547 	.word	0x08005547

08004fc0 <_strtol_r>:
 8004fc0:	f7ff bf7c 	b.w	8004ebc <_strtol_l.constprop.0>

08004fc4 <_strtoul_l.constprop.0>:
 8004fc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fc8:	4f36      	ldr	r7, [pc, #216]	; (80050a4 <_strtoul_l.constprop.0+0xe0>)
 8004fca:	4686      	mov	lr, r0
 8004fcc:	460d      	mov	r5, r1
 8004fce:	4628      	mov	r0, r5
 8004fd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004fd4:	5de6      	ldrb	r6, [r4, r7]
 8004fd6:	f016 0608 	ands.w	r6, r6, #8
 8004fda:	d1f8      	bne.n	8004fce <_strtoul_l.constprop.0+0xa>
 8004fdc:	2c2d      	cmp	r4, #45	; 0x2d
 8004fde:	d12f      	bne.n	8005040 <_strtoul_l.constprop.0+0x7c>
 8004fe0:	782c      	ldrb	r4, [r5, #0]
 8004fe2:	2601      	movs	r6, #1
 8004fe4:	1c85      	adds	r5, r0, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d057      	beq.n	800509a <_strtoul_l.constprop.0+0xd6>
 8004fea:	2b10      	cmp	r3, #16
 8004fec:	d109      	bne.n	8005002 <_strtoul_l.constprop.0+0x3e>
 8004fee:	2c30      	cmp	r4, #48	; 0x30
 8004ff0:	d107      	bne.n	8005002 <_strtoul_l.constprop.0+0x3e>
 8004ff2:	7828      	ldrb	r0, [r5, #0]
 8004ff4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004ff8:	2858      	cmp	r0, #88	; 0x58
 8004ffa:	d149      	bne.n	8005090 <_strtoul_l.constprop.0+0xcc>
 8004ffc:	786c      	ldrb	r4, [r5, #1]
 8004ffe:	2310      	movs	r3, #16
 8005000:	3502      	adds	r5, #2
 8005002:	f04f 38ff 	mov.w	r8, #4294967295
 8005006:	2700      	movs	r7, #0
 8005008:	fbb8 f8f3 	udiv	r8, r8, r3
 800500c:	fb03 f908 	mul.w	r9, r3, r8
 8005010:	ea6f 0909 	mvn.w	r9, r9
 8005014:	4638      	mov	r0, r7
 8005016:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800501a:	f1bc 0f09 	cmp.w	ip, #9
 800501e:	d814      	bhi.n	800504a <_strtoul_l.constprop.0+0x86>
 8005020:	4664      	mov	r4, ip
 8005022:	42a3      	cmp	r3, r4
 8005024:	dd22      	ble.n	800506c <_strtoul_l.constprop.0+0xa8>
 8005026:	2f00      	cmp	r7, #0
 8005028:	db1d      	blt.n	8005066 <_strtoul_l.constprop.0+0xa2>
 800502a:	4580      	cmp	r8, r0
 800502c:	d31b      	bcc.n	8005066 <_strtoul_l.constprop.0+0xa2>
 800502e:	d101      	bne.n	8005034 <_strtoul_l.constprop.0+0x70>
 8005030:	45a1      	cmp	r9, r4
 8005032:	db18      	blt.n	8005066 <_strtoul_l.constprop.0+0xa2>
 8005034:	fb00 4003 	mla	r0, r0, r3, r4
 8005038:	2701      	movs	r7, #1
 800503a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800503e:	e7ea      	b.n	8005016 <_strtoul_l.constprop.0+0x52>
 8005040:	2c2b      	cmp	r4, #43	; 0x2b
 8005042:	bf04      	itt	eq
 8005044:	782c      	ldrbeq	r4, [r5, #0]
 8005046:	1c85      	addeq	r5, r0, #2
 8005048:	e7cd      	b.n	8004fe6 <_strtoul_l.constprop.0+0x22>
 800504a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800504e:	f1bc 0f19 	cmp.w	ip, #25
 8005052:	d801      	bhi.n	8005058 <_strtoul_l.constprop.0+0x94>
 8005054:	3c37      	subs	r4, #55	; 0x37
 8005056:	e7e4      	b.n	8005022 <_strtoul_l.constprop.0+0x5e>
 8005058:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800505c:	f1bc 0f19 	cmp.w	ip, #25
 8005060:	d804      	bhi.n	800506c <_strtoul_l.constprop.0+0xa8>
 8005062:	3c57      	subs	r4, #87	; 0x57
 8005064:	e7dd      	b.n	8005022 <_strtoul_l.constprop.0+0x5e>
 8005066:	f04f 37ff 	mov.w	r7, #4294967295
 800506a:	e7e6      	b.n	800503a <_strtoul_l.constprop.0+0x76>
 800506c:	2f00      	cmp	r7, #0
 800506e:	da07      	bge.n	8005080 <_strtoul_l.constprop.0+0xbc>
 8005070:	2322      	movs	r3, #34	; 0x22
 8005072:	f8ce 3000 	str.w	r3, [lr]
 8005076:	f04f 30ff 	mov.w	r0, #4294967295
 800507a:	b932      	cbnz	r2, 800508a <_strtoul_l.constprop.0+0xc6>
 800507c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005080:	b106      	cbz	r6, 8005084 <_strtoul_l.constprop.0+0xc0>
 8005082:	4240      	negs	r0, r0
 8005084:	2a00      	cmp	r2, #0
 8005086:	d0f9      	beq.n	800507c <_strtoul_l.constprop.0+0xb8>
 8005088:	b107      	cbz	r7, 800508c <_strtoul_l.constprop.0+0xc8>
 800508a:	1e69      	subs	r1, r5, #1
 800508c:	6011      	str	r1, [r2, #0]
 800508e:	e7f5      	b.n	800507c <_strtoul_l.constprop.0+0xb8>
 8005090:	2430      	movs	r4, #48	; 0x30
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1b5      	bne.n	8005002 <_strtoul_l.constprop.0+0x3e>
 8005096:	2308      	movs	r3, #8
 8005098:	e7b3      	b.n	8005002 <_strtoul_l.constprop.0+0x3e>
 800509a:	2c30      	cmp	r4, #48	; 0x30
 800509c:	d0a9      	beq.n	8004ff2 <_strtoul_l.constprop.0+0x2e>
 800509e:	230a      	movs	r3, #10
 80050a0:	e7af      	b.n	8005002 <_strtoul_l.constprop.0+0x3e>
 80050a2:	bf00      	nop
 80050a4:	08005547 	.word	0x08005547

080050a8 <_strtoul_r>:
 80050a8:	f7ff bf8c 	b.w	8004fc4 <_strtoul_l.constprop.0>

080050ac <__submore>:
 80050ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050b0:	460c      	mov	r4, r1
 80050b2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80050b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050b8:	4299      	cmp	r1, r3
 80050ba:	d11d      	bne.n	80050f8 <__submore+0x4c>
 80050bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80050c0:	f7fe ff2e 	bl	8003f20 <_malloc_r>
 80050c4:	b918      	cbnz	r0, 80050ce <__submore+0x22>
 80050c6:	f04f 30ff 	mov.w	r0, #4294967295
 80050ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050d2:	63a3      	str	r3, [r4, #56]	; 0x38
 80050d4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80050d8:	6360      	str	r0, [r4, #52]	; 0x34
 80050da:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80050de:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80050e2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80050e6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80050ea:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80050ee:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80050f2:	6020      	str	r0, [r4, #0]
 80050f4:	2000      	movs	r0, #0
 80050f6:	e7e8      	b.n	80050ca <__submore+0x1e>
 80050f8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80050fa:	0077      	lsls	r7, r6, #1
 80050fc:	463a      	mov	r2, r7
 80050fe:	f000 f917 	bl	8005330 <_realloc_r>
 8005102:	4605      	mov	r5, r0
 8005104:	2800      	cmp	r0, #0
 8005106:	d0de      	beq.n	80050c6 <__submore+0x1a>
 8005108:	eb00 0806 	add.w	r8, r0, r6
 800510c:	4601      	mov	r1, r0
 800510e:	4632      	mov	r2, r6
 8005110:	4640      	mov	r0, r8
 8005112:	f000 f8f3 	bl	80052fc <memcpy>
 8005116:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800511a:	f8c4 8000 	str.w	r8, [r4]
 800511e:	e7e9      	b.n	80050f4 <__submore+0x48>

08005120 <_ungetc_r>:
 8005120:	b570      	push	{r4, r5, r6, lr}
 8005122:	4614      	mov	r4, r2
 8005124:	1c4a      	adds	r2, r1, #1
 8005126:	4606      	mov	r6, r0
 8005128:	460d      	mov	r5, r1
 800512a:	d103      	bne.n	8005134 <_ungetc_r+0x14>
 800512c:	f04f 35ff 	mov.w	r5, #4294967295
 8005130:	4628      	mov	r0, r5
 8005132:	bd70      	pop	{r4, r5, r6, pc}
 8005134:	b118      	cbz	r0, 800513e <_ungetc_r+0x1e>
 8005136:	6983      	ldr	r3, [r0, #24]
 8005138:	b90b      	cbnz	r3, 800513e <_ungetc_r+0x1e>
 800513a:	f7fe fd1b 	bl	8003b74 <__sinit>
 800513e:	4b41      	ldr	r3, [pc, #260]	; (8005244 <_ungetc_r+0x124>)
 8005140:	429c      	cmp	r4, r3
 8005142:	d11d      	bne.n	8005180 <_ungetc_r+0x60>
 8005144:	6874      	ldr	r4, [r6, #4]
 8005146:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005148:	07db      	lsls	r3, r3, #31
 800514a:	d405      	bmi.n	8005158 <_ungetc_r+0x38>
 800514c:	89a3      	ldrh	r3, [r4, #12]
 800514e:	0598      	lsls	r0, r3, #22
 8005150:	d402      	bmi.n	8005158 <_ungetc_r+0x38>
 8005152:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005154:	f7fe fe09 	bl	8003d6a <__retarget_lock_acquire_recursive>
 8005158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800515c:	f023 0320 	bic.w	r3, r3, #32
 8005160:	0759      	lsls	r1, r3, #29
 8005162:	81a3      	strh	r3, [r4, #12]
 8005164:	b29a      	uxth	r2, r3
 8005166:	d42d      	bmi.n	80051c4 <_ungetc_r+0xa4>
 8005168:	06d3      	lsls	r3, r2, #27
 800516a:	d413      	bmi.n	8005194 <_ungetc_r+0x74>
 800516c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800516e:	07dd      	lsls	r5, r3, #31
 8005170:	d4dc      	bmi.n	800512c <_ungetc_r+0xc>
 8005172:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005176:	d1d9      	bne.n	800512c <_ungetc_r+0xc>
 8005178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800517a:	f7fe fdf7 	bl	8003d6c <__retarget_lock_release_recursive>
 800517e:	e7d5      	b.n	800512c <_ungetc_r+0xc>
 8005180:	4b31      	ldr	r3, [pc, #196]	; (8005248 <_ungetc_r+0x128>)
 8005182:	429c      	cmp	r4, r3
 8005184:	d101      	bne.n	800518a <_ungetc_r+0x6a>
 8005186:	68b4      	ldr	r4, [r6, #8]
 8005188:	e7dd      	b.n	8005146 <_ungetc_r+0x26>
 800518a:	4b30      	ldr	r3, [pc, #192]	; (800524c <_ungetc_r+0x12c>)
 800518c:	429c      	cmp	r4, r3
 800518e:	bf08      	it	eq
 8005190:	68f4      	ldreq	r4, [r6, #12]
 8005192:	e7d8      	b.n	8005146 <_ungetc_r+0x26>
 8005194:	0710      	lsls	r0, r2, #28
 8005196:	d511      	bpl.n	80051bc <_ungetc_r+0x9c>
 8005198:	4621      	mov	r1, r4
 800519a:	4630      	mov	r0, r6
 800519c:	f7fe fc44 	bl	8003a28 <_fflush_r>
 80051a0:	b130      	cbz	r0, 80051b0 <_ungetc_r+0x90>
 80051a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051a4:	07d9      	lsls	r1, r3, #31
 80051a6:	d4c1      	bmi.n	800512c <_ungetc_r+0xc>
 80051a8:	89a3      	ldrh	r3, [r4, #12]
 80051aa:	f413 7f00 	tst.w	r3, #512	; 0x200
 80051ae:	e7e2      	b.n	8005176 <_ungetc_r+0x56>
 80051b0:	89a3      	ldrh	r3, [r4, #12]
 80051b2:	60a0      	str	r0, [r4, #8]
 80051b4:	f023 0308 	bic.w	r3, r3, #8
 80051b8:	81a3      	strh	r3, [r4, #12]
 80051ba:	61a0      	str	r0, [r4, #24]
 80051bc:	89a3      	ldrh	r3, [r4, #12]
 80051be:	f043 0304 	orr.w	r3, r3, #4
 80051c2:	81a3      	strh	r3, [r4, #12]
 80051c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80051c6:	6862      	ldr	r2, [r4, #4]
 80051c8:	b2ed      	uxtb	r5, r5
 80051ca:	b1d3      	cbz	r3, 8005202 <_ungetc_r+0xe2>
 80051cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051ce:	4293      	cmp	r3, r2
 80051d0:	dc05      	bgt.n	80051de <_ungetc_r+0xbe>
 80051d2:	4621      	mov	r1, r4
 80051d4:	4630      	mov	r0, r6
 80051d6:	f7ff ff69 	bl	80050ac <__submore>
 80051da:	2800      	cmp	r0, #0
 80051dc:	d1e1      	bne.n	80051a2 <_ungetc_r+0x82>
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	1e5a      	subs	r2, r3, #1
 80051e2:	6022      	str	r2, [r4, #0]
 80051e4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80051e8:	6863      	ldr	r3, [r4, #4]
 80051ea:	3301      	adds	r3, #1
 80051ec:	6063      	str	r3, [r4, #4]
 80051ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051f0:	07da      	lsls	r2, r3, #31
 80051f2:	d49d      	bmi.n	8005130 <_ungetc_r+0x10>
 80051f4:	89a3      	ldrh	r3, [r4, #12]
 80051f6:	059b      	lsls	r3, r3, #22
 80051f8:	d49a      	bmi.n	8005130 <_ungetc_r+0x10>
 80051fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051fc:	f7fe fdb6 	bl	8003d6c <__retarget_lock_release_recursive>
 8005200:	e796      	b.n	8005130 <_ungetc_r+0x10>
 8005202:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005204:	6920      	ldr	r0, [r4, #16]
 8005206:	6823      	ldr	r3, [r4, #0]
 8005208:	f001 0101 	and.w	r1, r1, #1
 800520c:	b160      	cbz	r0, 8005228 <_ungetc_r+0x108>
 800520e:	4298      	cmp	r0, r3
 8005210:	d20a      	bcs.n	8005228 <_ungetc_r+0x108>
 8005212:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8005216:	42a8      	cmp	r0, r5
 8005218:	d106      	bne.n	8005228 <_ungetc_r+0x108>
 800521a:	3b01      	subs	r3, #1
 800521c:	3201      	adds	r2, #1
 800521e:	6023      	str	r3, [r4, #0]
 8005220:	6062      	str	r2, [r4, #4]
 8005222:	2900      	cmp	r1, #0
 8005224:	d184      	bne.n	8005130 <_ungetc_r+0x10>
 8005226:	e7e5      	b.n	80051f4 <_ungetc_r+0xd4>
 8005228:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800522c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005230:	6363      	str	r3, [r4, #52]	; 0x34
 8005232:	2303      	movs	r3, #3
 8005234:	63a3      	str	r3, [r4, #56]	; 0x38
 8005236:	4623      	mov	r3, r4
 8005238:	f803 5f46 	strb.w	r5, [r3, #70]!
 800523c:	6023      	str	r3, [r4, #0]
 800523e:	2301      	movs	r3, #1
 8005240:	6063      	str	r3, [r4, #4]
 8005242:	e7ee      	b.n	8005222 <_ungetc_r+0x102>
 8005244:	080054b8 	.word	0x080054b8
 8005248:	080054d8 	.word	0x080054d8
 800524c:	08005498 	.word	0x08005498

08005250 <_write_r>:
 8005250:	b538      	push	{r3, r4, r5, lr}
 8005252:	4d07      	ldr	r5, [pc, #28]	; (8005270 <_write_r+0x20>)
 8005254:	4604      	mov	r4, r0
 8005256:	4608      	mov	r0, r1
 8005258:	4611      	mov	r1, r2
 800525a:	2200      	movs	r2, #0
 800525c:	602a      	str	r2, [r5, #0]
 800525e:	461a      	mov	r2, r3
 8005260:	f7fb fcf6 	bl	8000c50 <_write>
 8005264:	1c43      	adds	r3, r0, #1
 8005266:	d102      	bne.n	800526e <_write_r+0x1e>
 8005268:	682b      	ldr	r3, [r5, #0]
 800526a:	b103      	cbz	r3, 800526e <_write_r+0x1e>
 800526c:	6023      	str	r3, [r4, #0]
 800526e:	bd38      	pop	{r3, r4, r5, pc}
 8005270:	20000528 	.word	0x20000528

08005274 <_close_r>:
 8005274:	b538      	push	{r3, r4, r5, lr}
 8005276:	4d06      	ldr	r5, [pc, #24]	; (8005290 <_close_r+0x1c>)
 8005278:	2300      	movs	r3, #0
 800527a:	4604      	mov	r4, r0
 800527c:	4608      	mov	r0, r1
 800527e:	602b      	str	r3, [r5, #0]
 8005280:	f7fb fd12 	bl	8000ca8 <_close>
 8005284:	1c43      	adds	r3, r0, #1
 8005286:	d102      	bne.n	800528e <_close_r+0x1a>
 8005288:	682b      	ldr	r3, [r5, #0]
 800528a:	b103      	cbz	r3, 800528e <_close_r+0x1a>
 800528c:	6023      	str	r3, [r4, #0]
 800528e:	bd38      	pop	{r3, r4, r5, pc}
 8005290:	20000528 	.word	0x20000528

08005294 <_fstat_r>:
 8005294:	b538      	push	{r3, r4, r5, lr}
 8005296:	4d07      	ldr	r5, [pc, #28]	; (80052b4 <_fstat_r+0x20>)
 8005298:	2300      	movs	r3, #0
 800529a:	4604      	mov	r4, r0
 800529c:	4608      	mov	r0, r1
 800529e:	4611      	mov	r1, r2
 80052a0:	602b      	str	r3, [r5, #0]
 80052a2:	f7fb fd51 	bl	8000d48 <_fstat>
 80052a6:	1c43      	adds	r3, r0, #1
 80052a8:	d102      	bne.n	80052b0 <_fstat_r+0x1c>
 80052aa:	682b      	ldr	r3, [r5, #0]
 80052ac:	b103      	cbz	r3, 80052b0 <_fstat_r+0x1c>
 80052ae:	6023      	str	r3, [r4, #0]
 80052b0:	bd38      	pop	{r3, r4, r5, pc}
 80052b2:	bf00      	nop
 80052b4:	20000528 	.word	0x20000528

080052b8 <_isatty_r>:
 80052b8:	b538      	push	{r3, r4, r5, lr}
 80052ba:	4d06      	ldr	r5, [pc, #24]	; (80052d4 <_isatty_r+0x1c>)
 80052bc:	2300      	movs	r3, #0
 80052be:	4604      	mov	r4, r0
 80052c0:	4608      	mov	r0, r1
 80052c2:	602b      	str	r3, [r5, #0]
 80052c4:	f7fb fcae 	bl	8000c24 <_isatty>
 80052c8:	1c43      	adds	r3, r0, #1
 80052ca:	d102      	bne.n	80052d2 <_isatty_r+0x1a>
 80052cc:	682b      	ldr	r3, [r5, #0]
 80052ce:	b103      	cbz	r3, 80052d2 <_isatty_r+0x1a>
 80052d0:	6023      	str	r3, [r4, #0]
 80052d2:	bd38      	pop	{r3, r4, r5, pc}
 80052d4:	20000528 	.word	0x20000528

080052d8 <_lseek_r>:
 80052d8:	b538      	push	{r3, r4, r5, lr}
 80052da:	4d07      	ldr	r5, [pc, #28]	; (80052f8 <_lseek_r+0x20>)
 80052dc:	4604      	mov	r4, r0
 80052de:	4608      	mov	r0, r1
 80052e0:	4611      	mov	r1, r2
 80052e2:	2200      	movs	r2, #0
 80052e4:	602a      	str	r2, [r5, #0]
 80052e6:	461a      	mov	r2, r3
 80052e8:	f7fb fcf5 	bl	8000cd6 <_lseek>
 80052ec:	1c43      	adds	r3, r0, #1
 80052ee:	d102      	bne.n	80052f6 <_lseek_r+0x1e>
 80052f0:	682b      	ldr	r3, [r5, #0]
 80052f2:	b103      	cbz	r3, 80052f6 <_lseek_r+0x1e>
 80052f4:	6023      	str	r3, [r4, #0]
 80052f6:	bd38      	pop	{r3, r4, r5, pc}
 80052f8:	20000528 	.word	0x20000528

080052fc <memcpy>:
 80052fc:	440a      	add	r2, r1
 80052fe:	4291      	cmp	r1, r2
 8005300:	f100 33ff 	add.w	r3, r0, #4294967295
 8005304:	d100      	bne.n	8005308 <memcpy+0xc>
 8005306:	4770      	bx	lr
 8005308:	b510      	push	{r4, lr}
 800530a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800530e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005312:	4291      	cmp	r1, r2
 8005314:	d1f9      	bne.n	800530a <memcpy+0xe>
 8005316:	bd10      	pop	{r4, pc}

08005318 <__malloc_lock>:
 8005318:	4801      	ldr	r0, [pc, #4]	; (8005320 <__malloc_lock+0x8>)
 800531a:	f7fe bd26 	b.w	8003d6a <__retarget_lock_acquire_recursive>
 800531e:	bf00      	nop
 8005320:	2000051c 	.word	0x2000051c

08005324 <__malloc_unlock>:
 8005324:	4801      	ldr	r0, [pc, #4]	; (800532c <__malloc_unlock+0x8>)
 8005326:	f7fe bd21 	b.w	8003d6c <__retarget_lock_release_recursive>
 800532a:	bf00      	nop
 800532c:	2000051c 	.word	0x2000051c

08005330 <_realloc_r>:
 8005330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005334:	4680      	mov	r8, r0
 8005336:	4614      	mov	r4, r2
 8005338:	460e      	mov	r6, r1
 800533a:	b921      	cbnz	r1, 8005346 <_realloc_r+0x16>
 800533c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005340:	4611      	mov	r1, r2
 8005342:	f7fe bded 	b.w	8003f20 <_malloc_r>
 8005346:	b92a      	cbnz	r2, 8005354 <_realloc_r+0x24>
 8005348:	f7fe fd7e 	bl	8003e48 <_free_r>
 800534c:	4625      	mov	r5, r4
 800534e:	4628      	mov	r0, r5
 8005350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005354:	f000 f82e 	bl	80053b4 <_malloc_usable_size_r>
 8005358:	4284      	cmp	r4, r0
 800535a:	4607      	mov	r7, r0
 800535c:	d802      	bhi.n	8005364 <_realloc_r+0x34>
 800535e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005362:	d812      	bhi.n	800538a <_realloc_r+0x5a>
 8005364:	4621      	mov	r1, r4
 8005366:	4640      	mov	r0, r8
 8005368:	f7fe fdda 	bl	8003f20 <_malloc_r>
 800536c:	4605      	mov	r5, r0
 800536e:	2800      	cmp	r0, #0
 8005370:	d0ed      	beq.n	800534e <_realloc_r+0x1e>
 8005372:	42bc      	cmp	r4, r7
 8005374:	4622      	mov	r2, r4
 8005376:	4631      	mov	r1, r6
 8005378:	bf28      	it	cs
 800537a:	463a      	movcs	r2, r7
 800537c:	f7ff ffbe 	bl	80052fc <memcpy>
 8005380:	4631      	mov	r1, r6
 8005382:	4640      	mov	r0, r8
 8005384:	f7fe fd60 	bl	8003e48 <_free_r>
 8005388:	e7e1      	b.n	800534e <_realloc_r+0x1e>
 800538a:	4635      	mov	r5, r6
 800538c:	e7df      	b.n	800534e <_realloc_r+0x1e>
	...

08005390 <_read_r>:
 8005390:	b538      	push	{r3, r4, r5, lr}
 8005392:	4d07      	ldr	r5, [pc, #28]	; (80053b0 <_read_r+0x20>)
 8005394:	4604      	mov	r4, r0
 8005396:	4608      	mov	r0, r1
 8005398:	4611      	mov	r1, r2
 800539a:	2200      	movs	r2, #0
 800539c:	602a      	str	r2, [r5, #0]
 800539e:	461a      	mov	r2, r3
 80053a0:	f7fb fcaa 	bl	8000cf8 <_read>
 80053a4:	1c43      	adds	r3, r0, #1
 80053a6:	d102      	bne.n	80053ae <_read_r+0x1e>
 80053a8:	682b      	ldr	r3, [r5, #0]
 80053aa:	b103      	cbz	r3, 80053ae <_read_r+0x1e>
 80053ac:	6023      	str	r3, [r4, #0]
 80053ae:	bd38      	pop	{r3, r4, r5, pc}
 80053b0:	20000528 	.word	0x20000528

080053b4 <_malloc_usable_size_r>:
 80053b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053b8:	1f18      	subs	r0, r3, #4
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	bfbc      	itt	lt
 80053be:	580b      	ldrlt	r3, [r1, r0]
 80053c0:	18c0      	addlt	r0, r0, r3
 80053c2:	4770      	bx	lr

080053c4 <_init>:
 80053c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c6:	bf00      	nop
 80053c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ca:	bc08      	pop	{r3}
 80053cc:	469e      	mov	lr, r3
 80053ce:	4770      	bx	lr

080053d0 <_fini>:
 80053d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053d2:	bf00      	nop
 80053d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053d6:	bc08      	pop	{r3}
 80053d8:	469e      	mov	lr, r3
 80053da:	4770      	bx	lr
